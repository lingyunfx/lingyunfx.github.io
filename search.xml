<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>电影视效制作中的Matchmove</title>
      <link href="//whats-matchmoving/"/>
      <url>//whats-matchmoving/</url>
      
        <content type="html"><![CDATA[<h1><span id="简述">简述</span></h1><p>Matchmoving是后期视效制作中使用的一种技术，主要是对镜头画面进行<strong>摄像机反求</strong>和<strong>运动追踪</strong>。</p><p>摄像机反求，通俗来说就是通过追踪的二维点解算，还原镜头拍摄时真实的三维像机路径。</p><p>在实际工作中，matchmoving人员还会涉及到一点layout的工作。</p><p>layout翻译过来是布局，在求得三维相机后，需根据空间比例，透视关系，进行拍摄场景的还原。<br>即是将前期拍摄时的摄像机，被摄的人物与场景，在三维软件中进行虚拟重建。<br>下游组在得到“布局”好的文件后，才能往里放入三维动画，模型，特效等元素。</p><p>所以matchmoving在整个制作中是比较上游的部分，是完成一个特效镜头的“地基”。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p1.gif"></p><h1><span id="历史">历史</span></h1><p>最早的VFX跟踪使用可能是在1985年，其来源于导弹制导系统中使用跟踪的概念。</p><p>在没有数字跟踪前，对于大多数特效镜头，相机都是静止不动的。</p><p>ILM拥有一个称为MM2的早期2D跟踪软件系统，该系统首先在《Hook and Death Becomes Her》中进行了测试。MM2不是自动化工具，而是手动2D微调工具，艺术家可以通过该工具手动更改位置关键帧。</p><p>而后，ILM的TD基于Fourier-domain算法，开发了最早的无标记跟踪系统，“rle_coarse”（用于像素级跟踪），“rle_fine”（用于子像素跟踪）和“rle_track”（适用于Graphics Gems点跟踪工具），用于从点数据中查找3d摄像机位置。</p><p>1992年，最早的跟踪系统Flame在NAB上首次亮相，并在1992年的Siggraph上正式发布。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p2.jpg"></p><p>2001年，boujou在NAB上推出，这个软件的普及让更多的3D专业人士认识和使用相机跟踪。</p><h1><span id="软件">软件</span></h1><ul><li>Boujou</li><li>Pftrack</li><li>SynthEyes</li><li>3DEqualizer</li><li>Mocha</li></ul><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p3.jpg"></p><p>以上是市面上常见的摄像机反求软件，这里不对软件进行更多的介绍与评价。<br>如果想详细了解，可到软件的官网查看相关简介。</p><h1><span id="难点">难点</span></h1><p>在实际制作经验中，摄像机反求存在以下三个痛点：</p><ul><li>畸变（Distortion）</li></ul><p> <img src="https://i.loli.net/2020/02/17/G7X3ZgmJKatC1Py.jpg" alt="distortion.jpg"><br> 当拍摄的素材存在畸变，二维跟踪点越接近画幅边缘，跟踪点提供的坐标信息越不准确。<br> 这会增加解算像机时的错误率，得到错误的三维locator。<br> 不过跟踪软件都具有矫正畸变的功能，对于普通的畸变都可以很好的解决。  </p><p> 而这里提到的难点是针对于anamorphic镜头和鱼眼镜头。<br> anamorphic镜头拍摄到的素材畸变往往带有畸变动画的，比如《无耻混蛋》电影中的一幕</p><p> <img src="https://i.loli.net/2020/02/17/ysNfT64ArqeCwYR.gif" alt="ana.gif"></p><p> 还有就是鱼眼镜头，比如运动相机gopro拍摄出来的素材，这类镜头焦距小，往往畸变很大，矫正也较为困难。  </p><p> <img src="https://i.loli.net/2020/02/17/F6uKdwZk1sU3tTR.jpg" alt="Snipaste_2020-02-17_14-30-55.jpg"></p><ul><li>运动模糊（Motion blur）</li></ul><p> <img src="https://i.loli.net/2020/02/17/pbJTGCiIquWAZe3.jpg" alt="motion_blur.jpg"></p><p> 当摄像机快速移动的时候，被摄物就会产生模糊拖影。<br> 而这样的“不清晰”在添加二维跟踪点的时候就会变得困难许多。  </p><ul><li>遮挡（Occlude）</li></ul><p> 遮挡同样是会影响添加二维跟踪点，因为跟踪点必须是添加到场景中静止不动的元素上，<br> 如果场景中太多移动的元素，并且遮挡在镜头前，摄像机的反求也会变得困难重重。  </p><p> <img src="https://i.loli.net/2020/02/17/YQhw8MCfSJmrAEs.jpg" alt="mask.jpg"></p><h1><span id="依赖">依赖</span></h1><p>说到摄像机反求，不得不提到Onset。<br>Onset可以理解为前期拍摄时的数据采集和现场辅助。<br>而摄像机反求依赖于相机数据，比如镜头对应的摄像机filmback，focal length。甚至有时候需要Onset人员提供Distortion grid和Scan model，以帮助反求时更准确的解算。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p4.jpg"></p><h1><span id="总结">总结</span></h1><p>国内的电影视效还处于初中级的起步阶段，MatchMover在国内来说算是相对冷门的职业。<br>相较于动画，渲染，合成来说，需求并不算多。<br>现在大多成熟的MatchMover也慢慢在往layout和Motion capture靠近。<br>这两项也是国内视效发展的重要趋势，也为更多的Matchmoving工作者提供了更多的可能性。</p>]]></content>
      
      
      <categories>
          
          <category> CG </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建电影视效流程管理系统CGWire</title>
      <link href="//cgwire-install/"/>
      <url>//cgwire-install/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>国庆在家容易想些有的没的，<br>想着万一以后自己开了一个小型视效工作室，<br>该用什么来进行跟踪管理项目进度。</p><p>首先是想到的当然是诸如Shotgun, FTrack, CGTeamWork等这些项目管理平台。<br>但是价格上则让人却步，比如Shotgun收费标准是每人每月30刀。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/install-cgwire/p1.jpg"></p><p>这对于小型低成本工作室，也算是一笔不小的开销。<br>抱着能省则省的态度，在网上找到了<strong>开源免费</strong>的项目管理平台CGWire</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/install-cgwire/p2.jpg"></p><h1><span id="cgwire介绍">CGWire介绍</span></h1><p>文字不如视频直观，下面是官方的视频介绍，<br>可以说是麻雀虽小，该有的功能都有。</p><p><a href="https://youtu.be/EH3RbmHykrE">https://youtu.be/EH3RbmHykrE</a></p><h1><span id="cgwire搭建">CGWire搭建</span></h1><p>接下来就是无趣的代码部分了。<br>我这里使用的是Ubuntu 16.04版本进行的测试。</p><h2><span id="安装软件依赖">安装软件依赖</span></h2><pre><code class="Shell">sudo apt-get updatesudo apt-get install postgresql postgresql-client postgresql-server-dev-allsudo apt-get install redis-serversudo apt-get install python3 python3-pipsudo apt-get install gitsudo apt-get install nginxsudo apt-get install ffmpeg</code></pre><h2><span id="获取资源">获取资源</span></h2><p>创建一个zou用户</p><pre><code class="Shell">sudo useradd --home /opt/zou zoumkdir /opt/zouchown zou: /opt/zou</code></pre><p>安装zou和其依赖</p><pre><code class="Shell">sudo pip3 install virtualenvcd /opt/zousudo virtualenv zouenv. zouenv/bin/activatesudo zouenv/bin/pip3 install zousudo chown -R zou:www-data .</code></pre><p>创建存储预览的文件夹</p><pre><code class="Shell">sudo mkdir /opt/zou/previewssudo chown -R zou:www-data /opt/zou</code></pre><h2><span id="安装postgres数据库">安装Postgres数据库</span></h2><p>在postgres中创建Zou数据库</p><pre><code class="Shell">sudo su -l postgrespsql -c &#39;create database zoudb;&#39; -U postgres</code></pre><p>为postgres用户设置密码</p><pre><code class="Shell"># 输入命令psql# 这里会进入postgres的交互模式&gt;&gt;&gt; psql (9.4.12)&gt;&gt;&gt; Type &quot;help&quot; for help.# 输入下面命令进行密码创建postgres=# \password postgresEnter new password:Enter it again:# 设置完成密码，退出交互模式\q</code></pre><p>如果不想使用交互式创建密码，可以用下面的方式。<br>如果已经创建了密码，跳过此步骤。</p><pre><code class="Shell">psql -U postgres -d postgres -c &quot;alter user postgres with password &#39;mysecretpassword&#39;;&quot;</code></pre><p>最后，创建数据库表。<br>这里需注意已经退出了psql交互模式，并在zou虚拟环境下。</p><pre><code class="Shell"># Run it in your bash console.DB_PASSWORD=yourdbpassword zou init_db</code></pre><h2><span id="准备键值存储">准备键值存储</span></h2><pre><code class="Shell">vim /etc/sysctl.conf</code></pre><p>在这个文件末尾添加一行：<br><code>vm.overcommit_memory = 1</code></p><h3><span id="配置gunicorn">配置Gunicorn</span></h3><p>需要通过Gunicorn运行该应用程序，<br>Gunicorn是将zou作为守护程序运行的WSGI服务器。</p><p>创建配置文件夹</p><pre><code class="Shell">sudo mkdir /etc/zou</code></pre><p>创建Gunicorn配置文件<br>路径： /etc/zou/gunicorn.conf</p><pre><code>accesslog = &quot;/opt/zou/logs/gunicorn_access.log&quot;errorlog = &quot;/opt/zou/logs/gunicorn_error.log&quot;workers = 3worker_class = &quot;gevent&quot;</code></pre><p>创建日志文件夹</p><pre><code class="Shell">sudo mkdir /opt/zou/logssudo chown zou: /opt/zou/logs</code></pre><p>创建进程守护的配置文件<br>路径: /etc/systemd/system/zou.service</p><p>这里需要修改DB_PASSWORD和SECRET_KEY。<br>数据库的密码是之前设置的，而SECRET_KEY可以用pwgen来随机生成。</p><pre><code class="Shell">apt-get install pwgenpwgen 16</code></pre><p>生成后可以复制其中一个给到SECRET_KEY</p><pre><code>[Unit]Description=Gunicorn instance to serve the Zou APIAfter=network.target[Service]User=zouGroup=www-dataWorkingDirectory=/opt/zou# Append DB_USERNAME=username DB_HOST=server when default values aren&#39;t used# ffmpeg must be in PATHEnvironment=&quot;DB_PASSWORD=yourdbpassword&quot;Environment=&quot;SECRET_KEY=yourrandomsecretkey&quot;Environment=&quot;PATH=/opt/zou/zouenv/bin:/usr/bin&quot;Environment=&quot;PREVIEW_FOLDER=/opt/zou/previews&quot;ExecStart=/opt/zou/zouenv/bin/gunicorn  -c /etc/zou/gunicorn.conf -b 127.0.0.1:5000 zou.app:app[Install]WantedBy=multi-user.target</code></pre><p>创建事件流API服务器配置<br>路径: /etc/zou/gunicorn-events.conf</p><pre><code>accesslog = &quot;/opt/zou/logs/gunicorn_events_access.log&quot;errorlog = &quot;/opt/zou/logs/gunicorn_events_error.log&quot;workers = 1worker_class = &quot;geventwebsocket.gunicorn.workers.GeventWebSocketWorker&quot;</code></pre><p>通过Systemd来守护事件流API服务进程<br>路径: /etc/systemd/system/zou-events.service</p><pre><code>[Unit]Description=Gunicorn instance to serve the Zou Events APIAfter=network.target[Service]User=zouGroup=www-dataWorkingDirectory=/opt/zou# Append DB_USERNAME=username DB_HOST=server when default values aren&#39;t usedEnvironment=&quot;PATH=/opt/zou/zouenv/bin&quot;ExecStart=/opt/zou/zouenv/bin/gunicorn -c /etc/zou/gunicorn-events.conf -b 127.0.0.1:5001 zou.event_stream:app[Install]WantedBy=multi-user.target</code></pre><h2><span id="配置nginx">配置Nginx</span></h2><p>配置文件路径: /etc/nginx/sites-available/zou</p><pre><code class="Shell">server &#123;    listen 80;    server_name server_domain_or_IP;    location /api &#123;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_pass http://localhost:5000/;        client_max_body_size 500M;    proxy_connect_timeout 600s;        proxy_send_timeout 600s;        proxy_read_timeout 600s;        send_timeout 600s;    &#125;    location /socket.io &#123;    proxy_http_version 1.1;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &quot;Upgrade&quot;;        proxy_pass http://localhost:5001;    &#125;&#125;</code></pre><p>启用nginx</p><pre><code class="Shell"># 删除默认配置sudo rm /etc/nginx/sites-enabled/default# 创建文件链接sudo ln -s /etc/nginx/sites-available/zou /etc/nginx/sites-enabled# 重启nginxsudo service zou startsudo service zou-events startsudo service nginx restart</code></pre><h2><span id="更新所有包">更新所有包</span></h2><p>更新zou软件包</p><pre><code class="Shell">cd /opt/zou. zouenv/bin/activatesudo zouenv/bin/pip3 install --upgrade zou</code></pre><p>更新数据路架构</p><pre><code class="Shell"># 这里输入数据库的密码DB_PASSWORD=yourdbpassword zou upgrade_db</code></pre><p>重启zou服务</p><pre><code class="Shell">sudo chown -R zou:www-data .sudo service zou restartsudo service zou-events restart</code></pre><h2><span id="部署kitsu">部署Kitsu</span></h2><pre><code class="Shell">cd /opt/sudo git clone -b build https://github.com/cgwire/kitsucd kitsusudo git checkout buildsudo chown -R zou:www-data /opt/kitsu</code></pre><p>部署完成后需要更新nginx的配置</p><pre><code class="Shell">server &#123;    listen 80;    server_name server_domain_or_IP;    location /api &#123;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header Host $host;        proxy_pass http://localhost:5000/;    &#125;    location /socket.io &#123;        proxy_http_version 1.1;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;Upgrade&quot;;        proxy_pass http://localhost:5001;    &#125;    location / &#123;        autoindex on;        root  /opt/kitsu/dist;        try_files $uri $uri/ /index.html;    &#125;&#125;</code></pre><p>重启nginx服务</p><pre><code class="Shell">sudo service nginx restart</code></pre><p>到这一步就可以访问自己的ip或者域名来使用cgwire了。<br>当然，在此之前需要一个管理员账户来登陆cgwire。</p><h2><span id="创建cgwire管理员账户">创建cgwire管理员账户</span></h2><pre><code class="Shell"># 首先进入zou环境cd /opt/zou. zouenv/bin/activate# 创建管理员账户 create_admin后的参数 为自己的登陆邮箱DB_PASSWORD=yourdbpassword zou create_admin adminemail@yourstudio.com# 初始化数据DB_PASSWORD=yourdbpassword zou init_data</code></pre><p>账户创建完成后，默认密码为default，第一次登陆后会强制让你修改密码。<br>最后请尽情的enjoy it。</p><center>（完）</center>]]></content>
      
      
      <categories>
          
          <category> CG </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
