<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unreal学习笔记之基础操作</title>
      <link href="//unreal-basic-leaning/"/>
      <url>//unreal-basic-leaning/</url>
      
        <content type="html"><![CDATA[<h3><span id="bsp-binary-space-partitioning">BSP （Binary Space Partitioning）</span></h3><p>计算机图像学术语：二叉空间划分。</p><p>在UE4被称作为Geometry：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p1.png"></p><p>相较于static mesh，性能稍微差一点。</p><p>适合用来快速搭建原型，验证想法。</p><h3><span id="默认单位">默认单位</span></h3><p>虚幻四中默认单位为厘米。</p><h3><span id="复制物体">复制物体</span></h3><p>按住alt键，移动物体</p><h3><span id="吸附">吸附</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p2.png"></p><p>分别对应位移，旋转，缩放的，这里的snap意为数值snap。</p><h3><span id="落地">落地</span></h3><p>选择物体，按键盘的end键，使物体落地。</p><h3><span id="当场景中显示了preview">当场景中显示了Preview</span></h3><p>代表场景中的区域没有进行构建。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p3.png"></p><p>如果不想看到这个preview可以关闭显示：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p4.png"></p><h3><span id="导入初学者包">导入初学者包</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p5.png"></p><h3><span id="选择geometry物体的所有面">选择Geometry物体的所有面</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p6.png"></p><h3><span id="选择geometry所有相邻的墙面">选择Geometry所有相邻的墙面</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p7.png"></p><h3><span id="分组">分组</span></h3><p>开关：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p8.png"></p><p>选择要打组的物体，按下ctrl+g。</p><p>取消分组：shift+g。</p><p>菜单按钮在右键。</p><h3><span id="镜像">镜像</span></h3><p>选择物体，鼠标右键：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p9.png"></p><h3><span id="将资源迁移到另一个工程">将资源迁移到另一个工程</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p10.png"></p><h3><span id="所有打开的窗口以标签显示">所有打开的窗口以标签显示</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p11.png"></p><h3><span id="在编译完成后自动保存">在编译完成后自动保存</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p12.png"></p><h3><span id="点击play的时候获取鼠标控制">点击Play的时候，获取鼠标控制</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-basic-leaning/p13.png"></p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Unreal </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unreal动画重定向</title>
      <link href="//retarget-ani-unreal/"/>
      <url>//retarget-ani-unreal/</url>
      
        <content type="html"><![CDATA[<h3><span id="1打开骨骼打开retarget-manager面板">1.打开骨骼，打开Retarget Manager面板</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p1.png"></p><h3><span id="2添加目标源">2.添加目标源</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p2.png"></p><h3><span id="3添加rig模板">3.添加Rig模板</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p3.png"></p><h3><span id="4一一对应骨骼">4.一一对应骨骼</span></h3><p>如果有不确定骨骼，宁愿不要添加。<br>(例如没有root骨骼的话，点后面的x去掉)</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p4.png"></p><p>如果有手指的骨骼，点击Show Advanced，指定更多细节骨骼</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p5.png"></p><p>调整完成后，点击Save。</p><h3><span id="5导航到需要的动画右键选中重定向功能">5.导航到需要的动画，右键选中重定向功能</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p6.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p7.png"></p><p>对于体型差异太大的模型，可以选择使用骨骼作为基础。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p8.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p9.png"></p><h3><span id="6对于初始pose不一样的模型需要手动调整">6.对于初始pose不一样的模型，需要手动调整</span></h3><p>比如原始动画是T-Pose，而目标模型是A-Pose。<br>则需要在原始的模型上，进入模型修改界面进行修改。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p10.png"></p><p>修改成A-Pose后，进行保存，然后再点击Hide Pose，回到预览界面。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/retarget-ani-unreal/p11.png"></p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Unreal </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>将Maya的python代码编译成pyd</title>
      <link href="//maya-py-to-pyd/"/>
      <url>//maya-py-to-pyd/</url>
      
        <content type="html"><![CDATA[<p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-py-to-pyd/p1.png" width="50%" height="50%" alt align="center"></left>  </p><h3><span id="关于将py文件编译为pyd">关于将py文件编译为pyd</span></h3><p>当你想把一个python脚本分享出去，又不想暴露源码的时候，可以将py文件编译成pyd或pyc文件。</p><p>pyd格式是D语言(C/C++综合进化版本)生成的二进制文件，实际也会是dll文件。<br>该文件不可以被反编译，只能被反汇编。</p><p>而pyc文件，虽然也是py编译后的格式，但是pyc非常容易被反编译，基本上可以说编译了个寂寞。  </p><p>我之前用过<strong>angelic47</strong>大佬写的<a href="https://pyprotect.angelic47.com/">pyprotect</a>，这是个第三方python加密混淆工具，编译后的pyc代码也具有很高的反编译难度。(其实我自身更偏向于pyc文件，不用像pyd一样太考虑解释器版本和系统平台)</p><p>不过后来pyprotect工具无法使用了，这也是我开始使用pyd格式进行编译的原因。<br>废话到这里，下面开始说下整个编译过程。(这里以Maya2018为例)</p><h3><span id="1找到msc版本和对应vs版本">1.找到MSC版本和对应VS版本</span></h3><p>msc是微软的C编译器，安装对应的VS版本会带有。</p><p>如何查看MSC版本，这里有两种方式：</p><p>使用cmd命令行工具，打开<code>C:\Program Files\Autodesk\Maya2018\bin\mayapy.exe</code></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-py-to-pyd/p2.jpg"></p><p>或者在Maya的script editor里:</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-py-to-pyd/p5.jpg"></p><p>可以看到，Maya2018使用的是<code>MSC v.1900</code>版本，通过下表来找到对应的VS版本。</p><pre class="line-numbers language-none"><code class="language-none">MSC v.1000 -&gt; Visual C++ 4.x        MSC v.1100 -&gt; Visual C++ 5          MSC v.1200 -&gt; Visual C++ 6          MSC v.1300 -&gt; Visual C++ .NET       MSC v.1310 -&gt; Visual C++ .NET 2003  MSC v.1400 -&gt; Visual C++ 2005  (8.0)MSC v.1500 -&gt; Visual C++ 2008  (9.0)MSC v.1600 -&gt; Visual C++ 2010 (10.0)MSC v.1700 -&gt; Visual C++ 2012 (11.0)MSC v.1800 -&gt; Visual C++ 2013 (12.0)MSC v.1900 -&gt; Visual C++ 2015 (14.0)MSC v.1910 -&gt; Visual C++ 2017 (15.0)MSC v.1911 -&gt; Visual C++ 2017 (15.3)MSC v.1912 -&gt; Visual C++ 2017 (15.5)MSC v.1913 -&gt; Visual C++ 2017 (15.6)MSC v.1914 -&gt; Visual C++ 2017 (15.7)MSC v.1915 -&gt; Visual C++ 2017 (15.8)MSC v.1916 -&gt; Visual C++ 2017 (15.9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的版本是Visual C++ 2015，在<a href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/">官网</a>上进行下载安装。<br>也可以到<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a>进行下载。<br>(推荐后者，微软官网的下载体验巨差)</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-py-to-pyd/p3.jpg"></p><p>下载完成后安装，记得勾选</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-py-to-pyd/p4.png"></p><h3><span id="2安装cython">2.安装Cython</span></h3><p>刚刚安装的是编译时所需的依赖，而我们要使用Cython将py文件编译成pyd。  </p><p>去<a href="https://github.com/cython/cython">https://github.com/cython/cython</a>下载源代码进行编译安装，或者到我的网盘<a href="http://s.lingyunfx.com/f/f79425f96f1a460a810d/?dl=1">分享链接</a>进行下载。<br>下载完解压后，先放一边。</p><p>在此之前需要在<code>C:\Program Files\Autodesk\Maya2018\Python</code>下新建两个文件，<code>include</code>和<code>libs </code>。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-py-to-pyd/p6.png"></p><ul><li>拷贝<code>C:\Program Files\Autodesk\Maya2018\lib</code>里的<code>python27.lib</code>文件到<code>C:\Program Files\Autodesk\Maya2018\Python\libs</code></li><li>拷贝<code>C:\Program Files\Autodesk\Maya2018\include\python2.7</code>里的所有文件到<code>C:\Program Files\Autodesk\Maya2018\Python\include</code></li></ul><p>然后用管理员模式打开cmd命令行工具，<code>cd</code>定位到刚刚解压的cython文件夹下。<br>运行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token string">"C:\Program Files\Autodesk\Maya2018<span class="token entity" title="\b">\b</span>in\mayapy.exe"</span>  setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后就可以开始编译代码了。</p><h3><span id="3编译成pyd文件">3.编译成pyd文件</span></h3><p>在你的代码中，写一个<code>setup.py</code>文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token comment">#!/usr/bin/python2</span><span class="token keyword">import</span> os<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setup<span class="token keyword">from</span> Cython<span class="token punctuation">.</span>Build <span class="token keyword">import</span> cythonize<span class="token keyword">from</span> distutils<span class="token punctuation">.</span>extension <span class="token keyword">import</span> Extensionextensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> f <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">,</span> ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'__init__'</span><span class="token punctuation">:</span> <span class="token comment"># __init__文件不能被编译，会发生错误</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> ext <span class="token operator">==</span> <span class="token string">'.py'</span><span class="token punctuation">:</span>        extensions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Extension<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'&#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>setup<span class="token punctuation">(</span>    ext_modules<span class="token operator">=</span>cythonize<span class="token punctuation">(</span>extensions<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开cmd命令行工具，<code>cd</code>到你的代码文件夹，运行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token string">"C:/Program Files/Autodesk/Maya2018/bin/mayapy.exe"</span> setup.py build_ext --inplace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于“你的文件贼健康”的简单处理方式</title>
      <link href="//reject-maya-warning/"/>
      <url>//reject-maya-warning/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p1.png"></p><p>关于“你的文件贼健康”算是一个过时的话题了，不过发现身边的朋友很多还是不知道怎么处理，<br>或还在使用一些比较繁琐的处理方式：  </p><p>1.比如每次打开文件之前用文本编辑器搜索关键字<br>2.打开文件时取消勾选Execute script nodes<br>3.将userSetup文件改为只读<br>等等…</p><p>这里推荐一个最简单的处理方式，也就是安装一个Maya插件： <code>sceneCallback</code><br>使用插件后，<strong>当打开带有“贼健康”的文件时，Maya会弹出提示，并选择直接删除它。</strong><br>(如下图所示)</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p2.gif"></p><p>有了这个插件后，我们不需要关心文件是否被感染，<br>不需要在打开文件前做预先检查和其他操作，正常打开文件即可。<br>插件会帮助我们拦截“贼健康”，并删除它。</p><p>这个插件是甜菜大大写的，插件的github开源地址：<br><a href="https://github.com/cundesi/maya_utils">https://github.com/cundesi/maya_utils</a><br>（如果好用可以给它点一个Star）</p><p>也可以关注一下他的这篇文章：<br><a href="https://mp.weixin.qq.com/s/TW_YqDBvrlGuafHqyGEnhw">https://mp.weixin.qq.com/s/TW_YqDBvrlGuafHqyGEnhw</a></p><h3><span id="下面是插件整个安装过程">下面是插件整个安装过程</span></h3><p><strong>1.下载插件</strong><br>去github地址下载它<br><a href="https://github.com/cundesi/maya_utils">https://github.com/cundesi/maya_utils</a></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p3.jpg"></p><p><strong>2.安装插件。</strong><br>将modules文件夹里的<code>sceneCallback</code>文件夹和<code>sceneCallback.mod</code>文件放到下图的目录中：<br>如果没有<code>modules</code>这个目录，那直接把整个<code>modules</code>文件夹拷贝过去吧。<br>（这个目录即是我的文档里的maya目录）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p4.png"></p><p><strong>3.清理本地的残留文件。</strong><br>检查下面的路径，如果存在下述的几个文件删除它们。<br>（如果你是在公司，询问一下公司TD是否可以删除<code>userSetup.py</code>）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p5.png"></p><p><strong>4.打开maya，加载插件。</strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p6.png"></p><p>勾上sceneCallback。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/reject-maya-warning/p7.png"></p><p>这个时候最好进行一次正常关闭Maya（以免Maya崩溃，没有保存Plugins的勾选）<br>下次打开Maya并打开受感染的文件后，插件就会发挥它的作用：拦截并删除“贼健康”提示。</p><hr><p>这篇文章就到这里，觉得还不错可以关注下这个公众号，也感谢各位老板打赏，thx！  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maya issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量替换Maya Reference工具</title>
      <link href="//maya-replace-ref-tool/"/>
      <url>//maya-replace-ref-tool/</url>
      
        <content type="html"><![CDATA[<h1><span id="废话在前">废话在前</span></h1><p>从外包收回来文件，maya里reference路径都是他们本机的路径，要打开文件每次要手动重新指认，资产一旦多起来就很麻烦。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p1.jpg"></p><p>后来找朋友要了一个批量替换reference的工具，但是有一些问题，比如：</p><ul><li>一次只能替换一个路径</li><li>无法预先知道文件里使用的ref路径是什么</li></ul><p>当时有40多个文件，4个不同的rig资产路径。<br>于是我就用那个工具把40多个文件替换了4次。<br>替换完发现，都没有替换成功。（因为我是手动复制粘贴的路径到工具中，\斜杠的方向不对）</p><p>基于上述的惨痛经历，决定自己写一个好了。<br>工具长这样：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p2.jpg"></p><h1><span id="工具使用">工具使用</span></h1><h2><span id="1扫描文件">1.扫描文件</span></h2><p>输入路径，工具会对文件夹下每个ma文件进行扫描，然后得知这些文件使用了哪些reference。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p3.gif"></p><p>扫描结果：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p4.jpg"></p><h2><span id="2路径预替换">2.路径预替换</span></h2><p><strong>注意</strong>：预替换操作是将需要替换的路径信息给到工具，并不是实际执行路径替换。<br>双击需要替换的路径，在对话框里输入新的路径即可。<br>（可以看到新路径前会用*号来标识）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p5.gif"></p><p>在替换路径的时候，有一个Match Naming的勾选项。<br>作用是匹配文件名，一次替换多条reference路径。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p6.jpg"><br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p7.jpg"></p><h2><span id="3执行替换操作">3.执行替换操作</span></h2><p>点击Replace执行操作，看到Scan done的提示就说明替换完成了。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-replace-ref-tool/p8.gif"></p><h2><span id="4附加说明">4.附加说明</span></h2><p><strong>show old path</strong>：勾选显示原来的reference路径。<br><strong>reset</strong>：是将所有替换的路径恢复初始状态</p><p>工具的运行原理是：以文本打开ma文件，直接替换里面的路径，然后再保存。<br>（所以最好在操作之前进行文件备份）</p><h1><span id="获取工具">获取工具</span></h1><p>公众号后台发送<strong>ref</strong>自动回复工具链接。</p><p>这篇文章就到这里，如果觉得有所帮助，可以关注一下这个公众号，thx！</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maya scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Notion建立个人Wiki</title>
      <link href="//notion-intro/"/>
      <url>//notion-intro/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>一个从事<strong>vfx行业</strong>的打工人，要积累非常多<strong>零碎</strong>的技能知识。<br>（无论是来自工作中的经验技巧，还是教程学习）</p><p>而每次真正遇到问题的时候，会发现这个问题好像是在某个教程里讲过，<br>又或是经过不停的试错，曾经找出过解决方案。<br>但时隔已久，具体如何实现已经不记得了。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p1.jpeg"></p><p>除了那些核心和常用的，大多零碎知识很容易被遗忘。<br>要拯救你的记忆，要么进行阶段性的复习，要么<strong>把学习历程记录成笔记</strong>。  </p><p><strong>记笔记有什么好处？</strong><br>打个比方，我自己的职业是需要给不同的DCC软件写一些工具扩展。<br>而每个DCC软件都有大量的命令，参数和用法，不可能把它们全记在脑海里。  </p><p>假设要写一个Nuke脚本，它涉及到节点动画操作，<br>有想起之前有看过教程学习过，也记录到了notion中，这样就可以很快定位到需要的结果。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p2.gif"></p><p>其实写这篇文章就是想向大家推荐一款笔记应用：<code>Notion</code><br>官网：<a href="https://www.notion.so/">https://www.notion.so/</a></p><p>笔者大概是从去年开始使用的Notion，它给我的感觉是<strong>易用</strong>，<strong>灵活</strong>，<strong>设计美观</strong>。<br>并且是一款让人很<strong>乐意</strong>打开使用的笔记软件。  </p><p>用它来搭建个人知识wiki再合适不过。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p3.jpg"></p><p>下面是对Notion的一些介绍。</p><h1><span id="页面">页面</span></h1><p>一款笔记应用，最基础的功能就是新建页面（page）。  </p><p>每一个页面都可以自定义一个<strong>图标</strong>和<strong>顶部图</strong>来对页面进行“装饰”。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p4.jpg"></p><p>Notion支持<strong>Markdown语法</strong>（一种高效率写作方式），<br>编辑时会动态的将markdown转换为富文本。  </p><p>页面也可以进行分享，可以指定用户分享，也可以分享给所有人。<br>选择后者的话notion会提供你一个网络链接，类似这样：<br><a href="https://www.notion.so/a527330b344f4b6f841b7ab5a17b8dc3">https://www.notion.so/a527330b344f4b6f841b7ab5a17b8dc3</a></p><p><strong>再说下插入图片的方式</strong>（记笔记怎么可能不放图）。<br>我通常的方式是，截图后将图片保存在剪切板，一般截图软件都带有这个功能<br>然后再去notion里ctrl+v粘贴它。（个人认为最快捷方便的方式）</p><p>也可以直接拖动本地的图片到页面，或是使用网络路径的照片。   </p><h1><span id="嵌套">嵌套</span></h1><p>页面之间可以无限的嵌套，以此来分类和进行结构组织。  </p><p>嵌套的方式也很简单，两种方法：<br>1.按住鼠标拖动放到另一个页面下。<br>2.在当前页面使用<code>/page</code>命令创建子页面。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p5.jpg"></p><h1><span id="表格">表格</span></h1><p>页面可以插入表格，notion自带的表格功能非常丰富。  </p><p>比如用最基本的表格进行<strong>记账</strong>。<br>单元格支持的内容有文字、数字、单选、多选、日期、成员等。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p6.jpg"></p><p>notion的表格也有不同类型分类。<br>内置的board来进行<strong>待办事项</strong>管理：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p7.gif"></p><p>使用timeline来进行事件进度管理：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p8.jpeg"></p><p>每个表格可以为它们添加不同的预览模式，<br>使用这个特性，以此来建立一个易于浏览的资产库。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p9.gif"></p><h1><span id="嵌入">嵌入</span></h1><p>Notion的页面可以嵌入一些网页信息，方法是复制网站的链接粘贴到页面就可以。<br>可以用它来整理一份旅游攻略：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/notion-intro/p10.jpg"></p><h1><span id="总结">总结</span></h1><p>以上介绍了我自己使用中常用到的功能，它的特性远不止这些，<br>这篇文章的目的也不是要写一个Notion软件说明书。<br>如果感兴趣，哔哩哔哩上有许多视频介绍（比上述文字介绍好得多哈哈）。  </p><p>最后想说建立个人的wiki是挺有用的一件事，人生是一个不断学习的过程，<br>花费时间记录笔记，在今后的某个时刻是会帮你节省很多时间和烦恼的一件事。  </p><hr><p>文章差不多就到这里，觉得还不错可以关注下这个公众号，thx！  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电影视效制作中的Matchmove</title>
      <link href="//whats-matchmoving/"/>
      <url>//whats-matchmoving/</url>
      
        <content type="html"><![CDATA[<h1><span id="简述">简述</span></h1><p>Matchmoving是后期视效制作中使用的一种技术，主要是对镜头画面进行<strong>摄像机反求</strong>和<strong>运动追踪</strong>。</p><p>摄像机反求，通俗来说就是通过追踪的二维点解算，还原镜头拍摄时真实的三维像机路径。</p><p>在实际工作中，matchmoving人员还会涉及到一点layout的工作。</p><p>layout翻译过来是布局，在求得三维相机后，需根据空间比例，透视关系，进行拍摄场景的还原。<br>即是将前期拍摄时的摄像机，被摄的人物与场景，在三维软件中进行虚拟重建。<br>下游组在得到“布局”好的文件后，才能往里放入三维动画，模型，特效等元素。</p><p>所以matchmoving在整个制作中是比较上游的部分，是完成一个特效镜头的“地基”。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p1.gif"></p><h1><span id="历史">历史</span></h1><p>最早的VFX跟踪使用可能是在1985年，其来源于导弹制导系统中使用跟踪的概念。</p><p>在没有数字跟踪前，对于大多数特效镜头，相机都是静止不动的。</p><p>ILM拥有一个称为MM2的早期2D跟踪软件系统，该系统首先在《Hook and Death Becomes Her》中进行了测试。MM2不是自动化工具，而是手动2D微调工具，艺术家可以通过该工具手动更改位置关键帧。</p><p>而后，ILM的TD基于Fourier-domain算法，开发了最早的无标记跟踪系统，“rle_coarse”（用于像素级跟踪），“rle_fine”（用于子像素跟踪）和“rle_track”（适用于Graphics Gems点跟踪工具），用于从点数据中查找3d摄像机位置。</p><p>1992年，最早的跟踪系统Flame在NAB上首次亮相，并在1992年的Siggraph上正式发布。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p2.jpg"></p><p>2001年，boujou在NAB上推出，这个软件的普及让更多的3D专业人士认识和使用相机跟踪。</p><h1><span id="软件">软件</span></h1><ul><li>Boujou</li><li>Pftrack</li><li>SynthEyes</li><li>3DEqualizer</li><li>Mocha</li></ul><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p3.jpg"></p><p>以上是市面上常见的摄像机反求软件，这里不对软件进行更多的介绍与评价。<br>如果想详细了解，可到软件的官网查看相关简介。</p><h1><span id="难点">难点</span></h1><p>在实际制作经验中，摄像机反求存在以下三个痛点：</p><ul><li>畸变（Distortion）</li></ul><p> <img src="https://i.loli.net/2020/02/17/G7X3ZgmJKatC1Py.jpg" alt="distortion.jpg"><br> 当拍摄的素材存在畸变，二维跟踪点越接近画幅边缘，跟踪点提供的坐标信息越不准确。<br> 这会增加解算像机时的错误率，得到错误的三维locator。<br> 不过跟踪软件都具有矫正畸变的功能，对于普通的畸变都可以很好的解决。  </p><p> 而这里提到的难点是针对于anamorphic镜头和鱼眼镜头。<br> anamorphic镜头拍摄到的素材畸变往往带有畸变动画的，比如《无耻混蛋》电影中的一幕</p><p> <img src="https://i.loli.net/2020/02/17/ysNfT64ArqeCwYR.gif" alt="ana.gif"></p><p> 还有就是鱼眼镜头，比如运动相机gopro拍摄出来的素材，这类镜头焦距小，往往畸变很大，矫正也较为困难。  </p><p> <img src="https://i.loli.net/2020/02/17/F6uKdwZk1sU3tTR.jpg" alt="Snipaste_2020-02-17_14-30-55.jpg"></p><ul><li>运动模糊（Motion blur）</li></ul><p> <img src="https://i.loli.net/2020/02/17/pbJTGCiIquWAZe3.jpg" alt="motion_blur.jpg"></p><p> 当摄像机快速移动的时候，被摄物就会产生模糊拖影。<br> 而这样的“不清晰”在添加二维跟踪点的时候就会变得困难许多。  </p><ul><li>遮挡（Occlude）</li></ul><p> 遮挡同样是会影响添加二维跟踪点，因为跟踪点必须是添加到场景中静止不动的元素上，<br> 如果场景中太多移动的元素，并且遮挡在镜头前，摄像机的反求也会变得困难重重。  </p><p> <img src="https://i.loli.net/2020/02/17/YQhw8MCfSJmrAEs.jpg" alt="mask.jpg"></p><h1><span id="依赖">依赖</span></h1><p>说到摄像机反求，不得不提到Onset。<br>Onset可以理解为前期拍摄时的数据采集和现场辅助。<br>而摄像机反求依赖于相机数据，比如镜头对应的摄像机filmback，focal length。甚至有时候需要Onset人员提供Distortion grid和Scan model，以帮助反求时更准确的解算。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/whats-matchmoving/p4.jpg"></p><h1><span id="总结">总结</span></h1><p>国内的电影视效还处于初中级的起步阶段，MatchMover在国内来说算是相对冷门的职业。<br>相较于动画，渲染，合成来说，需求并不算多。<br>现在大多成熟的MatchMover也慢慢在往layout和Motion capture靠近。<br>这两项也是国内视效发展的重要趋势，也为更多的Matchmoving工作者提供了更多的可能性。</p>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maya的效率使用和技巧（二）</title>
      <link href="//maya-tips-002/"/>
      <url>//maya-tips-002/</url>
      
        <content type="html"><![CDATA[<h2><span id="8快速选择集">8.快速选择集</span></h2><p>Maya的Create Quick Set可以创建快速选择集。<br>比如一个动画师在制作手部动画，需要每次对手上的十多个控制器一起key帧。<br>这里就可以创建快速选择集。  </p><p>首先选择好手指上需要的控制器。  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p1.jpg" width="70%" height="70%" alt align="center"></left>  </p><p>菜单栏 Create - Sets - Quick Select Set<br><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p2.jpg" width="70%" height="70%" alt align="center"></left>  </p><p>给这个Set命名，点击Add to Shelf（将会创建一个按钮在当前的shelf上）。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p3.jpg"></p><p>点击这个按钮就可以快速选择集里面的控制器。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p4.gif"></p><h2><span id="9快捷键g-重复上一个操作">9.快捷键G 重复上一个操作</span></h2><p>这是一个很实用的快捷键，假设这样一个场景：<br>需要将多个物体一起约束到同一个locator上，<br>这里不借助脚本的话，只能一个一个选择，<br>每次去点击parent界面按钮。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p5.gif"></p><p>在这样的情况下，就可以使用快捷键g来重复进行上一个操作，<br>如下图所示，选择好约束的目标，按下g。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p6.gif"></p><h2><span id="10撤销一段操作">10.撤销“一段”操作</span></h2><p>crtl+z 可以撤销上一步操作。<br>而在一些特殊情况下，我们可能会需要撤销””一段”操作。<br>如下图所示：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p7.gif"></p><p>通过上面的演示可以看到：<br>先是给了box细分，再进行了两次挤出。<br>执行undo后，撤销了刚刚的所有操作。</p><p>这里借助了两个命令来实现这个功能。<br>我将它们放到了shelf自定义按钮中。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p8.jpg"></p><p>按钮on的命令  </p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import maya.cmds as cmdscmds.undoInfo(openChunk&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按钮off的命令  </p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">cmds.undoInfo(closeChunk&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大概的操作步骤是：<br>1.点击按钮on，Maya会创建了一个记录步骤的“区块”。<br>2.对场景进行修改和操作。<br>3.然后在需要将刚刚的所有操作撤销的时候，<br>点击off按钮，再执行undo即可。  </p><p><strong>注意：这个方法需谨慎使用。</strong><br>可能会出现一些问题导致无法撤销的情况。  </p><h2><span id="11备份maya预设">11.备份Maya预设</span></h2><p>Maya在使用时间久了，或者打开了一些奇怪的文件。<br>软件可能抽风出现各种问题，通常解决办法是删除Maya的预设文件夹来重置Maya。<br>预设路径大概如下：<br><code>C:\Users\username\Documents\maya\2018</code>  </p><p>每次重置后会丢失我们的使用习惯，比如自定义的快捷键，自定义的shelf按钮等。<br>所以备份设置好的预设文件，可以在下次删除预设的时候，<br>不需要再重复进行设置。</p><h2><span id="12通过名称快速选择物体">12.通过名称快速选择物体</span></h2><p>在渲染设置的按钮旁边，选择Select by name，</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p9.jpg"></p><p>然后输入（模糊）名称，按下回车键。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p10.jpg"></p><p>可以看到匹配名称的物体被选择了。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p11.jpg"></p><p><strong>注意：</strong> 这里输入的名称是通配形式，即模糊的名称部分用 * 号代替。</p><h2><span id="13大纲视图的过滤操作">13.大纲视图的过滤操作</span></h2><p>通过名称过滤：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p12.jpg"></p><p>通过类型过滤：<br>这里勾上Light  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p13.jpg"></p><p>大纲视图里就只显示灯光类型的物体了。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-002/p14.jpg"></p><h2><span id="总结">总结</span></h2><p>大概心里能想到的提升效率的操作就这些了。（作者能力有限哈哈）<br>如果觉得文章还不错，可以分享或者关注这个公众号。  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令行工具的三把瑞士军刀</title>
      <link href="//command-tool-intro/"/>
      <url>//command-tool-intro/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>数字时代我们常会和文字，图片，视频打交道。<br>而作为一个cg工作者，你可能时常会有下面的需求：</p><ul><li>批量将一堆4k的材质贴图转成2k</li><li>将exr序列帧转换成更轻便的jpg进行预览</li><li>批量给序列帧更名</li><li>把mov视频转换成序列帧</li><li>将写好的doc文档转换为pdf格式</li><li>合并一堆mov视频</li></ul><p>面对这样的需要，我们或许会打开Nuke等DCC软件进行转换输出，<br>或是@公司TD写一个批量工具，但其实对于以上需求，<br>使用命令行工具，输入一行命令即可达到上述的目的。</p><p>下面为大家安利和介绍三款命令行工具，<br>它们包含了对文字，图片，音频和视频的处理，<br>有着命令行界的瑞士军刀称号。<br>分别是：</p><ul><li>ffmpeg</li><li>imagemagick</li><li>pandoc</li></ul><h1><span id="ffmpeg">FFmpeg</span></h1><p>一款处理音频和视频的命令行工具。<br>官网：<a href="https://ffmpeg.org/">https://ffmpeg.org/</a>  </p><p>Windows用户可以直接从官网下载安装包，双击安装即可。<br>Mac用户可以使用<code>brew install ffmpeg</code>进行安装。<br>Linux用户…应该有自己动手安装的能力。</p><p>下面说几个常用的命令：  </p><h3><span id="转码">转码</span></h3><p>这里是将mov格式转码为mp4格式。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ffmpeg -i input.mov output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="视频转序列帧">视频转序列帧</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ffmpeg -i video.mov frames.%04d.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="序列帧转为视频">序列帧转为视频</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ffmpeg -i &#x2F;test&#x2F;test.%04d.jpg -vcodec mpeg4 test.mov<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的vcodec参数是指定的视频编码器。</p><h3><span id="合并视频">合并视频</span></h3><p>这里是将三个视频 01.mp4，02.mp4，03.mp4合并成一个。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ffmpeg -i &quot;concat:01.mp4|02.mp4|03.mp4&quot; -c copy out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="给视频添加水印">给视频添加水印</span></h3><p>将logo.png作为水印，添加到离左上角（顶部和左边）分别20个像素位置。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ffmpeg -i in.mp4 -i logo.png -filter_complex &quot;overlay&#x3D;20:20&quot; out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="截取一部分视频作为gif动图">截取一部分视频作为gif动图</span></h3><p>将视频的7.5秒到8.5秒截取，输出gif动图。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ffmpeg -i in.mp4 -ss 7.5 -to 8.5 -s 640x320 out.gif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>关于这个工具包，它还包含了下面几个工具：</p><ul><li>ffmpeg: 转换，操作流媒体</li><li>ffplay: 简单的流媒体播放器</li><li>ffprobe: 媒体参数分析工具</li></ul><h1><span id="imagemagick">ImageMagick</span></h1><p>处理图片的命令行工具。<br>官网： <a href="https://imagemagick.org/script/index.php">https://imagemagick.org/script/index.php</a></p><p>安装方式同上，windows下载双击安装。<br>Mac的话<code>brew install imagemagick</code>  </p><p>同样介绍几个常用的操作：</p><h3><span id="批量将图片尺寸缩至50">批量将图片尺寸缩至50%</span></h3><p>这个操作可以将当前目录所有4k的贴图转换为2k<br>-format参数为jpg格式，可以替换成任意的图片格式。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick mogrify -format jpg -resize 50% *.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(注意：此方法会覆盖原本的图片)</p><p>如果不希望被覆盖，可以用下面命令指定一个新的文件夹，<br>存储缩放后的图片，这里的newdir是新文件夹的路径。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick mogrify -path newdir -resize 50% &#x2F;inputFolder&#x2F;*.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="批量将图片转换格式">批量将图片转换格式</span></h3><p>这里是将文件夹下所有jpg文件转换为png，并重命名为test2。<br>（所以这个操作也可以用作序列帧批量重命名）  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick test&#x2F;*.jpg test2&#x2F;test2.%04d.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="旋转图片">旋转图片</span></h3><p>将input.png逆时针旋转90度，并输出新文件output.png。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick convert input.png -rotate -90 output.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它也可以进行批量旋转操作：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick mogrify -path newdir -rotate -90 *.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="压缩图片质量">压缩图片质量</span></h3><p>这里的quality参数表示，降低图片的质量为70%  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick convert -quality 70 input.jpg output.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="将图片打包成pdf">将图片打包成pdf</span></h3><p>将当前目录下所有jpg图片，打包成一个pdf格式。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">magick *.jpg output.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ImageMagick的强大之处不止这些，套用官方的话，<br>它是一款创建、编辑、合成，转换图像的命令行工具。  </p><p>支持格式超过 200 种，功能包括调整，翻转，镜像(mirror)，旋转，扭曲，<br>修剪和变换图像，调整图像颜色，应用各种特殊效果，或绘制文本，<br>线条，多边形，椭圆和贝塞尔曲线等。</p><p>上述命令是我自己常用的一些，有兴趣的话也可以去搜索更多的用法。  </p><h1><span id="pandoc">Pandoc</span></h1><p>是一款处理文本文档的工具。<br>官网：<a href="https://pandoc.org/index.html">https://pandoc.org/index.html</a>  </p><p>它可以将文档在 Markdown、LaTeX、reStructuredText、HTML、Word docx 等多种标记格式之间相互转换，并支持输出 PDF、EPUB、HTML 幻灯片等多种格式。  </p><p>安装方法和上述两款命令行工具一样。<br>对于Mac：<code>brew install pandoc</code></p><p>关于它我最常用的是将markdown格式的文件转换成pdf，方便分享给朋友。</p><p>下面也列出几个基本命令：  </p><h3><span id="将markdown文档转换为pdf格式">将markdown文档转换为pdf格式</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pandoc input.md -o output.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pandoc在进行对pdf转换的时候，无法处理Unicode字符，<br>有需要的朋友参考这篇博客的解决方法：<br><a href="https://jdhao.github.io/2017/12/10/pandoc-markdown-with-chinese/">https://jdhao.github.io/2017/12/10/pandoc-markdown-with-chinese/</a></p><h3><span id="将markdown转换为docx文档">将markdown转换为docx文档</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pandoc input.md -o output.docx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于pandoc的介绍基本就到这里，因为我自己用的也很少。  </p><h1><span id="总结">总结</span></h1><p>希望这篇文章可以帮助大家提高工作效率，早点下班！<br>觉得文章还不错，可以关注这个公众号thx。  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maya的效率使用和技巧（一）</title>
      <link href="//maya-tips-001/"/>
      <url>//maya-tips-001/</url>
      
        <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>收集了一些Maya使用效率的技巧。<br>大致来源于一些博客，视频教程和平时使用的经验。</p><h2><span id="1清理优化场景文件">1.清理优化场景文件</span></h2><p>有时候我们拿到一个文件，明明场景里只有一个人物rig动画。<br>但是当我们对它进行调整，或是打开保存文件的时候，会异常的慢。<br>这有可能是场景中存在了很多未被使用的材质或动画曲线等一系列垃圾节点。  </p><p>这个时候需要用到Maya自带的优化功能进行清理。  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p1.jpg" width="40%" height="40%" alt align="center"></left>  </p><p>可以根据需要进行清理，不过在清理前最好先另存一下文件。<br><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p2.png" width="60%" height="60%" alt align="center"></left>  </p><h2><span id="2让maya启动快一些">2.让Maya启动快一些</span></h2><p><strong>关闭不使用的插件。</strong><br>比如对于一个动画师来说，我们不需要用到Maya的特效解算模块。<br>所以可以在Plug-in Manager中把它们给off掉。</p><p>流体解算：<br><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p3.jpg" width="60%" height="60%" alt align="center"></left>  </p><p>毛发解算：<br><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p4.jpg" width="60%" height="60%" alt align="center"></left>  </p><p>特效模拟：<br><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p5.jpg" width="60%" height="60%" alt align="center"></left>  </p><p>把它们取消勾选后，基本可以节省10s的开启时间。</p><p><strong>还有就是Maya在2016后的版本，会多出一个登录功能。</strong><br>每次启动也会占用时间进行网络验证。（下图可见）  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p6.jpg" width="50%" height="50%" alt align="center"></left>  </p><p>可以通过添加一个环境变量禁止这个功能。</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p7.jpg" width="50%" height="50%" alt align="center"></left>  </p><p>设置完后记得注销重新登陆，再次打开Maya就会看到这个登陆框已经消失了。</p><h2><span id="3开启远处物体低质渲染">3.开启远处物体低质渲染</span></h2><p>比如在进行场景动画制作的时候，一些离摄像机远处的物体，<br>不需要很高的预览质量，开启这个功能就会很有作用。  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p8.jpg" width="70%" height="70%" alt align="center"></left>  </p><h2><span id="4批量修改多个物体的同一个属性">4.批量修改多个物体的同一个属性</span></h2><p>之前公司一个灯光师有个需求是，把大概50多盏灯光的属性批量修改。<br>当时是写了一个工具给他，后来在交流群里问到，Maya有自带这个功能。  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p9.jpg" width="70%" height="70%" alt align="center"></left>  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p10.jpg"></p><p>在实际使用上，里面列出的属性也不是特别全。<br>不过能在里面找到的就不需要麻烦TD写一个工具了。  </p><h2><span id="5暂停全局刷新">5.暂停全局刷新</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p11.png"></p><p>这个按钮可以暂停Maya的图形更新，<br>在对大纲视图，材质编辑器，曲线编辑器等窗口操作的时候，<br>我们不希望Maya实时进行更新，则可以打开这个开关。  </p><h2><span id="6快速烘培动画">6.快速烘培动画</span></h2><p>通常我们在进行动画烘培（Bake Simulation）的时候，Maya都会逐帧跑一遍时间滑块。<br>能不能有一个方法可以跳过这个步骤，直接将动画烘培完成。<br>这里提供一个py小脚本，可以完成这件事。（几乎是秒烘培）  </p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import maya.cmds as cmdsst_frame &#x3D; int(cmds.playbackOptions(q&#x3D;True, minTime&#x3D;True))ed_frame &#x3D; int(cmds.playbackOptions(q&#x3D;True, maxTime&#x3D;True))cmds.bakeResults(simulation&#x3D;False, t&#x3D;(st_frame, ed_frame))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="7playblast后自动打开rv">7.Playblast后自动打开RV</span></h2><p>在Playblast选项里勾选view，默认是会在拍屏后打开FCheck进行预览。<br>如果想替换成其它软件（比如RV），可以在Preferences窗口里进行更改。  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-tips-001/p12.jpg" width="80%" height="80%" alt align="center"></left>  </p><hr><p>大致就先分享这些使用技巧，如果文章对你有所帮助，<br>可以关注一下这个公众号。thx！</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maya动画变速工具</title>
      <link href="//maya-retime-tool-intro/"/>
      <url>//maya-retime-tool-intro/</url>
      
        <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>前段时间朋友接了个外包，实拍的原始素材在nuke里进行了变速，而一些cg动画在原素材中已经制作完成，<br>需要一个工具对maya文件中动画进行相同的变速来匹配变速后的素材。</p><p>其实变速的原理和实现并不是特别复杂，不过繁复的数值计算需要借助脚本来实现。  </p><p>然后借着节假日的最后一天，写了这个变速工具。<br>这篇文章简单的记录下过程，并把它分享给需要的朋友。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p1.jpeg"></p><h2><span id="变速的方式">变速的方式</span></h2><p>变速实际上是对原始素材的抽帧和补帧，<br>而对于我们来说，最需要知道的是：<br><strong>变速后的每一帧，对应的是原始素材中哪一帧画面。</strong></p><p>比如，知道变速后的1001帧，是原本的1005帧，<br>这样把1005帧的动画复制到变速后的1001帧，<br>就可以完成了这一帧的匹配。</p><p>为了得知变速后的对应原始帧，我们可以用这样一个验证方式。<br>首先用软件输出一个这样的（纯数字）序列帧。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p2.gif"></p><p>然后套上变速节点进行观察。<br>在Nuke中常用的变速节点有<code>Retime</code>，<code>OFlow</code>，<code>Kronos</code>等。</p><p>首先使用retime节点做最简单的<strong>倍速变速</strong>。<br>这里为范围1001-1100的序列帧做一个1.9倍的变速，<br>filter就默认使用box。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p3.jpg"></p><p>点击变速后的每一帧，可以看到对应的图像。<br>比如变速后的1025帧的图像为原始1046和1047的融合。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p4.gif"></p><p>然而每个变速节点又有几种不同的变速方式，<br>这里的retime节点就有<code>none</code>，<code>box</code>和<code>nearest</code>三种方式。<br>尝试不同的变速方式能看出，有的是直接进行取整，有的是会融合前后帧。  </p><p>通过这些尝试和观察，对于直接的倍数变速，推导出这样一个公式：<br><code>起始帧 + (变速后的帧数指数)*倍数 - 倍数</code><br><strong>注意：</strong>这里指数是指变速后序列的第几帧。  </p><p>比如变速后的1035帧的指数就为35。（起始帧为1001帧的情况下）<br>把上述的公式带进去可以得到结果：<br><code>1001 + 35*1.9 - 1.9 = 1065.6</code></p><p>针对于retime节点，不同的变速方式它的取值为：</p><ul><li>none：直接去小数取整</li><li>box：四舍五入后，融合前后帧</li><li>nearest：有小数，直接进一位取整</li></ul><p>说完了倍数变速，对于OFlow，Kronos和TimeWarp节点进行曲线变速的情况下，可以直接通过观察这里的值进行结果判断：  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p5.jpg"></p><p>如图所示，变速后的1059帧对应原始的1081帧，Frame里的值为1080.562。<br>再次尝试不同变速方式，总结出不同变速方式的求值结果：</p><ul><li><p>timeWarp<br>none： 直接去小数取整<br>nearest：四舍五入取整<br>box：根据小数点的值，画面融合</p></li><li><p>oFlow<br>motion：根据小数点的值，画面融合<br>frame：四舍五入取整<br>blend：根据小数点的值，画面融合</p></li><li><p>Kronos<br>motion：根据小数点的值，画面融合<br>frame：四舍五入取整<br>blend：根据小数点的值，画面融合</p></li></ul><p>通过上述的方法，我们就可以得到这样一个变速信息文件：</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p6.jpg" width="40%" height="40%" alt align="center"></left>  </p><p><strong>左侧为</strong>变速前帧数，<strong>右侧为</strong>对应的原始素材帧数，中间用空格隔开。  </p><h2><span id="变速工具">变速工具</span></h2><p>工具我放在了github上，直接下载使用即可。  </p><p><a href="https://github.com/lingyunfx/MayaCameraRetime">https://github.com/lingyunfx/MayaCameraRetime</a></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-retime-tool-intro/p7.jpg"></p><p>使用步骤：<br>1.选择变速信息文件（txt格式）  </p><p>2.选择变速方式，支持motion，frame，none三种类型。<br>blend可以使用motion进行变速，nearest可以使用frame方式。  </p><p>3.点击run按钮，工具会对maya中所有的动画进行变速。<br>（保险起见，最好在操作前进行文件保存）</p><p>这篇文章就到这里，如果觉得文章还不错，可以关注这个公众号支持一下作者thx！  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maya scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MetaHumans Creator初体验</title>
      <link href="//metahuman-intro/"/>
      <url>//metahuman-intro/</url>
      
        <content type="html"><![CDATA[<h1><span id="介绍">介绍</span></h1><p>MetaHumans Creator是虚幻引擎用来创建cg角色的工具。<br>如同官方介绍的一样，它能够在几分钟创造出一个照片级的数字角色。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p1.jpg"><br>创建的cg角色包含完整的骨骼，以及毛发和服装。<br>可以将它导入到Maya，Blender，Unreal等软件进行动画制作和渲染。<br>（下图为MetaHuman的面部绑定）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p2.png"></p><h1><span id="申请测试">申请测试</span></h1><p>MetaHumans Creator暂时是一个云端流应用（不知道以后会不会演变成本地app）。<br>如果要使用它，需要在虚幻官网申请测试权限，这里贴一个申请链接：<br><a href="https://www.unrealengine.com/zh-CN/metahuman-creator">https://www.unrealengine.com/zh-CN/metahuman-creator</a></p><p>点击申请测试权限，填一下需要的信息就好。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p3.jpg"><br>作者在上周已经申请过了，经过几天等待，收到了邮件。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p4.jpg"></p><p>使用MetaHuman Creator的一些要求：</p><ul><li>需要unreal的版本大于4.26（如果要将MetaHuman导入到unreal中）</li><li>需要下载安装Quixel Bridge应用（用于模型导出）</li><li>每次使用云端工具时间为一小时，一小时后会自动关闭网页会话，等待一小段时间可以再次开启云端应用</li></ul><h1><span id="开始使用">开始使用</span></h1><p>获得测试权限后，在这个链接登陆即可：<br><a href="https://metahuman.unrealengine.com/">https://metahuman.unrealengine.com/</a><br>需要等待数分钟，给它一些加载时间。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p5.jpg"><br>吐槽一下国内访问真的慢，时好时坏，而且显示质量不高。<br>（还是盼望早些本地化吧）</p><p>关于工具语言的话，在工具的UI界面没有切换语言的选项。<br>测试了下，好像是在最开始登陆的时候，登陆界面的语言来控制。<br>这里为了方便理解，就用中文版了。</p><p>进入应用后，这里有两个标签，一个是创建新角色，一个是查看之前创建的角色。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p6.jpg"><br>左上角还有两个小按钮，一个是应用全屏，一个是显示统计信息。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p7.jpg"><br>这些信息大概就是告诉你，使用了多长时间，延迟，丢包率等等。<br>然后点击“创建METAHUMAN”开始。  </p><p>左侧是选择一些模板预设，左边是一个预览，按住鼠标右键来控制相机角度。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p8.jpg"><br>就选这个老头子吧（这褶皱雀斑真的有点惊到了）<br>点击下一步，然后就来到了这个“捏脸”的界面。  </p><p>界面的右侧是一些操作按键的提示说明。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p9.jpg"><br>最上端可以修改角色的名字，和切换不同的场景。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p10.jpg"><br>再往右一个是摄像机角度</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p11.jpg"><br>剩下的依次是：显示质量，细节级别，黏土材质开关（这个翻译不太准，有点像颜色贴图），<br>显示毛发和显示热键提示开关。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p12.jpg"><br>下方有三种编辑模式：  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p13.jpg"></p><ul><li>混合：混合多个预设角色特征，特征的权重为离白色拽点最近的角色。</li></ul><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p14.jpg"></p><ul><li>移动：曲线控制进行区域调整。</li></ul><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p15.jpg"></p><ul><li>造型：用拽点进行细致修整</li></ul><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p16.jpg"></p><p>其实也可以理解为：推荐的编辑顺序。<br>先定大样，然后局部，然后再细微修整。  </p><p>最后点击预览，将会有几个内置的动作来演示角色。  </p><p>其它什么换装，换头发就不赘述了。（实在是太卡了！）<br>总而言之，还是自己亲手试试最好。</p><p>它的可控性挺丰富的，看这个拽点就可以看出来。<br>试想一个美术功底好的人，可以通过一张照片来创建一个现实中的人物。<br>（比如捏一个杨超越？哈哈，记得在某个群里看到讨论）  </p><h1><span id="在maya里调用metahuman">在Maya里调用MetaHuman</span></h1><p>首先得下载Quixel Bridge应用，在下图的位置安装Maya插件。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p17.jpg"><br>最好把unreal和一些需要用到的一起装了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p18.jpg"></p><p>完成后，在这里找到自己创建的角色：<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p19.jpg"><br>选择要使用的角色，然后在右侧的Download Setting里进行设置。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p20.jpg"><br>修改格式为FBX，MetaHumans文件为Source Asset。（如果UE4要用的话可以加上UAsset）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p21.jpg"></p><p>然后返回，点击Download按钮进行下载。<br>下载完成后，先打开Maya软件，再点击Export，模型就自动加载到Maya中了。   </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p22.jpg"><br>在Maya里可以看到整个MetaHuman模型。<br>可以看到模型省去了毛发和衣服(布料)，因为这些部分是需要在UE4里进行实时解算的。<br>Maya里只可以进行面部和身体的动画制作。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p23.jpg"><br>这里看不到材质，是因为它使用了directx shader。<br>先打开Plugins Manager，开启下插件。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p24.jpg"><br>再在设置里修改渲染引擎，重新打开下Maya就ok了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p25.jpg"><br>这个时候开启材质和灯光显示：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p26.jpg"><br>动一动控制器：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p27.gif"><br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p28.gif"><br>除了面部表情以外，还可以对身体进行动画制作。<br>这里显示一下骨骼，并打开XRay。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p29.jpg"><br>是的，它没有控制器，需要自己绑定控制器来使用。<br>（emmmm，绑定的事情我不太懂）</p><p>动画制作完成后就可以导出到UE4进行渲染输出。<br>制作好的角色动画也可以给别的MetaHuman使用。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p30.gif"><br>怎么实现参考一下官方给的文档说明，因为我自己对UE4使用并不是特别熟悉。<br>贴个《将动画重定向至MetaHuman》的链接：</p><p><a href="https://docs.unrealengine.com/zh-CN/Resources/Showcases/MetaHumans/RetargetingAnimationsOntoMetaHumans/index.html">https://docs.unrealengine.com/zh-CN/Resources/Showcases/MetaHumans/RetargetingAnimationsOntoMetaHumans/index.html</a></p><p>本节差不多就到这里，觉得还不错可以关注一下公众号，thx！</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在不同跟踪软件之间的2D点转换工具</title>
      <link href="//tracks-2d-tools/"/>
      <url>//tracks-2d-tools/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p1.jpg"></p><p>看过之前<a href="https://lingyunfx.com/2020/11/05/whats-matchmoving/">电影视效制作中的Matchmove</a>这篇文章的朋友应该知道，<br><strong>跟踪</strong>最基本的步骤就是为匹配物或场景添加二维跟踪点。</p><p>在进行摄像机反求的时候，可能单一软件的解算效果不是很理想，<br>通常我们切换到另一个软件进行尝试解算。<br>(比如对于变焦镜头来说，SynthEyes的变焦解算会稍好于3DEqualizer。)<br>而这些<strong>二维跟踪点</strong>，<strong>在跟踪软件之间是不互通的</strong>。</p><p>当我们已经完成了二维点的添加工作，想要更换跟踪软件的时候。<br>就需要一个工具来进行点之间的转换。</p><h1><span id="分析">分析</span></h1><p>为了得知不同软件之间导出二维点格式的区别，<br>我们可以在同一段素材的同一个位置，添加一个二维点。<br>然后导出：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p2.gif"></p><p>首先可以看到，点数据是以一个txt文本存储的，<br>里面记录了点的<strong>名称</strong>，<strong>帧数</strong>，和对应帧的x，y<strong>位置</strong>。</p><p>其中除排序格式不一样之外，最重要的则是对二维点x，y位置描述上的不同。<br>像3DE，PFTrack和Boujou，是以图像像素为标尺。<br>而SynthEyes则要独树一帜些。</p><p>以1920x1080的尺寸素材为例，我们可以为素材的四个角分别添加跟踪点，<br>观察点的x，y数值，这里用画图来表示结果：<br>(红线为X轴，绿线为Y轴)</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p3.jpg"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p4.jpg"></p><p>PFTrack和3DE是相同的，以二维点在图像像素中的位置来进行记录。<br>它们之间的二维点x，y数值可以直接进行copy，不需做更改。<br><code>x_position = x_position</code><br><code>y_position = y_position</code></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p5.jpg"></p><p>而Boujou的Y轴向和上述两款软件恰好相反。<br>在进行二维点转换的时候，只需要重新计算y的位置即可。<br><code>x_position = x_position</code><br><code>y_position = image_width - y_position</code></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p6.jpg"></p><p>SynthEyes则是以-1到1之间进行取值，所以在转换二维点的时候，<br>需要将图像尺寸套入公式进行换算。<br><code>x_position = x_position / image_width * 2 - 1</code><br><code>y_position = 1 - y_position / image_height * 2</code></p><p>现在已经知道了二维点的x，y在不同软件之间如何进行换算，<br>剩下的就是每个软件的点数据排序格式，这个部分比较简单。<br>像Boujou和PFTrack已经用注释写明了每一行所表示的数据是什么。<br>这里就不再赘述了。</p><p>有了思路，这些繁琐的步骤就交给脚本来实现吧。</p><h1><span id="工具">工具</span></h1><p>代码放到github上了：<br><a href="https://github.com/lingyunfx/tracks2d_conversion">https://github.com/lingyunfx/tracks2d_conversion</a></p><p>下载下来后打开终端，<br>使用<code>python conver_tracker.py --help</code>来查看(简陋的)帮助。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tracks-2d-tools/p7.jpg"></p><p>从上图可以看到<strong>有以下几个参数</strong></p><ul><li><code>-s</code> 指定来源二维点的类型</li><li><code>-t</code> 指定目标二维点的类型</li><li><code>-wh</code> 指定使用序列帧的尺寸</li><li><code>-o</code> 设置偏移帧</li></ul><p>指定类型可以用的参数值有：<br>syntheyes, 3de, pftrack, boujou, syn</p><p><strong>基本调用</strong><br><code>python conver_trakcer.py /Downloads/from_3de_point.txt</code><br>默认情况是不添加任何参数，<br>是将3DEqualizer二维点转换为SynthEyes。<br>图像尺寸为1920x1080，默认不偏移帧。</p><p><strong>例子</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将Boujou的跟踪点转换为SynthEyes,指定尺寸2880x1550,偏移+1000帧python conver_trakcer.py -s boujou -t syn -wh 2880x1550 -o 1000 &#x2F;Downloads&#x2F;2dtracks.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="结尾">结尾</span></h1><p>这个是蹭着周六空闲临时写的一个工具，功能比较简单。<br>之后可能会加入nuke，blender等软件的支持。<br>也会添加对二维点的裁剪，镜像等操作。</p><p>如果对工具有什么建议或反馈，可以私信我。<br>如果觉得有用的话可以关注一下这个公众号，谢谢。</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scripts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac的一些问题备忘</title>
      <link href="//mac-issue/"/>
      <url>//mac-issue/</url>
      
        <content type="html"><![CDATA[<h3><span id="来自未知开发者">来自未知开发者</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> xattr -rd com.apple.quarantine sesinetd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="你没有权限打开应用程序">你没有权限打开应用程序</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew <span class="token function">install</span> upx<span class="token comment"># 这里以xf-adsk软件来举例</span><span class="token comment"># 把xf-adsk放到桌面，右键包内容进入到MacOS</span><span class="token function">sudo</span> upx -d /Users/lingyunzhang/Desktop/xf-adsk20.app/Contents/MacOS/x-force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="打开dmg资源忙">打开dmg资源忙</span></h3><p>1.打开活动管理器<br>2.搜索disk的进程  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mac-issue/p1.png"></p><p>3.随便退出几个进程就可以了（双击 - 强制退出）</p><h3><span id="homebrew安装">Homebrew安装</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 官方安装</span>/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>"</span><span class="token comment"># 国内源</span>/bin/zsh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>今后安装的包，都会放在<code>/usr/local</code>中。（M1不是）</p><h3><span id="homebrew走代理">Homebrew走代理</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 临时环境</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ALL_PROXY</span><span class="token operator">=</span>socks5://127.0.0.1:1089<span class="token builtin class-name">export</span> <span class="token assign-left variable">ALL_PROXY</span><span class="token operator">=</span>https://127.0.0.1:8889<span class="token comment"># 永久修改(根据不同的shell解释器)</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">ALL_PROXY</span><span class="token operator">=</span>socks5://127.0.0.1:1089 <span class="token operator">>></span> ~/.bash_profile<span class="token builtin class-name">echo</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">ALL_PROXY</span><span class="token operator">=</span>socks5://127.0.0.1:1089 <span class="token operator">>></span> ~/.zsh_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Houdini工具开发入门</title>
      <link href="//houdini-py-intro/"/>
      <url>//houdini-py-intro/</url>
      
        <content type="html"><![CDATA[<h2><span id="创建一个节点">创建一个节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个geo节点在obj层级下，为节点命名为‘MyGeo’</span><span class="token keyword">import</span> hounode <span class="token operator">=</span> hou<span class="token punctuation">.</span>node<span class="token punctuation">(</span><span class="token string">'/obj'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> node<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">'geo'</span><span class="token punctuation">,</span> <span class="token string">'MyGeo'</span><span class="token punctuation">)</span><span class="token comment"># 或者直接这样</span>hou<span class="token punctuation">.</span>node<span class="token punctuation">(</span><span class="token string">"obj"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">'geo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="节点属性操作">节点属性操作</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 修改一个box的x轴缩放</span>node <span class="token operator">=</span> hou<span class="token punctuation">.</span>node<span class="token punctuation">(</span><span class="token string">'/obj/box1/box1'</span><span class="token punctuation">)</span>pram <span class="token operator">=</span> node<span class="token punctuation">.</span>parm<span class="token punctuation">(</span><span class="token string">'sizex'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> parm<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 修改box的primitive type</span><span class="token builtin">type</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>parm<span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取参数名称的方式有两种：<br>一是直接在参数面板，将鼠标停留在属性旁边。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/houdini-py-intro/p1.jpg"></p><p>二是在属性面板这个地方左键，选择Edit Parameter Interface。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/houdini-py-intro/p2.png"></p><p>查看Token一栏，就可以获取属性名称了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/houdini-py-intro/p3.png"></p><h2><span id="获取选择的节点">获取选择的节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">node <span class="token operator">=</span> hou<span class="token punctuation">.</span>selectedNodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="在节点的输出端创建节点">在节点的输出端创建节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">node<span class="token punctuation">.</span>createOutputNode<span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token comment"># 如果找不到节点的类型名称（有些节点类型名称和显示出来的名称不一样，比如mantra节点）</span><span class="token comment"># 可以在houdini的python shell把节点给一个变量（直接把节点拖入shell里）</span>node <span class="token operator">=</span> hou<span class="token punctuation">.</span>node<span class="token punctuation">(</span><span class="token string">'/obj/box1/box1'</span><span class="token punctuation">)</span><span class="token keyword">print</span> node<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 然后打印出它的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="连接节点">连接节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">node<span class="token punctuation">.</span>setInput<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> another_node<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="给节点赋予颜色">给节点赋予颜色</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">color <span class="token operator">=</span> hou<span class="token punctuation">.</span>Color<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setColor<span class="token punctuation">(</span>color<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="设置节点渲染和显示的开关">设置节点渲染和显示的开关</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">node<span class="token punctuation">.</span>setRenderFlag<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setDisplayFlag<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="用户输入窗口">用户输入窗口</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单个输入行</span>inputName <span class="token operator">=</span> hou<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>readInput<span class="token punctuation">(</span><span class="token string">"Input Name:"</span><span class="token punctuation">,</span> buttons<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Yes'</span><span class="token punctuation">,</span> <span class="token string">'No'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> inputName<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'input something'</span><span class="token punctuation">)</span><span class="token comment"># 返回值是一个元组 按钮的index和输入的内容</span><span class="token comment"># 多个输入行</span>inputName <span class="token operator">=</span> hou<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>readMultiInput<span class="token punctuation">(</span><span class="token string">'input your info'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buttons<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Yes"</span><span class="token punctuation">,</span> <span class="token string">"No"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> inputName<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="节点位置">节点位置</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取</span>posx <span class="token operator">=</span> node<span class="token punctuation">.</span>position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>posy <span class="token operator">=</span> node<span class="token punctuation">.</span>position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 修改</span>node<span class="token punctuation">.</span>setPosition<span class="token punctuation">(</span><span class="token punctuation">[</span>posx<span class="token punctuation">,</span> posy<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="获取节点子级和父级">获取节点子级和父级</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 子级</span><span class="token keyword">for</span> n <span class="token keyword">in</span> node<span class="token punctuation">.</span>allSubChildren<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> n<span class="token comment"># 父级</span>p <span class="token operator">=</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>path<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 看看路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="获取节点网格视图获取光标位置">获取节点网格视图，获取光标位置</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pan <span class="token operator">=</span> hou<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>paneTabOfType<span class="token punctuation">(</span>hou<span class="token punctuation">.</span>paneTabType<span class="token punctuation">.</span>NetworkEditor<span class="token punctuation">)</span>pos <span class="token operator">=</span> pan<span class="token punctuation">.</span>selectPosition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> pos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="在节点属性面板添加属性">在节点属性面板添加属性</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">group <span class="token operator">=</span> node<span class="token punctuation">.</span>parmTemplateGroup<span class="token punctuation">(</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>addParmTemplate<span class="token punctuation">(</span>hou<span class="token punctuation">.</span>StringParmTemplate<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setParmTemplateGroup<span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''String: hou.StringParmTemplateFloat: hou.FloatParmTempalteInt: hou.IntParmTempalte'''</span><span class="token comment"># 添加属性也可以根据属性名称来决定，添加到之前或者之后</span>group<span class="token punctuation">.</span>insertBefore<span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span> hou<span class="token punctuation">.</span>StringParmTemplate<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>insertAfter<span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span> hou<span class="token punctuation">.</span>StringParmTemplate<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Houdini </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python列表方法</title>
      <link href="//python-list/"/>
      <url>//python-list/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">方法</th><th>描述</th></tr></thead><tbody><tr><td align="left">cmp(list1, list2)</td><td>比较两个列表的元素</td></tr><tr><td align="left">len(list)</td><td>列表元素个数</td></tr><tr><td align="left">max(list)</td><td>返回列表元素最大值</td></tr><tr><td align="left">min(list)</td><td>返回列表元素最小值</td></tr><tr><td align="left">list(seq)</td><td>将元组转换为列表</td></tr><tr><td align="left">list.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td align="left">list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td align="left">list.extend(seq)</td><td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td align="left">list.pop([index=-1])</td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">list.remove(obj)</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">list.reverse()</td><td>反向列表中元素</td></tr><tr><td align="left">list.sort(cmp=None, key=None, reverse=False)</td><td>对原列表进行排序</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python字典方法</title>
      <link href="//python-dict/"/>
      <url>//python-dict/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">方法</th><th>描述</th></tr></thead><tbody><tr><td align="left">cmp(dict1, dict2)</td><td>比较两个字典元素。</td></tr><tr><td align="left">len(dict)</td><td>计算字典元素个数，即键的总数。</td></tr><tr><td align="left">str(dict)</td><td>输出字典可打印的字符串表示。</td></tr><tr><td align="left">type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr><tr><td align="left">dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td align="left">dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td align="left">dict.fromkeys(seq[, val])</td><td>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td align="left">dict.get(key, default=None)</td><td>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td align="left">dict.has_key(key)</td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">dict.items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td align="left">dict.keys()</td><td>以列表返回一个字典所有的键</td></tr><tr><td align="left">dict.setdefault(key, default=None)</td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">dict.update(dict2)</td><td>把字典dict2的键/值对更新到dict里</td></tr><tr><td align="left">dict.values()</td><td>以列表返回字典中的所有值</td></tr><tr><td align="left">pop(key[,default])</td><td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">popitem()</td><td>返回并删除字典中的最后一对键和值。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串方法</title>
      <link href="//python-string/"/>
      <url>//python-string/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">方法</th><th>描述</th></tr></thead><tbody><tr><td align="left">string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td align="left">string.center(width)</td><td>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left">string.count(str, beg=0, end=len(string))</td><td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left">string.decode(encoding=’UTF-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td align="left">string.encode(encoding=’UTF-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">string.endswith(obj, beg=0, end=len(string))</td><td>检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left">string.expandtabs(tabsize=8)</td><td>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td></tr><tr><td align="left">string.find(str, beg=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td align="left">string.format()</td><td>格式化字符串</td></tr><tr><td align="left">string.index(str, beg=0, end=len(string))</td><td>跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td align="left">string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td align="left">string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td align="left">string.isdecimal()</td><td>如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td align="left">string.isdigit()</td><td>如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td align="left">string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">string.isnumeric()</td><td>如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left">string.isspace()</td><td>如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td align="left">string.istitle()</td><td>如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left">string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left">string.ljust(width)</td><td>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left">string.lower()</td><td>转换 string 中所有大写字符为小写.</td></tr><tr><td align="left">string.lstrip()</td><td>截掉 string 左边的空格</td></tr><tr><td align="left">string.maketrans(intab, outtab])</td><td>maketrans()方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left">max(str)</td><td>返回字符串 str 中最大的字母。</td></tr><tr><td align="left">min(str)</td><td>返回字符串 str 中最小的字母。</td></tr><tr><td align="left">string.partition(str)</td><td>有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td align="left">string.replace(str1, str2,  num=string.count(str1))</td><td>把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td align="left">string.rfind(str, beg=0,end=len(string) )</td><td>类似于 find() 函数，返回字符串最后一次出现的位置，如果没有匹配项则返回 -1。</td></tr><tr><td align="left">string.rindex( str, beg=0,end=len(string))</td><td>类似于 index()，不过是返回最后一个匹配到的子字符串的索引号。</td></tr><tr><td align="left">string.rjust(width)</td><td>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left">string.rpartition(str)</td><td>类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td align="left">string.rstrip()</td><td>删除 string 字符串末尾的空格.</td></tr><tr><td align="left">string.split(str=””, num=string.count(str))</td><td>以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+1 个子字符串</td></tr><tr><td align="left">string.splitlines([keepends])</td><td>按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left">string.startswith(obj, beg=0,end=len(string))</td><td>检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td align="left">string.strip([obj])</td><td>在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">string.swapcase()</td><td>翻转 string 中的大小写</td></tr><tr><td align="left">string.title()</td><td>返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left">string.translate(str, del=””)</td><td>根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td align="left">string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td align="left">string.zfill(width)</td><td>返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GitLab使用</title>
      <link href="//how-to-use-gitlab/"/>
      <url>//how-to-use-gitlab/</url>
      
        <content type="html"><![CDATA[<h2><span id="注册账号">注册账号</span></h2><p><a href="https://gitlab.lingyunfx.com/">https://gitlab.lingyunfx.com/</a></p><p>在这个链接地址注册即可，注册完后@lingyun在管理员后台进行激活账户就可以使用了。</p><h2><span id="创建一个project">创建一个project</span></h2><p>在你的gitlab主页，选择<strong>Create new projec</strong> - <strong>Create blank project</strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p1.png"></p><ul><li><strong>Private</strong>：私人仓库（仅自己可见），或者明确授权给某个用户/用户组，才可以拥有访问权。</li><li><strong>Internal</strong>：内部仓库，只要是<code>gitlab.lingyunfx.com</code>的用户都可以看到。</li><li><strong>Public</strong>：公开仓库，任何人都可以看到。</li></ul><h2><span id="绑定pycharm">绑定Pycharm</span></h2><h3><span id="1安装git">1.安装git</span></h3><p>首先确保本机已经安装了git软件，如果没有安装在下面的链接进行下载安装。</p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>安装完成后，查看pycharm设置，git路径是否已经配置好。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p2.png"></p><h3><span id="2生成ssh-key">2.生成ssh key</span></h3><p>在桌面右键，打开git终端</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p3.png"></p><p>输入命令<code>ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱地址&quot;</code></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p4.png"></p><p>从输出可以看到公钥文件的保存路径（<code>c:/User/用户名/.ssh/id_rsa.pub</code>），用记事本打开它，<strong>复制里面内容</strong>。</p><p>登陆你的gitlab账号：</p><p>1.选择SSH Keys标签</p><p>2.粘贴刚刚复制的密钥</p><p>3.输入一个名称（比如公司电脑就写“公司电脑”，方便自己区分管理）</p><p>4.点击Add key即可</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p5.png"></p><h3><span id="3打开pycharm从gitlab拉取项目">3.打开Pycharm，从Gitlab拉取项目</span></h3><p>复制需要拉取项目的SSH地址</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p6.png"></p><p>打开Pycharm点击Get from VCS</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p7.png"></p><p>粘贴到URL，点击Clone：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p8.png"></p><p>这个时候就可以开始对代码添加和修改了。</p><p>需要提交或者更新代码，都建议用git的终端来实现。（不要用pycharm自带的git操作）</p><p>在项目文件夹右键：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p9.png"></p><p>在终端里进行提交</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/how-to-use-gitlab/p10.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name <span class="token string">"zhangly"</span>                     <span class="token comment"># 设置在这个仓库中，你的用户名（本仓库设置一次即可）</span><span class="token function">git</span> config user.email <span class="token string">"zhangly.basefx@gmail.com"</span>   <span class="token comment"># 设置在这个仓库中，你的邮箱（本仓库设置一次即可）</span><span class="token function">git</span> status                                         <span class="token comment"># 查看文件修改状态</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                                          <span class="token comment"># 添加所有修改的文件到待提交区</span><span class="token function">git</span> commit <span class="token builtin class-name">.</span> -m <span class="token string">'hah'</span>                              <span class="token comment"># 提交 -m 参数为本次提交的描述</span><span class="token function">git</span> push origin main                               <span class="token comment"># 推到远程仓库，main主分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="从本地推新的仓库到远程">从本地推新的仓库到远程</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">"your_name"</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email <span class="token string">"your_email"</span>git initgit add <span class="token operator">-</span>Agit commit <span class="token operator">-</span>m <span class="token string">"init blog"</span>git remote add origin git@gitlab<span class="token punctuation">.</span>com<span class="token punctuation">:</span>username<span class="token operator">/</span>username<span class="token punctuation">.</span>gitlab<span class="token punctuation">.</span>io<span class="token punctuation">.</span>gitgit push <span class="token operator">-</span>u origin main <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GitLab搭建</title>
      <link href="//01%20install-gitlab/"/>
      <url>//01%20install-gitlab/</url>
      
        <content type="html"><![CDATA[<p>这里安装的是GitLab社区版（CE），使用的是Centos7系统。</p><p>对主机的性能要求：</p><ul><li>至少4GB内存</li><li>2个CPU内核</li><li>5GB以上的存储空间</li></ul><h2><span id="开始安装">开始安装</span></h2><h3><span id="安装依赖">安装依赖</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="安装gitlab软件包">安装gitlab软件包</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="开启防火墙">开启防火墙</span></h3><p>需要开启“80”和“443”端口。</p><p>我这边租用的是腾讯云主机，防火墙策略在前端进行配置，所以跳过这一步。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>http<span class="token function">sudo</span> firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>https<span class="token function">sudo</span> firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="配置gitlab">配置gitlab</span></h3><p>打开配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/gitlab/gitlab.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先要配置你的url（在此之前完成域名解析）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">external_url <span class="token string">'https://gitlab.lingyunfx.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再配置ssl证书（将会自动生成一个免费的证书）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">letsencrypt<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>letsencrypt<span class="token punctuation">[</span><span class="token string">'contact_emails'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'admin@example.com'</span><span class="token punctuation">]</span> <span class="token comment"># This should be an array of email addresses to add as contacts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里配置邮箱（视自己情况配置）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.xx.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xx@xx.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxxxx"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xx.com"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xxx@xx.com'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_reply_to'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xx@xx.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当配置完成后，运行下面命令，让gitlab根据配置进行重新部署</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候就可以在浏览器打开链接访问gitlab了。</p><hr><p><strong>每次修改配置后，进行下面的操作使其生效：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/gitlab/gitlab.rb   <span class="token comment"># 修改配置文件</span><span class="token function">sudo</span> gitlab-ctl reconfigure <span class="token comment"># 重新部署服务</span>gitlab-ctl start            <span class="token comment"># 启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="常用维护命令">常用维护命令</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl start    <span class="token comment"># 启动所有 gitlab 组件；</span>gitlab-ctl stop        <span class="token comment"># 停止所有 gitlab 组件；</span>gitlab-ctl restart        <span class="token comment"># 重启所有 gitlab 组件；</span>gitlab-ctl status        <span class="token comment"># 查看服务状态；</span><span class="token function">vim</span> /etc/gitlab/gitlab.rb        <span class="token comment"># 修改gitlab配置文件；</span>gitlab-ctl reconfigure        <span class="token comment"># 重新编译gitlab的配置；</span>gitlab-rake gitlab:check <span class="token assign-left variable">SANITIZE</span><span class="token operator">=</span>true --trace    <span class="token comment"># 检查gitlab；</span>gitlab-ctl <span class="token function">tail</span>        <span class="token comment"># 查看日志；</span>gitlab-ctl <span class="token function">tail</span> nginx/gitlab_access.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习笔记</title>
      <link href="//nginx-learn/"/>
      <url>//nginx-learn/</url>
      
        <content type="html"><![CDATA[<h2><span id="安装">安装</span></h2><p>不推荐使用rpm包，可能会存在后门（有安全风险）</p><p>建议从官方源码包安装。</p><p><a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><p><strong>1.下载源码包</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 源码包一般放在src里</span><span class="token function">wget</span> https://nginx.org/download/nginx-1.21.3.tar.gz -P /usr/src<span class="token builtin class-name">cd</span> /usr/src<span class="token function">tar</span> xf nginx-1.21.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.配置（检查环境依赖，安装方式，指定安装路径）</strong></p><p>进入解压后的文件，可以<code>--help</code>命令看到如何指定安装目录</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nginx-learn/p1.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖（gcc编译器，url重写，解压软件）</span>yum -y <span class="token function">install</span> gcc pcre-devel zlib zlib-devel<span class="token comment"># 配置</span>./configure --prefix<span class="token operator">=</span>/usr/local/nginx<span class="token comment"># 编译</span><span class="token function">make</span><span class="token comment"># 安装</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="相关目录">相关目录</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nginx总目录</span>/usr/local/nginx<span class="token comment"># nginx可执行文件</span>/usr/local/nginx/sbin/nginx<span class="token comment"># nginx自身所需的模块</span>/usr/local/nginx/modules<span class="token comment"># 配置文件目录</span>/usr/local/nginx/conf<span class="token comment"># 配置文件</span>/usr/local/nginx/conf/nginx.conf<span class="token comment"># nginx进程id号</span>/usr/local/nginx/logs/nginx.pid<span class="token comment"># 日志</span>/usr/local/nginx/logs/error.log/usr/local/nginx/logs/access.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="启动nginx">启动Nginx</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/nginx/sbin/nginx<span class="token comment"># 在此之前可以查看80端口是否被占用</span><span class="token function">lsof</span> -i:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在linux系统可以用<code>elinks</code>来查看。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">elinks http://192.168.10.42 --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>杀死并重启进程</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">killall <span class="token punctuation">-</span>s HUP nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="配置">配置</span></h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#启动子进程程序默认用户</span><span class="token comment">#user  nobody;</span><span class="token comment">#一个主进程和多个工作进程。工作进程是单进程的，且不需要特殊授权即可运行；这里定义的是工作进程数量</span>worker_processes  1;<span class="token comment">#全局错误日志的位置及日志格式</span><span class="token comment">#error_log  logs/error.log;</span><span class="token comment">#error_log  logs/error.log  notice;</span><span class="token comment">#error_log  logs/error.log  info;</span><span class="token comment">#pid        logs/nginx.pid;</span>events <span class="token punctuation">&#123;</span>    <span class="token comment">#每个工作进程最大的并发数</span>    worker_connections  1024;<span class="token punctuation">&#125;</span><span class="token comment">#http服务器设置</span>http <span class="token punctuation">&#123;</span>    <span class="token comment">#设定mime类型，类型由mime.type文件定义</span>    include       mime.types;    <span class="token comment">#</span>    default_type  application/octet<span class="token punctuation">-</span>stream;    <span class="token comment">#日志格式</span>    <span class="token comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span>    <span class="token comment">#                  '$status $body_bytes_sent "$http_referer" '</span>    <span class="token comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span>    <span class="token comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span>    <span class="token comment">#$remote_user：用来记录客户端用户名称；</span>    <span class="token comment">#$time_local： 用来记录访问时间与时区；</span>    <span class="token comment">#$request： 用来记录请求的url与http协议；</span>    <span class="token comment">#$status： 用来记录请求状态；成功是200，</span>    <span class="token comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span>    <span class="token comment">#$http_referer：用来记录从那个页面链接访问过来的；</span>    <span class="token comment">#$http_user_agent：记录客户浏览器的相关信息；</span>    <span class="token comment">#全局访问日志路径</span>    <span class="token comment">#access_log  logs/access.log  main;</span>    <span class="token comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，</span>    <span class="token comment"># 对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，</span>    <span class="token comment"># 以平衡磁盘与网络IO处理速度，降低系统uptime。</span>    sendfile        on;    <span class="token comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token comment">#长连接超时时间</span>    <span class="token comment">#keepalive_timeout  0;</span>    keepalive_timeout  65;    <span class="token comment">#开启压缩</span>    <span class="token comment">#gzip  on;</span>    <span class="token comment">#配置虚拟主机</span>    server <span class="token punctuation">&#123;</span>        <span class="token comment">#虚拟主机使用的端口</span>        listen       80;        <span class="token comment">#虚拟主机域名</span>        server_name  localhost;        <span class="token comment">#虚拟主机支持的字符集</span>        <span class="token comment">#charset koi8-r;</span>        <span class="token comment">#虚拟主机的访问日志路径</span>        <span class="token comment">#access_log  logs/host.access.log  main;</span>        <span class="token comment">#定义web根路径</span>        location / <span class="token punctuation">&#123;</span>            <span class="token comment">#根目录路径</span>            root   html;            <span class="token comment">#索引页</span>            index  index.html index.htm;        <span class="token punctuation">&#125;</span>        <span class="token comment">#error_page  404              /404.html;</span>        <span class="token comment"># redirect server error pages to the static page /50x.html</span>        <span class="token comment">#</span>        <span class="token comment">#根据错误码 返回对应的页面</span>        error_page   500 502 503 504  /50x.html;        <span class="token comment">#定义页面路径</span>        location = /50x.html <span class="token punctuation">&#123;</span>            root   html;        <span class="token punctuation">&#125;</span>        <span class="token comment">#定义反向代理服务器 数据服务器是lamp模型</span>        <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>        <span class="token comment">#</span>        <span class="token comment">#location ~ \.php$ &#123;</span>        <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>        <span class="token comment">#&#125;</span>        <span class="token comment">#定义PHP为本机服务的模型  </span>        <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>        <span class="token comment">#</span>        <span class="token comment">#location ~ \.php$ &#123;</span>        <span class="token comment">#    root           html;</span>        <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>        <span class="token comment">#    fastcgi_index  index.php;</span>        <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>        <span class="token comment">#    include        fastcgi_params;</span>        <span class="token comment">#&#125;</span>        <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>        <span class="token comment"># concurs with nginx's one</span>        <span class="token comment">#</span>        <span class="token comment">#拒绝apache DR目录及子目录下的.htaccess文件访问</span>        <span class="token comment">#location ~ /\.ht &#123;</span>        <span class="token comment">#    deny  all;</span>        <span class="token comment">#&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># another virtual host using mix of IP-, name-, and port-based configuration</span>    <span class="token comment">#</span>    <span class="token comment">#server &#123;</span>    <span class="token comment">#    listen       8000;</span>    <span class="token comment">#    listen       somename:8080;</span>    <span class="token comment">#    server_name  somename  alias  another.alias;</span>    <span class="token comment">#    location / &#123;</span>    <span class="token comment">#        root   html;</span>    <span class="token comment">#        index  index.html index.htm;</span>    <span class="token comment">#    &#125;</span>    <span class="token comment">#&#125;</span>    <span class="token comment">#https的配置方案</span>    <span class="token comment"># HTTPS server</span>    <span class="token comment">#</span>    <span class="token comment">#server &#123;</span>    <span class="token comment">#    listen       443 ssl;</span>    <span class="token comment">#    server_name  localhost;</span>    <span class="token comment">#    ssl_certificate      cert.pem;</span>    <span class="token comment">#    ssl_certificate_key  cert.key;</span>    <span class="token comment">#    ssl_session_cache    shared:SSL:1m;</span>    <span class="token comment">#    ssl_session_timeout  5m;</span>    <span class="token comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>    <span class="token comment">#    ssl_prefer_server_ciphers  on;</span>    <span class="token comment">#    location / &#123;</span>    <span class="token comment">#        root   html;</span>    <span class="token comment">#        index  index.html index.htm;</span>    <span class="token comment">#    &#125;</span>    <span class="token comment">#&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="默认网站概念">默认网站概念</span></h2><p>当Nginx配置文件中有且只有一个Server的时候，该Server就被Nginx认为是默认网站，所有发给Nginx服务器80端口的数据都会默认给该Server。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server <span class="token punctuation">&#123;</span>listen 80;server_name localhost; location / <span class="token punctuation">&#123;</span>root html;index index.html index.htm;<span class="token punctuation">&#125;</span>error_page 500 502 503 504 /50x.html; location = /50x.html<span class="token punctuation">&#123;</span>root html;<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="nginx目录访问控制">Nginx目录访问控制</span></h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">cd html/mkdir amkdir bmkdir cecho aaa <span class="token punctuation">></span> a/index.htmlecho bbb <span class="token punctuation">></span> b/index.htmlecho ccc <span class="token punctuation">></span> c/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问一下试试<code>http://ip/a</code></p><h3><span id="限制ip访问">限制ip访问</span></h3><p>如果想控制访问，只允许本机访问a</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server <span class="token punctuation">&#123;</span>listen 80;server_name localhost; location / <span class="token punctuation">&#123;</span>root html;index index.html index.htm;<span class="token punctuation">&#125;</span><span class="token comment"># 添加这里</span>location /a <span class="token punctuation">&#123;</span>allow 127.0.0.1; <span class="token comment"># 允许本机访问</span>deny all;        <span class="token comment"># 拒绝所有</span>return 404;      <span class="token comment"># 返回404代码</span><span class="token punctuation">&#125;</span>error_page 500 502 503 504 /50x.html; location = /50x.html<span class="token punctuation">&#123;</span>root html;<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>return</code> 后也可以跟一个网页：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">return http<span class="token punctuation">:</span>//www.jd.com;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="密码登陆验证">密码登陆验证</span></h3><p>访问b时，需要密码验证</p><p><code>auth_basic</code>:  参数可以是字符，显示在对话框标题。也可以是on｜off</p><p><code>auth_basic_user_file</code>: 账号密码的文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">location /b <span class="token punctuation">&#123;</span>auth_basic "凌云登陆验证";auth_basic_user_file /etc/nginx/htpasswd;  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先安装一个包，用于生成密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>yum <span class="token function">install</span> httpd-tools<span class="token comment"># 生成(如果没有这个文件则可以用 -c 参数)</span><span class="token comment"># 这里创建一个sky用户，根据提示输入密码</span>htpasswd -m /etc/nginx/htpasswd sky<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="日志管理">日志管理</span></h2><p>Nginx访问⽇日志主要有两个参数控制：</p><ul><li><p><strong>log_format</strong> 用来定义记录日志的格式(可以定义多种⽇志格式，取不同名字即可）</p><p>  <code>log_format log_name string</code></p></li><li><p><strong>access_log</strong> 用来指定日志⽂件的路径，及使⽤的哪种日志格式记录日志</p><p>  <code>access_log logs/access.log main;</code></p></li></ul><p>log_format格式变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$remote_addr</span> <span class="token comment">#记录访问⽹网站的客户端地址</span><span class="token variable">$remote_user</span> <span class="token comment">#远程客户端⽤用户名</span><span class="token variable">$time_local</span> <span class="token comment">#记录访问时间与时区</span><span class="token variable">$request</span> <span class="token comment">#⽤用户的http请求起始⾏行行信息</span><span class="token variable">$status</span> <span class="token comment">#http状态码，记录请求返回的状态码，例例如:200、301、404等</span><span class="token variable">$body_bytes_sent</span> <span class="token comment">#服务器器发送给客户端的响应body字节数</span><span class="token variable">$http_referer</span> <span class="token comment">#记录此次请求是从哪个连接访问过来的，可以根据该参数进⾏行行防盗链设置。</span><span class="token variable">$http_user_agent</span> <span class="token comment">#记录客户端访问信息，例例如:浏览器器、⼿手机客户端等</span><span class="token variable">$http_x_forwarded_for</span> <span class="token comment">#当前端有代理理服务器器时，设置web节点记录客户端地址的配置，此参数⽣生效的前提是代理理服务器器也要进⾏行行相关的x_forwarded_for设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子，自定义一个log文件与格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">log_format lingyun <span class="token string">'[$remote_local] $remote_addr "request" $status'</span><span class="token punctuation">;</span>access_log logs/lingyun.log lingyun<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="防盗链">防盗链</span></h2><p>如何判断盗链？开发者工具可以看到多出的<code>referer</code>字段。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location /c <span class="token punctuation">&#123;</span><span class="token comment"># 这里限制了三种情况是允许访问/c的</span><span class="token comment"># referer字段为空，满足防火墙策略，匹配到对应域名</span>valid_referers none blocked *.ayitula.com<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$invalid_referer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token builtin class-name">return</span> <span class="token number">403</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以根据格式来使用宽泛匹配</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location ~* <span class="token punctuation">\</span>.<span class="token punctuation">(</span>png<span class="token operator">|</span>gif<span class="token operator">|</span>bmp<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="虚拟主机">虚拟主机</span></h2><p>一个web服务器软件发布多个web。</p><h3><span id="基于ip">基于IP</span></h3><p>缺点：需要多个IP，公网IP是要付费的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>listen <span class="token number">192.168</span>.10.42:80<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>root html/web1<span class="token punctuation">;</span>index index.html index.htm index.php<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">192.168</span>.10.52:80<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>root html/web2<span class="token punctuation">;</span>index index.html index.htm index.php<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="基于端口">基于端口</span></h3><p>缺点：无法将端口告诉公网用户。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>listen <span class="token number">80</span><span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>root html/web1<span class="token punctuation">;</span>index index.html index.htm index.php<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">8080</span><span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>root html/web1<span class="token punctuation">;</span>index index.html index.htm index.php<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="基于域名">基于域名</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span>listen <span class="token number">80</span><span class="token punctuation">;</span>server_name www.cbd.com<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>root html/web1<span class="token punctuation">;</span>index index.html index.htm index.php<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">8080</span><span class="token punctuation">;</span>server_name www.abc.com<span class="token punctuation">;</span>location / <span class="token punctuation">&#123;</span>root html/web1<span class="token punctuation">;</span>index index.html index.htm index.php<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="反向代理服务器">反向代理服务器</span></h2><p>配置解释：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location / <span class="token punctuation">&#123;</span>index index.php index.html index.htm<span class="token punctuation">;</span> <span class="token comment"># 定义⾸首⻚页索引⽂文件的名称</span>proxy_pass http://mysvr <span class="token punctuation">;</span><span class="token comment"># 请求转向mysvr 定义的服务器器列列表</span>proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>client_max_body_size 10m<span class="token punctuation">;</span> <span class="token comment"># 允许客户端请求的最⼤大单⽂文件字节数</span>client_body_buffer_size 128k<span class="token punctuation">;</span> <span class="token comment">#缓冲区代理理缓冲⽤用户端请求的最⼤大字节数</span>proxy_connect_timeout <span class="token number">90</span><span class="token punctuation">;</span> <span class="token comment"># nginx跟后端服务器器连接超时时间(代理理连接超时)</span>proxy_send_timeout <span class="token number">90</span><span class="token punctuation">;</span> <span class="token comment"># 后端服务器器数据回传时间(代理理发送超时)</span>proxy_read_timeout <span class="token number">90</span><span class="token punctuation">;</span> <span class="token comment"># 连接成功后，后端服务器器响应时间(代理理接收超时)</span>proxy_buffer_size 4k<span class="token punctuation">;</span> <span class="token comment"># 设置代理理服务器器(nginx)保存⽤用户头信息的缓冲区⼤大⼩小</span>proxy_buffers <span class="token number">4</span> 32k<span class="token punctuation">;</span> <span class="token comment"># proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span>proxy_busy_buffers_size 64k<span class="token punctuation">;</span> <span class="token comment">#⾼高负荷下缓冲⼤大⼩小(proxy_buffers*2)</span>proxy_temp_file_write_size 64k<span class="token punctuation">;</span> <span class="token comment">#设定缓存⽂文件夹⼤大⼩小，⼤大于这个值，将从upstream服务器器传</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="限速">限速</span></h2><ul><li>限速该特性可以限制某个用户在⼀个给定时间段内能够产生的HTTP请求数。请求可以简单到就是⼀个对于主页的GET请求或者⼀个登陆表格的POST请求。</li><li>限速也可以用于安全目的上，比如暴力密码破解攻击。通过限制进来的请求速率，并且（结合日志）标记出目标URLs来帮助防范DDoS攻击。⼀般地说，限流是用在保护上游应用服务器不被在同⼀时刻的大量用户请求淹没。</li></ul><p>Nginx官⽅版本限制IP的连接和并发分别有两个模块：<br><code>limit_req_zone</code> ⽤来限制单位时间内的请求数，即速率限制。<br><code>limit_req_conn</code> ⽤来限制同⼀时间连接数，即并发限制。</p><h3><span id="案例一">案例一</span></h3><p>基于IP对下载速率做限制 限制每秒处理1次请求，对突发超过5个以后的请求放⼊缓存区。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">http <span class="token punctuation">&#123;</span> limit_req_zone $binary_remote_addr zone=baism<span class="token punctuation">:</span>10m rate=1r/s; server <span class="token punctuation">&#123;</span> location /search/ <span class="token punctuation">&#123;</span> limit_req zone=baism burst=5 nodelay; <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>limit_req_zone $binary_remote_addr zone=baism:10m rate=1r/s;</code><br>第⼀个参数：<code>$binary_remote_addr</code> 表示通过remote_addr这个标识来做限制，<br><code>“binary_”</code>的⽬的是缩写内存占⽤量，是限制同⼀客户端ip地址。<br>第⼆个参数：<code>zone=baism:10m</code>表示⽣成⼀个大小为10M，名字为one的内存区域，用来存储访问的频次信息。<br>第三个参数：<code>rate=1r/s</code>表示允许相同标识的客户端的访问频次，这里限制的是每秒1次，还可以有比如30r/m的。</p><p><code>limit_req zone=baism burst=5 nodelay;</code><br>第⼀个参数：<code>zone=baism</code> 设置使⽤哪个配置区域来做限制，与上⾯<code>limit_req_zone</code> ⾥的name对应。<br>第⼆个参数：<code>burst=5</code>，重点说明⼀下这个配置，<code>burst</code>爆发的意思，这个配置的意思是设置⼀个大小为5的缓冲区当有⼤量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。<br>第三个参数：<code>nodelay</code>，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队。</p><h3><span id="案例二">案例二</span></h3><p>基于IP做连接限制，限制同⼀IP并发为1 下载速度为100K。</p><p>（弊端是别人可以用多次请求来进行并发下载）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">limit_conn_zone $binary_remote_addr zone=addr<span class="token punctuation">:</span>10m;server <span class="token punctuation">&#123;</span> listen 80; server_name localhost; location / <span class="token punctuation">&#123;</span> root html; index index.html index.htm; <span class="token punctuation">&#125;</span> location /abc <span class="token punctuation">&#123;</span> limit_conn addr 1; limit_rate 100k; <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="综合案例">综合案例</span></h3><p>限制并发的连接数 ＋ 下载速率。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">http <span class="token punctuation">&#123;</span> include mime.types; default_type application/octet<span class="token punctuation">-</span>stream; sendfile on; keepalive_timeout 65; <span class="token comment"># 基于IP做连接限制 限制同⼀IP并发为1 下载速度为100K</span> limit_conn_zone $binary_remote_addr zone=addr<span class="token punctuation">:</span>10m; <span class="token comment"># 基于IP对下载速率做限制 限制每秒处理1次请求，对突发超过5个以后的请求放⼊缓存区</span> limit_req_zone $binary_remote_addr zone=one<span class="token punctuation">:</span>10m rate=1r/s; server <span class="token punctuation">&#123;</span> listen 80; server_name localhost; location / <span class="token punctuation">&#123;</span> root html; index index.html index.htm; <span class="token punctuation">&#125;</span> location /abc <span class="token punctuation">&#123;</span> limit_req zone=one burst=5 nodelay; limit_conn addr 1; limit_rate 100k; <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="url重写">URL重写</span></h2><p>主要使用<strong>rewrite</strong>模块（<code>ngx_http_rewrite_module</code>）</p><ul><li>Rewrite功功能是Nginx服务器提供的⼀个重要功能。几乎是所有的web产品必备技能，用于实现URL重写。URL重写是非常有用的功能，比如它可以在我们在改变网站结构后，不需要客户端修改原来的书签，也不需要其他网站修改对我们网站的友情链接，还可以在⼀定程度上提高网站的安全性。</li><li>Nginx服务器Rewrite功能的实现是依赖于PCRE（Perl Compatible Regular Expression。Perl兼容的正则表达式）的支持，所以在编译安装Nginx之前，需要安装PCRE库。</li></ul><h3><span id="url模块语法">URL模块语法</span></h3><pre class="line-numbers language-none"><code class="language-none">set 设置变量if 负责语句的判断retuen 返回返回值或URLbreak 终止后续的rewrite规则rewrite 重定向URL模糊匹配  ~匹配  !~模糊匹配  ~*不区分大小写的匹配精确匹配  &#x3D;  !&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子1</strong>：使用变量将<code>http://www.lingyunfx.com</code> 重写为 <code>http://www.lingyunfx.com/abc</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">location / <span class="token punctuation">&#123;</span>set $name abc;rewrite ^(.<span class="token important">*)$</span> http<span class="token punctuation">:</span>//www.lingyunfx.com/$name;<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子2</strong>：使用判断不允许谷歌浏览器访问</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">location / <span class="token punctuation">&#123;</span>if ($http_user_agent ~* 'chrome') <span class="token punctuation">&#123;</span>return 403;<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="url-rewrite语法">URL rewrite语法</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rewrite <span class="token operator">&lt;</span>regex<span class="token operator">></span> <span class="token operator">&lt;</span>replacement<span class="token operator">></span> <span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span>关键字    正则      替代内容     flag标记flag有：last       本条规则匹配完成后，继续向下匹配新的location URL规则<span class="token builtin class-name">break</span>      本条规则匹配完成即终⽌，不再匹配后⾯的任何规则redirect   返回302临时重定向permanent  返回301永久重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子1</strong>：<br>将<code>http://www.lingyunfx.com</code> 重定向为<code>http://www.jd.com</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">server <span class="token punctuation">&#123;</span> listen <span class="token number">80</span>; server_name www.lingyunfx.com; location / <span class="token punctuation">&#123;</span> rewrite ^/$ http<span class="token operator">:</span><span class="token comment">//www.jd.com permanent ;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子2</strong>：</p><p>判断如果是chrome浏览器，就将 <code>http://www.lingyunfx.com/aaa</code>重写为<code>http://www.lingyunfx.com/chrome/aaa</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">location / <span class="token punctuation">&#123;</span>.....if ($http_user_agent ~* 'chrome')<span class="token punctuation">&#123;</span>rewrite ^(.*)$ /chrome/$<span class="token number">1</span> last; <span class="token punctuation">&#125;</span> location /chrome <span class="token punctuation">&#123;</span> root html; index index.html; <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象进阶</title>
      <link href="//py-class-learn/"/>
      <url>//py-class-learn/</url>
      
        <content type="html"><![CDATA[<h2><span id="公共属性">公共属性</span></h2><p>使用<code>id()</code>可以查看，公共属性的地址是一样的。</p><p><code>Dog.d_type = &#39;藏獒&#39;</code> 一旦更改，其他的实例对应属性也会随之更改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>d_type <span class="token operator">=</span> <span class="token string">'京巴'</span> <span class="token comment"># 公共属性， 类属性， 类变量</span><span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, i am a dog, my type is '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>d_type<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好处是可以节省内存空间。</p><h2><span id="重写父类的方法">重写父类的方法</span></h2><p>继承父类方法后，需要重写父类方法，并调用父类方法的话。</p><p>可以用到<code>super</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is eating..'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> lover<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lover <span class="token operator">=</span> lover    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Animal.eat(self)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'人类不需要吃饭!'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'zhangly'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'JayChou'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>eat</code>函数中的两种方式都可以行，如果是多继承，使用super的情况下，会一次执行<code>eat</code> 。</p><h2><span id="多继承的顺序">多继承的顺序</span></h2><p>多继承在遇到重复的方法时，会采用以下两种查找方式：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py-class-learn/p1.png"></p><p>在Python中，有两种类的写法，不同的写法采用的继承顺序不同。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token comment"># 经典类</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 新式类</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python2中：经典类采用的是<strong>深度优先</strong>，新式类采用<strong>广度优先</strong>。</p><p>Python3中：都是采用<strong>广度优先</strong>。</p><p><strong>不过在实际测试后，Python使用的是一种C3的算法。</strong></p><p><strong>既不是深度优先，也不是广度优先。</strong></p><p>类里面有一个方法可以打印出类的继承顺序：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">print</span> D<span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 这个方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="私有属性">私有属性</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment"># 在变量名前加两个下划线</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">'tutu'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__age<span class="token punctuation">)</span> <span class="token comment"># 这样就无法获取</span>a<span class="token punctuation">.</span>_A__age <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment"># 可以通过这样的方式复制，或者获取（不推荐）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="私有方法">私有方法</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">__check</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 同样是方法前加两个下划线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'here is check: '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token string">'tutu'</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>__check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 直接无法调用这个方法</span>a<span class="token punctuation">.</span>_A__check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 可以通过这样的方式调用（不推荐）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="多态">多态</span></h2><p>比如一个对象会有许多种表现形式，比如网站页面有个按钮（单选框，多选框，圆角点击按钮），</p><p>它们都一个<code>onClick()</code>方法。</p><p><strong>这种多个对象公用一个接口，又表现的形态不一样的现象，就叫做多态。</strong></p><p>下面是几个例子：</p><p>1.通过统一函数接口实现多态</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sound</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪汪'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sound</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喵喵喵'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_sound</span><span class="token punctuation">(</span>animal_obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""统一调用接口"""</span>    animal_obj<span class="token punctuation">.</span>sound<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.通过抽象类实现多态（常见用法）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">'Subclass must implement abstract method!'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Pdf</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Show pdf contents!'</span><span class="token keyword">class</span> <span class="token class-name">Word</span><span class="token punctuation">(</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Show word contents!'</span>documents <span class="token operator">=</span> <span class="token punctuation">[</span>Pdf<span class="token punctuation">(</span><span class="token string">'Document1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             Pdf<span class="token punctuation">(</span><span class="token string">'Document2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             Word<span class="token punctuation">(</span><span class="token string">'Document3'</span><span class="token punctuation">)</span>             <span class="token punctuation">]</span><span class="token keyword">for</span> doc <span class="token keyword">in</span> documents<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">': '</span><span class="token punctuation">,</span> doc<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="类变量和实例变量的区别">类变量和实例变量的区别</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'stupid dog'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dog &#123;0&#125; is eating..'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'ly'</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果添加了<code>classmethod</code>，则代表函数下使用的是类变量。</p><p>这里举一个例子会用到类变量的情况：</p><p>有一个Student的类，每当实例化一个s1需要有一个变量记录学生的总数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>stu_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>name <span class="token operator">=</span> nameStudent<span class="token punctuation">.</span>stu_num <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 这样写作类变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="property相关">property相关</span></h2><p><code>value.setter</code> 可以set值</p><p><code>value.deleter</code> 可以删除值</p><h2><span id="面向对象的反射">面向对象的反射</span></h2><p>简而言之，可以通过字符串的形式来操作对象的属性。</p><p>比如一个例子，来判断对象是否有某个属性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> agep1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'zhang'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'name2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'not ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外还有几个方法:</p><p><code>getattr(obj, name)</code> 获取某个属性<br><code>setattr(obj, name, value)</code> 设置某个属性<br><code>delattr(obj, name)</code> 删除某个属性</p><p>比如根据用户输入来获取要执行的方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">user_command <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>>:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sprip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> user_command<span class="token punctuation">)</span><span class="token punctuation">:</span>func <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> user_command<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="动态的加载模块">动态的加载模块</span></h2><p>使用<code>__import()__</code> 方法。</p><p>Python官方推荐的方法是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> importlibimportlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="反射的高级用法">反射的高级用法</span></h2><p>例子：</p><p>根据用户输入选取页面，一个常规写法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎来到登陆页面'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎来到注册页面'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎来到存储页面'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    choose <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choose <span class="token operator">==</span> <span class="token string">'login'</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'register'</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'save'</span><span class="token punctuation">:</span>        obj <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用反射：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    choose <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> choose<span class="token punctuation">)</span><span class="token punctuation">:</span>        func <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> choose<span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="单例模式">单例模式</span></h2><p><code>__new__</code>方法，在<code>__init__</code>方法之前执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'init &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>p <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Alex'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>__new__</code>方法来实现单例模式（不管实例化对象几次，都只有一个实例）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">class</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    instance <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">add_task</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>job<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; 添加任务&#123;1&#125;到打印机，任务总数为：&#123;2&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            obj <span class="token operator">=</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> obj        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="__call__方法">__call__方法</span></h2><p>调用实例化对象，或者类的时候，执行的方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>s <span class="token operator">=</span> School<span class="token punctuation">(</span><span class="token string">'ly'</span><span class="token punctuation">)</span>s<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="动态的创建一个类">动态的创建一个类</span></h2><p>使用<code>type</code>方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dog_class <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Dog'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'dog'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>d <span class="token operator">=</span> dog_class<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> d<span class="token punctuation">.</span>role<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果想要加上构造函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>name <span class="token operator">=</span> nameself<span class="token punctuation">.</span>age <span class="token operator">=</span> agedog_class <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Dog'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">:</span> __init__<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>d <span class="token operator">=</span> dog_class<span class="token punctuation">(</span><span class="token string">'dahuang'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span> d<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="对象的判断">对象的判断</span></h2><p>判断一个对象是否属于某个类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span>obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断一个类是否是另一个类的派生类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="异常处理">异常处理</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>num1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'num1:'</span><span class="token punctuation">)</span>num2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'num2:'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>num1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'出现异常，信息如下：'</span><span class="token keyword">print</span> e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>几种用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># else 用法</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'一个程序'</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'处理异常'</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'没有发生任何异常执行这里'</span><span class="token comment"># finally 用法</span><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'一个程序'</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'处理异常'</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'没有发生任何异常执行这里'</span><span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'不管有没有发生异常都执行'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主动触发异常，使用<code>raise</code>语法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">raise</span> IndexError<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自定义一个异常</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">YoutubeConnectionError</span><span class="token punctuation">(</span>BaseException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>msg <span class="token operator">=</span> msg    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="断言">断言</span></h2><p>判断代码是否符合执行预期</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">assert</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">int</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="//py-multiprocess/"/>
      <url>//py-multiprocess/</url>
      
        <content type="html"><![CDATA[<h2><span id="开启子进程的两种方式">开启子进程的两种方式</span></h2><p>方式一：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is running'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is done'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'process001'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 向操作系统发送一个信号</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'here first'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is running.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is done.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span><span class="token string">'process001'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'here first'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="查看进程pid和ppid">查看进程pid和ppid</span></h2><ul><li>pid为当前进程id</li><li>ppid为父进程id</li></ul><p>使用os模块，<code>os.getpid()</code>和<code>os.getppid()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is running'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is done'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 向操作系统发送一个信号</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'here first'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="process对象的其它属性方法">Process对象的其它属性方法</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># join方法。先执行完子进程，最后执行主进程</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 程序p执行完后再执行后面一行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main process run'</span><span class="token punctuation">)</span><span class="token comment"># 查看id号</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 进程是否存活</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 杀死进程（需要一段时间，因为这个命令只是给操作系统发送处理信号）</span>p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 进程名字</span>p<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="使用多进程实现并发连接">使用多进程实现并发连接</span></h2><p>弊端是没有限制连接数量。</p><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">break</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">server</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>talk<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    server<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="守护进程">守护进程</span></h2><p>当主进程运行结束后，子进程也跟着结束。</p><p>（运行下面的代码可以发现，task的进程还没有开始就被杀掉了。</p><pre><code>因为主进程打印完`here first`就已经结束了，子进程也跟着一起结束）</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is running'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125; is done'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'process001'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># 添加这个参数</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'here first'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="互斥锁">互斥锁</span></h2><p>在一个父进程创建多个子进程的时候，为了保证子进程的运行顺序先后。</p><p>（这样效率会慢，但保证秩序）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">:</span>    mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 加锁</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> --> 001'</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> --> 002'</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> --> 003'</span></span><span class="token punctuation">)</span>    mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放锁</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    mutex <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 只实例化一次，确保是同一把锁</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如一个抢票程序，就会用到互斥锁。多个进程访问的是同一块数据（票的余数）。</p><h2><span id="队列的使用太tm实用了">队列的使用（太tm实用了）</span></h2><p>放内存里放数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Queueq <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 限制了数据的数量，只能往内存里放三个数据</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 查看队列是否已经满了</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>  <span class="token comment"># 如果这个时候继续放数据进队列，则进程会卡住，等待队列出去一个数据</span><span class="token comment"># 取出队列里的数据用get方法</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="生产者消费者模型">生产者消费者模型</span></h3><p>生产者生产包子，放到queue队列容器中。</p><p>消费者往容器里取包子，互不影响。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'&lt;包子</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">>'</span></span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'生产者生产了</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> res<span class="token punctuation">:</span>            <span class="token keyword">break</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'消费者吃了</span><span class="token interpolation"><span class="token punctuation">&#123;</span>res<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    c1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 给予结束信号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主程序启动...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br><strong>1.程序中有两种角色</strong></p><p>一类负责生产数据</p><p>一类负责处理数据</p><p><strong>2.引入生产者消费者模型为了解决</strong></p><p>平衡生产者和消费者之间的速度差</p><p>程序解开耦合</p><p><strong>3.如何实现</strong></p><p>生产者←→队列←→消费者</p><p>基于网络通信的消息队列：<code>Rabbitmq</code></p><h2><span id="什么是线程">什么是线程</span></h2><p>把操作系统比作一家公司，进程比作公司里的各个部门，而线程则是部门里的员工。</p><ul><li>每个进程至少需要一个线程（一个部门至少需要一个人）</li><li>同一进程内的线程共享资源</li><li>开启进程比开启线程的开销大</li></ul><p>对于需要实现并发，且要共享数据的时候，就要用到<strong>多线程</strong>。</p><h2><span id="如何开启线程">如何开启线程</span></h2><p>1.直接使用<code>threading</code>模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'run task: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'task done: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main task'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.继承类的方式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run task: &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task done: &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main task'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="thread对象的属性方法">Thread对象的属性方法</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 建议还是使用import threading</span><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token punctuation">,</span> currentThread<span class="token punctuation">,</span> active_count<span class="token punctuation">,</span> <span class="token builtin">enumerate</span><span class="token comment"># 查看当前线程名称 方法一</span>t <span class="token operator">=</span> Thread<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看当前线程名称 方法二</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 修改线程名称</span>t<span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">'线程1'</span><span class="token punctuation">)</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setName<span class="token punctuation">(</span><span class="token string">'主线程1'</span><span class="token punctuation">)</span><span class="token comment"># 查看线程是否存活</span>t<span class="token punctuation">.</span>isAlive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 主线程等待子线程执行完毕再运行</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 激活的线程数量</span><span class="token keyword">print</span><span class="token punctuation">(</span>active_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 以列表的方式查看当前进程的所有线程</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="守护线程">守护线程</span></h2><p>和守护进程同理。当主线程运行结束后，子线程也会被强制结束掉。</p><p><strong>例子一</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'run task: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'eat'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># t.setDaemon(True)  需要在t.start()之前指定</span>    t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'main task'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子二</strong>：</p><p>这里和守护进程的区别是，主线程会等到没有设置<code>daemon</code>的子线程结束后，才会结束。</p><p>（aaa is over 没有被打印出来）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aaa is over'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bbb'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bbb is over'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>aaa<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>bbb<span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'this is main'</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token triple-quoted-string string">"""aaabbbthis is mainbbb is over"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="//py-network/"/>
      <url>//py-network/</url>
      
        <content type="html"><![CDATA[<h2><span id="互联网协议">互联网协议</span></h2><p>按照功能的不同分为七层。</p><p>OSI七层协议：应，表，会，传，网，数，物。</p><p>其中<strong>应表会</strong>可以归为<strong>应用层</strong>。</p><ul><li>应用层：应用程序。http，ftp协议</li><li>传输层：tcp/udp协议。端口来标识运行中的一款应用程序。 <code>以太网头|IP头|tcp头|数据</code></li><li>网络层：IP协议，用于寻找子网。</li><li>数据链路层：Ethernet（以太网）协议，将数据按标准分组。</li><li>物理层：物理设备，发射电信号，如：101001</li></ul><p>tcp也称作流式协议，需要双向管道（来回）。</p><p>通过握手确认建立临时管道。</p><p>udp协议不需要通道，不会等待对方确认是否收到。</p><p>效率比tcp协议高，但是不可靠。（只负责丢）</p><h2><span id="socket层">socket层</span></h2><p>在应用层和传输层(tcp/udp)之间的中间软件抽象层，它是一组接口。</p><p>socket为套接字编程。</p><h2><span id="一个简单的服务端和客户端">一个简单的服务端和客户端</span></h2><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">iimport socket<span class="token comment"># 创建一个套间字对象。 (socket.AF_INET 套间字类型    socket.SOCK_STREAM 是tcp传输协议)</span>phone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 绑定一个端口。 port: 0-65535 其中0-1024是给操作系统使用</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 开始监听。 参数为最大挂起的连接数</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 服务端会在这里进行等待连接接入，直到有连接才会进行下一步</span>conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 接收消息，限制为：1024 bytes</span>data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 回复信息给客户端</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭连接和关闭服务</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">iimport socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 发送数据到服务端时，只能发送二进制编码字符（这里用encode将字符串转换为二进制类型）</span>phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 从服务端接受回信息</span>data <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="改进客户端和服务端实现循环通信">改进客户端和服务端，实现循环通信</span></h2><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 快速回收端口</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'staring...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 连接循环</span>    conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment"># 适用于linux系统，客户端断开连接</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>  <span class="token comment"># 适用于windows系统，客户端断开连接</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="实现类似ssh的效果远程执行命令">实现类似ssh的效果（远程执行命令）</span></h2><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> subprocessphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'staring...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 连接循环</span>    conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment"># 适用于linux系统，客户端断开连接</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment"># 执行命令</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stdout<span class="token operator">+</span>stderr<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>  <span class="token comment"># 适用于windows系统，客户端断开连接</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会留下一个问题，每次接受限制了1024个字节，会产生了粘包现象。</p><h2><span id="粘包现象">粘包现象</span></h2><p>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p><strong>底层原理</strong></p><p>1.不管是recv还是send都不是直接接受对方的消息，而是操作自己的操作系统。</p><p>（所以recv没法超过自己内存的大小）</p><p>2.tcp协议会对间隔短的多个包进行优化合并</p><p>3.recv和send方法，可以一直调用，直到内存里的值被取完</p><h2><span id="解决粘包现象">解决粘包现象</span></h2><p>一种方法：先把数据的长度发送给客户端，再发送真实数据。</p><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> subprocessphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'staring...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 连接循环</span>    conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment"># 执行命令</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 计算结果的总字节数</span>            total_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>            <span class="token comment"># 使用struct打包结果，返回的值永远为4字节</span>            header <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> total_size<span class="token punctuation">)</span>            <span class="token comment"># 先发送报头，即数量的字节大小</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header<span class="token punctuation">)</span>            <span class="token comment"># 再发送数据</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> structphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 先接收数据大小，永远返回4个字节</span>    header <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    total_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    recv_size <span class="token operator">=</span> <span class="token number">0</span>    recv_data <span class="token operator">=</span> <span class="token string">b''</span>    <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>        res <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        recv_data <span class="token operator">+=</span> res        recv_size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的方法有个弊端是，<code>pack</code>方法打包不能超过<code>2147483647</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以使用长整数类型，不过也是有限制的</span>res <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">10000000000000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回8字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另一个解决办法：</p><p>1.先发送报头长度</p><p>2.再发送报头的数据</p><p>3.最后发送真实数据</p><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> subprocessphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'staring...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 连接循环</span>    conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment"># 执行命令</span>            obj <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                   stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                                   stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>            stdout <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            stderr <span class="token operator">=</span> obj<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 把所有结果打包成字典</span>            header_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'filename'</span><span class="token punctuation">:</span> <span class="token string">'test.txt'</span><span class="token punctuation">,</span>                <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment"># 再将字典序列化，然后打包为报头</span>            header_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>            header_bytes <span class="token operator">=</span> header_json<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            <span class="token comment"># 先发送报头长度</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 再发送报头</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span>            <span class="token comment"># 最后发送数据</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>stderr<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> socket<span class="token keyword">import</span> structphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 先接收报头长度</span>    obj <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    header_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 再接收报头</span>    header_bytes <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>header_size<span class="token punctuation">)</span>    <span class="token comment"># 解析需要的真实数据</span>    header_json <span class="token operator">=</span> header_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>header_json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>    total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span>    recv_size <span class="token operator">=</span> <span class="token number">0</span>    recv_data <span class="token operator">=</span> <span class="token string">b''</span>    <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>        res <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        recv_data <span class="token operator">+=</span> res        recv_size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="文件传输功能">文件传输功能</span></h2><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> subprocessphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'staring...'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 连接循环</span>    conn<span class="token punctuation">,</span> client_address <span class="token operator">=</span> phone<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 通信循环</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment"># 比如这里使用的是 get a.txt 命令</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> res<span class="token punctuation">:</span>                <span class="token keyword">break</span>            cmds <span class="token operator">=</span> res<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            filename <span class="token operator">=</span> cmds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment"># 把所需数据写成字典</span>            header_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'filename'</span><span class="token punctuation">:</span> filename<span class="token punctuation">,</span>                <span class="token string">'size'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment"># 再将字典序列化，然后打包为报头</span>            header_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>            header_bytes <span class="token operator">=</span> header_json<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>            <span class="token comment"># 先发送报头长度</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 再发送报头</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>header_bytes<span class="token punctuation">)</span>            <span class="token comment"># 最后发送文件数据</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> socket<span class="token keyword">import</span> structphone <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> cmd<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    phone<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 先接收报头长度</span>    obj <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    header_size <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 再接收报头</span>    header_bytes <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>header_size<span class="token punctuation">)</span>    <span class="token comment"># 解析需要的真实数据</span>    header_json <span class="token operator">=</span> header_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    header_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>header_json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>header_dic<span class="token punctuation">)</span>    total_size <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span>    filename <span class="token operator">=</span> header_dic<span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span>    <span class="token comment"># 写入数据</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename <span class="token operator">+</span> <span class="token string">'_download'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        recv_size <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> recv_size <span class="token operator">&lt;</span> total_size<span class="token punctuation">:</span>            line <span class="token operator">=</span> phone<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125;/&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>recv_size<span class="token punctuation">,</span> total_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            recv_size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>phone<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="udp协议实现">udp协议实现</span></h2><p>比如查询操作就适合udp协议，效率快，不需要双方进行握手确认，且不会产生粘包现象。</p><p>（虽然不会粘包，但是数据超出限制则会丢失）</p><p><strong>服务端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketserver <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data<span class="token punctuation">,</span> client_addr <span class="token operator">=</span> server<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socketclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>>: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data<span class="token punctuation">,</span> server_addr <span class="token operator">=</span> client<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> server_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python常用代码段</title>
      <link href="//py-common-use/"/>
      <url>//py-common-use/</url>
      
        <content type="html"><![CDATA[<h3><span id="读取和写入json文件">读取和写入json文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 写</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment"># 读</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>json_path<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    items <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="读取和写入csv文件">读取和写入csv文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csv_file<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    csv_reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> csv_reader<span class="token punctuation">:</span>        <span class="token keyword">print</span> row<span class="token comment"># 写</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csv_file<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    csv_write <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> csv_data_list<span class="token punctuation">:</span>        csv_write<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="ordereddict-排序">OrderedDict 排序</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'banana'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">#按key排序</span><span class="token operator">>></span><span class="token operator">></span>OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#按value排序</span><span class="token operator">>></span><span class="token operator">></span>OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#按key的长度排序</span><span class="token operator">>></span><span class="token operator">></span>OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'pear'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="打开和读取文件">打开和读取文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果文件内容只有一行,读和写</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/file.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/file.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, World!'</span><span class="token punctuation">)</span><span class="token comment"># 如果文件是多行</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/file.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span> line<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/file.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>  <span class="token keyword">for</span> each <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="比较两个字符串之间的相似度">比较两个字符串之间的相似度</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> diffliba <span class="token operator">=</span> <span class="token string">'1111'</span>b <span class="token operator">=</span> <span class="token string">'11112'</span>seq <span class="token operator">=</span> difflib<span class="token punctuation">.</span>SequenceMatcher<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>ratio <span class="token operator">=</span> seq<span class="token punctuation">.</span>ratio<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> ratio<span class="token operator">>></span><span class="token operator">></span> <span class="token number">0.88888888888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="打开资源管理器">打开资源管理器</span></h3><p>windows可以使用os模块</p><p><code>os.system(&quot;explorer.exe %s&quot; % yourPath)</code></p><p>linux可使用subprocess</p><p><code>subprocess.Popen([&quot;bash&quot;, &quot;-l&quot;, &quot;-c&quot;, &quot;dolphin &#123;&#125;&quot;.format(yourPath)])</code></p><h3><span id="创建一个临时目录">创建一个临时目录</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tempfiletemp_dir <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>mkdtemp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以得到一个临时的目录，我们可以获取这个目录的路径，并创建一个临时文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ostemp_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_dir<span class="token punctuation">,</span> <span class="token string">'temp.txt'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>temp_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"balabalabal...."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="使用shutil复制删除目录">使用shutil复制，删除目录</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token keyword">import</span> os<span class="token comment"># 删除空目录</span>os<span class="token punctuation">.</span>removedirs<span class="token punctuation">(</span><span class="token string">'dir_path'</span><span class="token punctuation">)</span><span class="token comment"># 删除非空目录</span>shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">'dir_path'</span><span class="token punctuation">)</span><span class="token comment"># 复制目录（会递归复制目录内所有文件夹和文件）</span>shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span>a_folder<span class="token punctuation">,</span> b_folder<span class="token punctuation">)</span><span class="token comment"># 复制中忽略指定的文件类型</span>ignore_file <span class="token operator">=</span> shutil<span class="token punctuation">.</span>ignore_patterns<span class="token punctuation">(</span><span class="token string">"*.pyc"</span><span class="token punctuation">,</span> <span class="token string">"*.~"</span><span class="token punctuation">)</span>shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span>a_folder<span class="token punctuation">,</span> b_folder<span class="token punctuation">,</span> ignore<span class="token operator">=</span>ignore_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="将一个列表内的每个元素作为变量名">将一个列表内的每个元素作为变量名</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>  <span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'string name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="比较a和b的最大值">比较a和b的最大值</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">5</span>b <span class="token operator">=</span> <span class="token number">15</span>c <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">></span>b<span class="token punctuation">]</span><span class="token keyword">print</span> c<span class="token operator">>></span><span class="token operator">></span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PIP走国内镜像安装</title>
      <link href="//pip-install-i/"/>
      <url>//pip-install-i/</url>
      
        <content type="html"><![CDATA[<h2><span id="例子使用清华源">例子(使用清华源)</span></h2><p><code>pip install -i [https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple) PySide2</code></p><h2><span id="其它源">其它源</span></h2><p>清华：<a href="https://pypi/">https://pypi</a>.<a href="http://tuna.tsinghua.edu.cn/simple">tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors/">http://mirrors</a>.<a href="http://aliyun.com/pypi/simple/">aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi/">http://pypi</a>.<a href="http://hustunique.com/">hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi/">http://pypi</a>.<a href="http://sdutlinux.org/">sdutlinux.org/</a></p><p>豆瓣：<a href="http://pypi/">http://pypi</a>.<a href="http://douban.com/simple/">douban.com/simple/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Miniconda使用</title>
      <link href="//miniconda-use/"/>
      <url>//miniconda-use/</url>
      
        <content type="html"><![CDATA[<h1><span id="安装">安装</span></h1><p>在官网 <a href="https://docs.conda.io/en/latest/miniconda.html#macosx-installers">https://docs.conda.io/en/latest/miniconda.html#macosx-installers</a> 下载：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/miniconda-use/p1.png"></p><p>在终端里（会安装到当前目录）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Miniconda2-latest-MacOSX-x86_64.sh<span class="token comment"># 需新建Terminal Session或手动加载环境变量来使得conda生效</span><span class="token comment"># 手动加载</span><span class="token builtin class-name">source</span> ~/.bash_profie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="常用命令">常用命令</span></h1><h3><span id="创建虚拟环境">创建虚拟环境</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里djangocms为环境名称</span>conda create -n env_name <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2.7</span> -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="激活以及退出虚拟环境">激活以及退出虚拟环境</span></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 激活</span>conda activate env_name<span class="token comment"># 查看环境下所有pip包</span>pip freeze<span class="token comment"># 退出</span>conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="列出所有存在的环境">列出所有存在的环境</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda-env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="删除一个已有环境">删除一个已有环境</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda remove <span class="token operator">-</span><span class="token operator">-</span>name env_name <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="包管理">包管理</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前环境下已安装的包</span>conda list<span class="token comment"># 查看某个指定环境的已安装包</span>conda list -n env_name<span class="token comment"># 查找package信息</span>conda search numpy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>改善Python程序的91个建议(笔记)</title>
      <link href="//py91suggestions/"/>
      <url>//py91suggestions/</url>
      
        <content type="html"><![CDATA[<h3><span id="判断元素过多使用跳转表">判断元素过多，使用跳转表</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># old</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'Its zero.'</span><span class="token keyword">elif</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'Its one.'</span><span class="token keyword">elif</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>prubt <span class="token string">'Its two.'</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'No number input.'</span><span class="token comment"># new</span><span class="token keyword">def</span> <span class="token function">get_nmu</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Its zero.'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Its one.'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'Its two.'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>x<span class="token punctuation">.</span> <span class="token string">'No number input.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="将常量集中到一个文件">将常量集中到一个文件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将常量写在 constant.py</span><span class="token keyword">class</span> <span class="token class-name">_const</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">ConstError</span><span class="token punctuation">(</span>TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">class</span> <span class="token class-name">ConstCaseError</span><span class="token punctuation">(</span>ConstError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token keyword">in</span> self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> self<span class="token punctuation">.</span>ConstError<span class="token punctuation">,</span> <span class="token string">"Can't change const.&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> name<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> self<span class="token punctuation">.</span>ConstCaseError<span class="token punctuation">,</span> <span class="token string">"const name &#123;&#125; is not all uppercase"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> valueconst <span class="token operator">=</span> _const<span class="token punctuation">(</span><span class="token punctuation">)</span>const<span class="token punctuation">.</span>MY_CONSTANT <span class="token operator">=</span> <span class="token number">1</span>const<span class="token punctuation">.</span>MY_SECOND_CONSTANT <span class="token operator">=</span> <span class="token number">2</span>const<span class="token punctuation">.</span>MY_THIRD_CONSTANT <span class="token operator">=</span> <span class="token number">3</span><span class="token comment"># 调用常量</span><span class="token keyword">from</span> constant <span class="token keyword">import</span> const<span class="token keyword">print</span> const<span class="token punctuation">.</span>MY_CONSTANT<span class="token keyword">print</span> const<span class="token punctuation">.</span>MY_CONSTANT<span class="token keyword">print</span> const<span class="token punctuation">.</span>MY_SECOND_CONSTANT<span class="token keyword">print</span> const<span class="token punctuation">.</span>MY_THIRD_CONSTANT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="数据交换不推荐使用中间变量">数据交换不推荐使用中间变量</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 下面是交换两个变量常用的方法</span>temp <span class="token operator">=</span> xx <span class="token operator">=</span> yy <span class="token operator">=</span> temp<span class="token comment"># 更pythonic的方式，也是更好的性能</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="不推荐使用type来进行类型检查">不推荐使用type来进行类型检查</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 内建类型用type检查问题不大，不过建议用isinstance进行类型判断</span><span class="token comment"># 判断2是否为浮点数</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token comment"># 判断 'zly' 是否为unicode字符串</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">'zly'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">unicode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 判断(1, 5) 是否是str list tuple类型中的一种</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="使用enumerate获取序列迭代索引和值">使用enumerate()获取序列迭代索引和值</span></h3><p><code>enumerate(sequence, [start=0])</code></p><p>start 参数可以指定起始的索引值 默认为0</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">start 参数可以指定起始的索引值 默认为<span class="token number">0</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> e <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'index: '</span><span class="token punctuation">,</span> i<span class="token keyword">print</span> <span class="token string">'element: '</span><span class="token punctuation">,</span> e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，对于字典enumerate并不适合。</p><p>如果要获取迭代字典的key和value，应该使用 <strong>iteritems()</strong> 方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> personinfo<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> k<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="异常处理的几点基本原则">异常处理的几点基本原则</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token comment"># 当try中发生了name1的异常处理</span><span class="token keyword">except</span> <span class="token operator">&lt;</span>name1<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token comment"># 当try中发生了name2或name3中的异常处理</span><span class="token keyword">except</span> <span class="token punctuation">(</span>name2<span class="token punctuation">,</span> name3<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token comment"># 当try中发生name4的异常时处理，并获取对应的实例</span><span class="token keyword">except</span> <span class="token operator">&lt;</span>name4<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>data<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token comment"># 其它异常处理</span><span class="token keyword">except</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token comment"># 没有异常发生时处理</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token comment"># 不管有没有异常都会执行</span><span class="token keyword">finally</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>statements<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不要在try中放入过多代码</li><li>except里最好定位具体的异常</li><li>注意异常的捕获顺序</li><li>使用友好的异常提示信息</li></ul><h3><span id="sort和sorted的区别">Sort和Sorted的区别</span></h3><p>sort() 只对列表有效，且会修改列表的排序，函数返回值为None</p><p>sorted() 对所有可迭代对象都有效，不会修改原对象，返回修改后的对象。</p><p><strong>一些使用的例子</strong></p><ul><li>对字典进行排序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgetterphonebook <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Linda'</span><span class="token punctuation">:</span> <span class="token string">'6650'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">:</span> <span class="token string">'9545'</span><span class="token punctuation">,</span> <span class="token string">'Carol'</span><span class="token punctuation">:</span> <span class="token string">'5834'</span><span class="token punctuation">&#125;</span>sorted_pb <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>phonebook<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> sorted_pb<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Carol'</span><span class="token punctuation">,</span> <span class="token string">'5834'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Linda'</span><span class="token punctuation">,</span> <span class="token string">'7750'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'9345'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 关于itemgetter的用法</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>get_1 <span class="token operator">=</span> itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span> get_1<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span>get_23 <span class="token operator">=</span> itemgetter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span> get_23<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多维list排序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgettergameresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">95.00</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token number">86.0</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Mandy'</span><span class="token punctuation">,</span> <span class="token number">82.5</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>gameresult<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Mandy'</span><span class="token punctuation">,</span> <span class="token number">82.5</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">95.0</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token number">86.0</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典中混合list排序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgettermydict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Li'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Zhang'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Wang'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span> itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Zhang'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Wang'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Li'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>list中混合字典排序</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">gameresult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'wins'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'losses'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zhang'</span><span class="token punctuation">,</span> <span class="token string">'wins'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'losses'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token string">'wins'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'losses'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>gameresult<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'wins'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'wins'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'losses'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Zhang'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'wins'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'losses'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'wins'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'losses'</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'David'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="使用counter进行计数统计">使用Counter进行计数统计</span></h3><p>使用dict</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">some_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span>count_frq <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> some_data<span class="token punctuation">:</span><span class="token keyword">if</span> item <span class="token keyword">in</span> count_frq<span class="token punctuation">:</span>count_frq<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>count_frq<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span> count_frq<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用defaultdict</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictsome_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span>count_frq <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> some_data<span class="token punctuation">:</span>    count_frq<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span> count_frq<span class="token operator">>></span><span class="token operator">></span> defaultdict<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">type</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用set和list</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">some_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span>count_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>some_data<span class="token punctuation">)</span>count_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> count_set<span class="token punctuation">:</span>    count_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> some_data<span class="token punctuation">.</span>count<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> count_list<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更Pythonic的方式，使用Counter</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Countersome_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token keyword">print</span> Counter<span class="token punctuation">(</span>some_data<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Counter<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># pythonic 告诉我们 不要重复造轮子(狗头)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Counter类是Python2.7开始增加的，属于字典类的子类。</p><p>有三种方式来初始化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可迭代对象</span>Counter<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Counter<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 关键字参数</span>Counter<span class="token punctuation">(</span>s<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> u<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>Counter<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 字典</span>Counter<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'s'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Counter<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些Counter类的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用elements()方法来获取Counter中的Key值</span><span class="token builtin">list</span><span class="token punctuation">(</span>Counter<span class="token punctuation">(</span>some_data<span class="token punctuation">)</span><span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token comment"># 使用most_common()方法，找出前N个出现频率最高的元素，以及对应出现次数</span>Counter<span class="token punctuation">(</span>some_data<span class="token punctuation">)</span><span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="使用-argparse-处理命令行参数">使用 argparse 处理命令行参数</span></h3><p>使用optparse能够自动生成应用程序的帮助信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> optpare <span class="token keyword">import</span> OptionParserparser <span class="token operator">=</span> OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'--file'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'filename'</span><span class="token punctuation">,</span><span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'write report to FILE'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'FILE'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-q'</span><span class="token punctuation">,</span> <span class="token string">'--quiet'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_false'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'verbose'</span><span class="token punctuation">,</span>                  default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'dont print status message to stdout'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用argparser</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-o'</span><span class="token punctuation">,</span> <span class="token string">'--output'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-v'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'verbose'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后还推荐了 docopt，暂时它还不是标准库，官网：<a href="http://docopt.org/">http://docopt.org/</a></p><h3><span id="使用elementtree解析xml文件">使用ElementTree解析XML文件</span></h3><p>xml.dom.minidom和xml.sax是python中解析XML最广为人知的两个模块。</p><p>dom是将整个XML文件加载到内存中，解析为一棵树，虽然使用简单，但是占用内存较多。</p><p>sax是基于事件驱动，虽不需要全部转入XML文件，但其处理过程相对复杂。</p><p>对于一般的XML处理，推荐ElementTree，它速度更快，消耗内存更少。</p><h3><span id="关于python-序列化">关于python 序列化</span></h3><p>pickle估计是最通用的序列化模块，它还有一个C语言的实现cPickle。</p><p>相比pickle来说具有较好的性能，其速度大概是pickle的1000倍。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cPickle <span class="token keyword">as</span> pickle<span class="token comment"># 序列化</span>my_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'language'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token string">'2.7.5'</span><span class="token punctuation">&#125;</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'picklefile.dat'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>my_data<span class="token punctuation">,</span> fp<span class="token punctuation">)</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 反序列化</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'picklefile.dat'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>out <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>json是一种轻量级数据交换格式，它基于JaveScript编程语言的一个子集。</p><p>python中有许多对json格式支持的模块，如simplejson, cjson, yajl, ujson,和标准库JSON。</p><p>不过相对于pickle和cPickle，json的性能稍逊一筹。</p><h3><span id="使用traceback获取报错信息">使用traceback获取报错信息</span></h3><p>对于用try except包装起来的异常，可以给用户很好的提示，但对于开发人员来说就不能详细的看到错误的完整栈信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token keyword">try</span><span class="token punctuation">:</span>g_list<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">except</span> IndexError <span class="token keyword">as</span> ex<span class="token keyword">print</span> <span class="token string">'Sorry, Exception occured, you accessed an element out of range.'</span><span class="token keyword">print</span> ex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加traceback后：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">except</span> IndexError <span class="token keyword">as</span> ex<span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">'Sorry, Exception occured, you accessed an element out of range.'</span><span class="token keyword">print</span> extraceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行后会输出完成的栈信息 ，包括调用顺序，异常放生的语句，错误类型等。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3DEqualizer 命令参考</title>
      <link href="//tde-py-ref/"/>
      <url>//tde-py-ref/</url>
      
        <content type="html"><![CDATA[<h2><span id="窗口">窗口</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个自定义请求对象</span>req <span class="token operator">=</span> tde4<span class="token punctuation">.</span>createCustomRequester<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 为req对象添加“文件浏览器”部件</span>tde4<span class="token punctuation">.</span>addFileWidget<span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"filepath"</span><span class="token punctuation">,</span> <span class="token string">"Browse"</span><span class="token punctuation">,</span> <span class="token string">"*.obj"</span><span class="token punctuation">)</span><span class="token comment"># 为req对象添加"开关选项"部件</span>tde4<span class="token punctuation">.</span>addToggleWidget<span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"faces_only"</span><span class="token punctuation">,</span> <span class="token string">"Export Faces Only"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 布置req对象</span>tde4<span class="token punctuation">.</span>postCustomRequester<span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"Export 3D Model as Obj…"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> <span class="token string">"Cancel"</span><span class="token punctuation">)</span><span class="token comment"># 弹出一个问询选择对话框（1是标题，2是问题描述，3选择的按钮）</span>tde4<span class="token punctuation">.</span>getQuestionRequester<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="获取">获取</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取当前激活摄像机id</span>tde4<span class="token punctuation">.</span>getCurrentCamera<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获得当前的畸变模式</span>tde4<span class="token punctuation">.</span>getLensLDModel<span class="token punctuation">(</span>lens<span class="token punctuation">)</span><span class="token comment"># 获取当前帧长度</span>tde4<span class="token punctuation">.</span>getCameraNoFrame<span class="token punctuation">(</span>cam<span class="token punctuation">)</span><span class="token comment"># 获取当前Filmback w</span>tde4<span class="token punctuation">.</span>getLensFBackWidth<span class="token punctuation">(</span>lens<span class="token punctuation">)</span><span class="token comment"># 获取当前Filmback h</span>tde4<span class="token punctuation">.</span>getLensFBackHeight<span class="token punctuation">(</span>lens<span class="token punctuation">)</span><span class="token comment"># 获取指定帧的摄像机焦距</span>tde4<span class="token punctuation">.</span>getCameraFocalLength<span class="token punctuation">(</span>cam<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 创建指定类别的摄像机</span>tde4<span class="token punctuation">.</span>createCamera<span class="token punctuation">(</span><span class="token string">'SEQUENCE'</span><span class="token punctuation">)</span><span class="token comment"># 获取3DE软件路径</span>tde4<span class="token punctuation">.</span>get3DEInstallPath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取当前指针帧数</span>tde4<span class="token punctuation">.</span>getCurrentFrame<span class="token punctuation">(</span>cam<span class="token punctuation">)</span><span class="token comment"># 获取当前的点组</span>tde4<span class="token punctuation">.</span>getCurrentPGroup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取指定点组已选择的模型列表</span>tde4<span class="token punctuation">.</span>get3DModelList<span class="token punctuation">(</span>pg<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 获取当前点组类型</span>tde4<span class="token punctuation">.</span>getPGroupType<span class="token punctuation">(</span>pg<span class="token punctuation">)</span><span class="token comment"># 获取选中的摄像机，如果没有任何选择，则返回列表</span>tde4<span class="token punctuation">.</span>getCameraList<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="设置">设置</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定目标路径的素材</span>tde4<span class="token punctuation">.</span>setCameraPath<span class="token punctuation">(</span>cam<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token comment"># 设置素材的开始，结束帧数，步数</span>tde4<span class="token punctuation">.</span>setCameraSequenceAttr<span class="token punctuation">(</span>cam<span class="token punctuation">,</span>st<span class="token punctuation">,</span>end<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="其它">其它</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开指定文件</span>tde4<span class="token punctuation">.</span>loadProject<span class="token punctuation">(</span><span class="token string">r'/usr/share/home/*.3de'</span><span class="token punctuation">)</span><span class="token comment"># 清空控制台窗口</span>tde4<span class="token punctuation">.</span>clearConsole<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> 3DEqualizer </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuke Studio常用命令参考</title>
      <link href="//nukestudio-command-ref/"/>
      <url>//nukestudio-command-ref/</url>
      
        <content type="html"><![CDATA[<h3><span id="获取项目">获取项目</span></h3><p>关于preject类的用法，在下面的链接查看</p><p><a href="https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.Project">https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.Project</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hcall_projects <span class="token operator">=</span> hc<span class="token punctuation">.</span>projects<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打印出所有项目名</span><span class="token keyword">for</span> p <span class="token keyword">in</span> all_projects<span class="token punctuation">:</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取指定名称的项目</span>name <span class="token operator">=</span> <span class="token string">'test_project'</span>p <span class="token operator">=</span> hc<span class="token punctuation">.</span>project<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="创建clip放置到对应的sequence或者bin里">创建Clip，放置到对应的Sequence或者Bin里</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hcfile_path <span class="token operator">=</span> <span class="token string">r'D:\demo\shot001\shot001_v001.1001.exr'</span><span class="token comment"># 创建MediaSource对象</span>m <span class="token operator">=</span> hc<span class="token punctuation">.</span>MediaSource<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token comment"># 创建Clip对象</span>c <span class="token operator">=</span> hc<span class="token punctuation">.</span>Clip<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment"># 创建binItem对象</span>bi <span class="token operator">=</span> hc<span class="token punctuation">.</span>BinItem<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># 获取需要放置的bin路径对象，添加对象到Bin</span>p <span class="token operator">=</span> hc<span class="token punctuation">.</span>project<span class="token punctuation">(</span><span class="token string">'test_project'</span><span class="token punctuation">)</span>bin1 <span class="token operator">=</span> p<span class="token punctuation">.</span>bins<span class="token punctuation">(</span><span class="token string">'Bin 1'</span><span class="token punctuation">)</span>bin1<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>bin1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于Clip，MediaSource，binItem对象的方法：</p><p><a href="https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.Clip">https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.Clip</a></p><p><a href="https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.MediaSource">https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.MediaSource</a></p><p><a href="https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.BinItem">https://learn.foundry.com/hiero/developers/11.1/HieroPythonDevGuide/api/api_core.html#hiero.core.BinItem</a></p><h3><span id="获取mediasource对象的路径">获取MediaSource对象的路径</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hcfile_path <span class="token operator">=</span> <span class="token string">r'D:\demo\shot001\shot001_v001.1001.exr'</span>m <span class="token operator">=</span> hc<span class="token punctuation">.</span>MediaSource<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>m_infos <span class="token operator">=</span> m<span class="token punctuation">.</span>fileinfos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> m_infos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="在项目顶层文件夹创建bin">在项目顶层文件夹创建Bin</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hcp <span class="token operator">=</span> hc<span class="token punctuation">.</span>project<span class="token punctuation">(</span><span class="token string">'test_project'</span><span class="token punctuation">)</span>bin1 <span class="token operator">=</span> hc<span class="token punctuation">.</span>bins<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>clipsBin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>bin1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="将clip放置到时间线">将clip放置到时间线</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""设置源文件出入点TrackItem.setSourceIn()TrackItem.setSourceOut()设置时间线出入点TrackItem.setTimelineIn()TrackItem.setTimelineOut()"""</span><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hcfile_path <span class="token operator">=</span> <span class="token string">r'D:\demo\shot001\shot001_v001.1001.exr'</span><span class="token comment"># 获取project和bin，以及bin下面的sequence对象</span>p <span class="token operator">=</span> hc<span class="token punctuation">.</span>project<span class="token punctuation">(</span><span class="token string">'test_project'</span><span class="token punctuation">)</span>bin1 <span class="token operator">=</span> p<span class="token punctuation">.</span>bins<span class="token punctuation">(</span><span class="token string">'Bin 1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>s <span class="token operator">=</span> bin1<span class="token punctuation">.</span>sequences<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 创建MediaSource和Clip对象</span>m <span class="token operator">=</span> hc<span class="token punctuation">.</span>MediaSource<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>c <span class="token operator">=</span> hc<span class="token punctuation">.</span>Clip<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment"># 获取video1对象，并创建一个TrackItem对象</span>vt <span class="token operator">=</span> s<span class="token punctuation">.</span>activeItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>videoTrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>t <span class="token operator">=</span> s<span class="token punctuation">.</span>activeItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>videoTrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>createTrackItem<span class="token punctuation">(</span><span class="token string">'shot001'</span><span class="token punctuation">)</span><span class="token comment"># 为trackItem对象设置来源clip，时间线起始帧结束帧</span>t<span class="token punctuation">.</span>setSource<span class="token punctuation">(</span>c<span class="token punctuation">)</span>t<span class="token punctuation">.</span>setTimelineIn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>setTimelineOut<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>vt<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="添加在时间线右键触发事件">添加在时间线右键触发事件</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hc<span class="token keyword">def</span> <span class="token function">add_print</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    event<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span><span class="token string">'print selected'</span><span class="token punctuation">)</span>    selection <span class="token operator">=</span> event<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>selection<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> selectionhc<span class="token punctuation">.</span>events<span class="token punctuation">.</span>registerInterest<span class="token punctuation">(</span><span class="token string">"kShowContextMenu/kTimeline"</span><span class="token punctuation">,</span> add_print<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="获取选中的clip对象">获取选中的clip对象</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">import</span> TrackItem<span class="token comment"># 获取激活的sequence对象</span>seq <span class="token operator">=</span> hiero<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>activeSequence<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取TimelineEditor对象</span>te <span class="token operator">=</span> hiero<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>getTimelineEditor<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token comment"># 得到所有选择的clip items</span><span class="token keyword">print</span> te<span class="token punctuation">.</span>selection<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="直接在sequence添加clip">直接在sequence添加clip</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hiero<span class="token punctuation">.</span>core <span class="token keyword">as</span> hcfile_path <span class="token operator">=</span> <span class="token string">r'D:\demo\shot006\BEN_0230_V001.1001.exr'</span><span class="token comment"># 获取project和bin，以及bin下面的sequence对象</span>p <span class="token operator">=</span> hc<span class="token punctuation">.</span>project<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> p<span class="token punctuation">.</span>sequences<span class="token punctuation">(</span><span class="token string">'seq01'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 创建MediaSource和Clip对象</span>m <span class="token operator">=</span> hc<span class="token punctuation">.</span>MediaSource<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>c <span class="token operator">=</span> hc<span class="token punctuation">.</span>Clip<span class="token punctuation">(</span>m<span class="token punctuation">)</span>s<span class="token punctuation">.</span>addClip<span class="token punctuation">(</span>c<span class="token punctuation">,</span> time<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">)</span> <span class="token comment"># time这里为起始时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="获取clip的matadata信息">获取clip的matadata信息</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">c<span class="token punctuation">.</span>metadata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">'foundry.timeline.duration'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""hasKey, keys, setValue, value"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>菜单操作</title>
      <link href="//nuke-menu/"/>
      <url>//nuke-menu/</url>
      
        <content type="html"><![CDATA[<h3><span id="在nuke添加自己的菜单">在nuke添加自己的菜单</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取menu对象，并打印出所有menu</span>nukeMenu <span class="token operator">=</span> nuke<span class="token punctuation">.</span>menu<span class="token punctuation">(</span><span class="token string">"Nuke"</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> nukeMenu<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span> item<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 添加一个新的menu</span>testMenu <span class="token operator">=</span> nukeMenu<span class="token punctuation">.</span>addMenu<span class="token punctuation">(</span><span class="token string">"testMenu"</span><span class="token punctuation">)</span><span class="token comment"># 给menu里添加按钮，第一个参数为按钮名称，第二个参数为执行的操作</span>testMenu<span class="token punctuation">.</span>addCommand<span class="token punctuation">(</span><span class="token string">"command1"</span><span class="token punctuation">,</span> <span class="token string">"print 1"</span><span class="token punctuation">)</span><span class="token comment"># 添加层级按钮命令</span>testMenu<span class="token punctuation">.</span>addCommand<span class="token punctuation">(</span><span class="token string">"menu1/command2"</span><span class="token punctuation">,</span> <span class="token string">"print 2"</span><span class="token punctuation">)</span><span class="token comment"># 给按钮添加图标</span>testMenu<span class="token punctuation">.</span>addCommand<span class="token punctuation">(</span><span class="token string">"command3"</span><span class="token punctuation">,</span> <span class="token string">"print 3"</span><span class="token punctuation">,</span> icon<span class="token operator">=</span><span class="token string">"nk.png"</span><span class="token punctuation">)</span><span class="token comment"># 给菜单下的按钮设置快捷键</span>testMenu<span class="token punctuation">.</span>addCommand<span class="token punctuation">(</span><span class="token string">"command4"</span><span class="token punctuation">,</span> <span class="token string">"nuke.createNode('Dot')"</span><span class="token punctuation">,</span> shortcut<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="自定义nuke左侧工具架">自定义nuke左侧工具架</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取左侧工具架对象</span>nodesMenu <span class="token operator">=</span> nuke<span class="token punctuation">.</span>menu<span class="token punctuation">(</span><span class="token string">"Nodes"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其它的操作和菜单栏一样</p><h3><span id="需要在启动nuke时执行">需要在启动nuke时执行</span></h3><p>在当前用户文件目录下 <code>.nuke</code> 文件里写入上述命令。</p><p>参考 <a href="http://vfxnews.net/news/news-show.php?id=326">http://vfxnews.net/news/news-show.php?id=326</a></p><p><code>init.py</code>：随nuke启动，运行里面的命令。</p><p><code>menu.py</code>：随nuke启动，加载里面的添加菜单命令。</p><p>实现自动加载安装插件工具：<br><a href="http://vfxnews.net/news/news-show.php?id=380">http://vfxnews.net/news/news-show.php?id=380</a></p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>节点动画操作</title>
      <link href="//nuke-node-ani/"/>
      <url>//nuke-node-ani/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置为可key帧状态</span>node <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">"Blur1"</span><span class="token punctuation">)</span>knob <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span>knob<span class="token punctuation">.</span>setAnimated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 给指定帧数key帧，第一个参数是数值，第二个参数是帧数</span>knob<span class="token punctuation">.</span>setValueAt<span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 比如size属性，有x和y两个值的时候，使用第三个参数来控制</span>knob<span class="token punctuation">.</span>setValueAt<span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>knob<span class="token punctuation">.</span>setValueAt<span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 判断一个属性是否有关键帧</span><span class="token keyword">print</span> knob<span class="token punctuation">.</span>isAnimated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取key帧动画</span><span class="token keyword">print</span> knob<span class="token punctuation">.</span>animations<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 只获取size属性中，h的动画</span><span class="token keyword">print</span> knob<span class="token punctuation">.</span>animations<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 获取size属性中，h的每一个关键帧和对应的数值</span>animation <span class="token operator">=</span> knob<span class="token punctuation">.</span>animation<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> key <span class="token keyword">in</span> animation<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span> key<span class="token punctuation">.</span>x<span class="token punctuation">,</span> key<span class="token punctuation">.</span>y          <span class="token comment"># x为关键帧， y为对应的数值</span><span class="token comment"># 获取非关键帧的数值</span><span class="token keyword">print</span> animation<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token comment"># 拷贝动画</span>nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">"Grade1"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"white"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copyAnimations<span class="token punctuation">(</span>knob<span class="token punctuation">.</span>animations<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除关键帧</span><span class="token keyword">for</span> i <span class="token keyword">in</span> knob<span class="token punctuation">.</span>animations<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  i<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  knob<span class="token punctuation">.</span>deleteAnimation<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="表达式操作">表达式操作</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 属性是否存在表达式</span>knob2 <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">"Blur2"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span><span class="token keyword">print</span> knob2<span class="token punctuation">.</span>hasExpression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 删除表达式</span><span class="token keyword">for</span> i <span class="token keyword">in</span> knob2<span class="token punctuation">.</span>animations<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  knob2<span class="token punctuation">.</span>deleteAnimation<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="将表达式烘培成关键帧">将表达式烘培成关键帧</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">node <span class="token operator">=</span> nuke<span class="token punctuation">.</span>selectedNode<span class="token punctuation">(</span><span class="token punctuation">)</span>first <span class="token operator">=</span> <span class="token number">1</span>last <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">for</span> k <span class="token keyword">in</span> node<span class="token punctuation">.</span>knobs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  knob <span class="token operator">=</span> node<span class="token punctuation">[</span>k<span class="token punctuation">]</span>  <span class="token keyword">if</span> knob<span class="token punctuation">.</span>hasExpression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    curves <span class="token operator">=</span> knob<span class="token punctuation">.</span>animations<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> curves<span class="token punctuation">:</span>      <span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> c<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        c<span class="token punctuation">.</span>setKey<span class="token punctuation">(</span>value<span class="token punctuation">,</span> f<span class="token punctuation">)</span>      c<span class="token punctuation">.</span>setExpression<span class="token punctuation">(</span><span class="token string">"curve"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="//nuke-py-file/"/>
      <url>//nuke-py-file/</url>
      
        <content type="html"><![CDATA[<h3><span id="对nuke文件进行操作">对nuke文件进行操作</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个nuke文件</span>nuke<span class="token punctuation">.</span>scriptOpen<span class="token punctuation">(</span><span class="token string">"$nuke_file_path"</span><span class="token punctuation">)</span><span class="token comment"># 打开一个新的空文件</span>nuke<span class="token punctuation">.</span>scriptNew<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 保存文件，如果括号里没有参数，则相当于ctrl+s</span>nuke<span class="token punctuation">.</span>scriptSave<span class="token punctuation">(</span><span class="token string">"$nuke_file_path"</span><span class="token punctuation">)</span><span class="token comment"># 另存为</span>nuke<span class="token punctuation">.</span>scriptSaveAs<span class="token punctuation">(</span><span class="token string">"$nuke_file_path"</span><span class="token punctuation">)</span><span class="token comment"># 关闭当前文件，回归到空文件状态</span>nuke<span class="token punctuation">.</span>scriptClose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将选择的节点，输出为一个nk文件</span>nuke<span class="token punctuation">.</span>nodeCopy<span class="token punctuation">(</span><span class="token string">"$nuke_file_path"</span><span class="token punctuation">)</span><span class="token comment"># 将一个文件导入到当前工程</span>nuke<span class="token punctuation">.</span>nodePaste<span class="token punctuation">(</span><span class="token string">"$nuke_file_path"</span><span class="token punctuation">)</span><span class="token comment"># 将选择的节点复制到粘贴板</span>nuke<span class="token punctuation">.</span>nodeCopy<span class="token punctuation">(</span><span class="token string">"%clipboard%"</span><span class="token punctuation">)</span><span class="token comment"># 将粘贴板的内容，粘贴到文件中</span><span class="token operator">*</span>nuke<span class="token punctuation">.</span>nodePaste<span class="token punctuation">(</span><span class="token string">"%clipboard%"</span><span class="token punctuation">)</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>callback使用</title>
      <link href="//nuke-call-back/"/>
      <url>//nuke-call-back/</url>
      
        <content type="html"><![CDATA[<h3><span id="callback的应用">callback的应用</span></h3><p>添加在创建节点时，执行的callback</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span> <span class="token string">"this is test"</span>nuke<span class="token punctuation">.</span>addOnCreate<span class="token punctuation">(</span>test<span class="token punctuation">,</span> nodeClass<span class="token operator">=</span><span class="token string">'Blur'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码，在创建一个Blur节点的时候，就可以看到调用里test函数。</p><p>如果需要传参，可以参照：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nuke<span class="token punctuation">.</span>addOnCreate<span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> nodeClass<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要删除callback，使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nuke<span class="token punctuation">.</span>removeOnCreate<span class="token punctuation">(</span>test<span class="token punctuation">,</span> nodeClass<span class="token operator">=</span><span class="token string">'Blur'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一个方法是:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nuke<span class="token punctuation">.</span>addOnUserCreate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和<strong>addOnCreate</strong>雷同，区别在于<br>前者是节点在被创建时调用(包括加载脚本，粘贴等等)，<br>后者只有在用户使用GUI的时候调用，粘贴或者打开工程是无效的。</p><p><strong>两个例子</strong><br>创建节点时，随机生成颜色的功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  r <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  g <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  color <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"%02x%02x%02x%02"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>r<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span> g<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span> b<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  nuke<span class="token punctuation">.</span>thisNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"title_color"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token comment"># 没有指定class的时候，默认给所有节点添加callback</span>nuke<span class="token punctuation">.</span>addOnCreate<span class="token punctuation">(</span>randomColor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建FrameHold节点后，帧数自动设置为当前帧。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  nuke<span class="token punctuation">.</span>thisNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"first_frame"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>nuke<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nuke<span class="token punctuation">.</span>addOnUserCreate<span class="token punctuation">(</span>setFrame<span class="token punctuation">,</span> nodeClass<span class="token operator">=</span><span class="token string">"FrameHold"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="callback-类型">callback 类型</span></h3><table><thead><tr><th align="center">Knob</th><th>使用</th></tr></thead><tbody><tr><td align="center">onCreate</td><td>节点创建时</td></tr><tr><td align="center">onUserCreate</td><td>用户创建节点时</td></tr><tr><td align="center">onScriptLoad</td><td>工程文件加载时</td></tr><tr><td align="center">onScriptSave</td><td>工程文件保存时</td></tr><tr><td align="center">beforeRender</td><td>渲染前执行</td></tr><tr><td align="center">afterRender</td><td>渲染后执行</td></tr><tr><td align="center">beforeFrameRender</td><td>每一帧的渲染前</td></tr><tr><td align="center">afterFrameRender</td><td>每一帧的渲染后</td></tr><tr><td align="center">knobChanged</td><td>knob被改动后</td></tr></tbody></table><p><strong>两个例子</strong></p><p>1.输出前创建文件夹</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">createWriteDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  node <span class="token operator">=</span> nuke<span class="token punctuation">.</span>thisNode<span class="token punctuation">(</span><span class="token punctuation">)</span>  filename <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">import</span> os  dir_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span>nuke<span class="token punctuation">.</span>addBeforeRender<span class="token punctuation">(</span>createWriteDir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.使用knobChanged关联属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gangGammaGainSliders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  n <span class="token operator">=</span> nuke<span class="token punctuation">.</span>thisNode<span class="token punctuation">(</span><span class="token punctuation">)</span>  k <span class="token operator">=</span> nuke<span class="token punctuation">.</span>thisKnob<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> k<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"gamma"</span><span class="token punctuation">:</span>    n<span class="token punctuation">[</span><span class="token string">'gain'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>k<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">elif</span> k<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"gain"</span><span class="token punctuation">:</span>    n<span class="token punctuation">[</span><span class="token string">'gamma'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>k<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nuke<span class="token punctuation">.</span>addKnobChanged<span class="token punctuation">(</span>gangGammaGainSliders<span class="token punctuation">,</span> nodeClass<span class="token operator">=</span><span class="token string">"ColorCorrect"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以直接修改knobChanged的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nuke<span class="token punctuation">.</span>selectedNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"knobChanged"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''print "test"print 1'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要：</strong> 查看knobChanged的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> nuke<span class="token punctuation">.</span>selectedNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"knobChanged"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gizmo制作</title>
      <link href="//gizmo-basic/"/>
      <url>//gizmo-basic/</url>
      
        <content type="html"><![CDATA[<h3><span id="gizmo制作">gizmo制作</span></h3><p>在nuke中选中一些节点，按<strong>ctrl+g</strong>打包组，一个gizmo节点就做好了。</p><p><strong>ctrl+回车键</strong>，进入组。</p><p><strong>两种方法进行组和组内节点的关联</strong>：<br>1.在gizmo组节点上右键Manage User Knobs，再点击pick<br>找到组内节点的属性添加进来。</p><p>2.在gizmo组上添加一个knob (例: Floating Point Slider)，real_name名为size<br>再进入组内，在比如Blur节点上，给size属性右键添加表达式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">parent.size<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关联组内的switch节点,添加一个下拉框的knob名为switch：<br>在switch节点上添加表达式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">parent.switch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关联组内一个节点的激活状态，添加一个checkbox knob，名为premulut<br>在组内找到节点的disable属性，添加表达式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>-parent.premulut<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="两个例子">两个例子</span></h3><p>给这个gizmo节点添加knobChangedScript，<br>实现激活名为test勾选框的时候，test_value属性变为可控。<br>Add - Python Custom</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nuke<span class="token punctuation">.</span>thisNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"knobChanged"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''tn = nuke.thisNode()tk = nuke.thisKnob()if tk.name() == "test":  if tk.value() == 1:    tn.knob("test_value").setenabled(True)  else:    tn.knob("test_value").setenabled(False)'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让gizmo节点实现一个功能，每添加一个输入端，则添加一个额外的输入端。<br>同样写在Python Custom</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nuke<span class="token punctuation">.</span>thisNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>knob<span class="token punctuation">(</span><span class="token string">"knobChanged"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''tn = nuke.thisNode()tk = nuke.thisKnob()curInputs = tn.inputs()# 进入这个节点tn.begin()pos1x = nuke.toNode("Input1")["xpos"].value()pos1y = nuke.toNode("Input1")["ypos"].value()existInputs = len(nuke.allNodes("Input"))if existInputs == curInputs:  nuke.nodes.Input(name="Input%s" % str(existInputs + 1),                   xpos=pos1x + 100*existInputs,                   ypos=pos1y)extraInputs = existInputs - curInputsif extraInputs > 1:  inputNodes = nuke.allNodes("Input")  for node in inputNodes:    if int(node.knob("name").value().split("Input")[1]) > curInputs + 1:      nuke.delete(node)tn.end()'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义Knob操作</title>
      <link href="//knob-basic/"/>
      <url>//knob-basic/</url>
      
        <content type="html"><![CDATA[<h2><span id="节点里添加自定义knob">节点里添加自定义knob</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以用这样的方法，查看knob类型</span><span class="token keyword">print</span> nuke<span class="token punctuation">.</span>selectedNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> Result<span class="token punctuation">:</span> <span class="token operator">&lt;</span>WH_Knob <span class="token builtin">object</span> at xxxx<span class="token operator">></span><span class="token comment"># 给节点添加一个knob</span>node <span class="token operator">=</span> nuke<span class="token punctuation">.</span>selectedNode<span class="token punctuation">(</span><span class="token punctuation">)</span>knob <span class="token operator">=</span> nuke<span class="token punctuation">.</span>Double_Knob<span class="token punctuation">(</span><span class="token string">"real_name"</span><span class="token punctuation">,</span> <span class="token string">"label name"</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>addKnob<span class="token punctuation">(</span>knob<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="对knob的一些操作">对knob的一些操作</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对knob进行隐藏操作</span>node<span class="token punctuation">[</span><span class="token string">"Double_Knob"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setVisible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 使一个knob不可编辑</span>node<span class="token punctuation">[</span><span class="token string">"Double_Knob"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="自定义knob概览">自定义Knob概览</span></h2><table><thead><tr><th>Knob</th><th>使用</th><th>描述</th></tr></thead><tbody><tr><td>Array_Knob</td><td>Array_Knob(name, label, int)</td><td>矢量</td></tr><tr><td>Color_Knob</td><td>Color_Knob(name, label)</td><td>RGB</td></tr><tr><td>AColor_Knob</td><td>AColor_Knob(name, label)</td><td>RGBA</td></tr><tr><td>Eyedropper_Knob</td><td>Eyedropper_Knob(name, label)</td><td>取色</td></tr><tr><td>BBox_Knob</td><td>BBox_Knob(name, label)</td><td>边界框</td></tr><tr><td>Enumeration_Knob</td><td>Enumeration_Knob(name, label, list)</td><td>下拉框</td></tr><tr><td>Bitmask_Knob</td><td>Bitmask_Knob(name, label, list)</td><td>多选</td></tr><tr><td>Radio_Knob</td><td>Radio_Knob(name, label, list)</td><td>单选</td></tr><tr><td>ColorChip_Knob</td><td>ColorChip_Knob(name, label)</td><td>取色</td></tr><tr><td>Boolean_Knob</td><td>Boolean_Knob(name, label)</td><td>选择</td></tr><tr><td>Double_Knob</td><td>Double_Knob(name, label)</td><td>小数</td></tr><tr><td>Int_Knob</td><td>Int_Knob(name, label)</td><td>整数</td></tr><tr><td>Keyer_Knob</td><td>Keyer_Knob(name, label)</td><td>Keyer</td></tr><tr><td>Channel_Knob</td><td>Channel_Knob(name, label)</td><td>通道</td></tr><tr><td>EvalString_Knob</td><td>EvalString_Knob(name, label)</td><td>文本</td></tr><tr><td>File_Knob</td><td>File_Knob(name, label)</td><td>文件</td></tr><tr><td>PyScript_Knob</td><td>PyScript_Knob(name, label, str)</td><td>按钮</td></tr><tr><td>Font_Knob</td><td>Font_Knob(name, label)</td><td>字体</td></tr><tr><td>Format_Knob</td><td>Format_Knob(name, label)</td><td>格式</td></tr><tr><td>Text_Knob</td><td>Text_Knob(name, label)</td><td>分割线</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nuke license运作模式</title>
      <link href="//nuke-lic/"/>
      <url>//nuke-lic/</url>
      
        <content type="html"><![CDATA[<p><a href="https://support.foundry.com/hc/zh-cn/articles/208678945-Q100106-Nuke%E8%AE%B8%E5%8F%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C-">https://support.foundry.com/hc/zh-cn/articles/208678945-Q100106-Nuke许可如何运作-</a></p><h2><span id="针对不同模式的nuke的不同许可证">针对不同模式的Nuke的不同许可证</span></h2><ul><li>Nuke需要 nuke_i 许可证</li><li>NukeX需要 nuke_i 和 nukex_i 许可证</li><li>NukeStudio需要 nuke_i，nukex_i，nukestudio_i 许可证</li><li>Nuke Assist 需要 nukexassist_i 许可证</li><li>终端或后台渲染需要 nuke_r 许可证</li></ul>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nuke节点操作入门</title>
      <link href="//nuke-node-basic/"/>
      <url>//nuke-node-basic/</url>
      
        <content type="html"><![CDATA[<h1><span id="nuke开发相关的文档">Nuke开发相关的文档</span></h1><p>Nuke官方的一个技术支持论坛：<a href="https://support.foundry.com/hc/zh-cn">https://support.foundry.com/hc/zh-cn</a></p><p>Python开发文档：<a href="https://learn.foundry.com/nuke/developers/11.2/pythondevguide/">https://learn.foundry.com/nuke/developers/11.2/pythondevguide/</a></p><p>Python API文档：<a href="https://learn.foundry.com/nuke/developers/11.2/pythonreference/">https://learn.foundry.com/nuke/developers/11.2/pythonreference/</a></p><p>Nuke TCL教程：<a href="https://www.yiibai.com/tcl">https://www.yiibai.com/tcl</a></p><h1><span id="节点操作">节点操作</span></h1><h2><span id="获取节点">获取节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 已知节点的名称，使用toNode函数获取，返回一个节点对象。</span>nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">'Text1'</span><span class="token punctuation">)</span><span class="token comment"># 获取当前选择的单个节点，返回一个节点对象。</span>nuke<span class="token punctuation">.</span>selectedNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取当前选择的多个节点，返回一个列表。</span>nuke<span class="token punctuation">.</span>selectedNodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取工程所有节点</span>all_nodes <span class="token operator">=</span> nuke<span class="token punctuation">.</span>allNodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取工程所有指定类型的节点</span>all_dot_nodes <span class="token operator">=</span> nuke<span class="token punctuation">.</span>allNodes<span class="token punctuation">(</span><span class="token string">"Dot"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们选择的是Text类型的节点，为何这里返回的是Text2。<br>是因为Nuke经过多年的发展，少部分的节点分为第一代和第二代。<br>在新版本中，默认我们创建的是第二代节点。</p><h2><span id="root相关操作">root相关操作</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取nuke文件路径</span>nuke<span class="token punctuation">.</span>root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取项目设置的起始帧</span>nuke<span class="token punctuation">.</span>root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>firstFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="获取或设置节点某个属性">获取或设置节点某个属性</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取cliptype的值</span>t <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">'Text1'</span><span class="token punctuation">)</span><span class="token keyword">print</span> t<span class="token punctuation">[</span><span class="token string">'cliptype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token comment"># 改变cliptype的值</span>t<span class="token punctuation">[</span><span class="token string">'cliptype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span><span class="token string">'bbox'</span><span class="token punctuation">)</span><span class="token comment"># 因为这个值是一个下拉菜单，所以可以传index参数</span>t<span class="token punctuation">[</span><span class="token string">'cliptype'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="创建一个节点">创建一个节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这种方式适合nuke界面打开的时候，代码执行后会跳转到节点的属性编辑窗。</span>nuke<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">'Write'</span><span class="token punctuation">)</span><span class="token comment"># 这种方法适合没有打开nuke，在后台的一些操作。</span>nuke<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>Write<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建节点，忽略弹出属性窗口</span>nuke<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"Blur"</span><span class="token punctuation">,</span> inpanel<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 创建节点的时候，设置节点属性</span>nuke<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>Dot<span class="token punctuation">(</span>xpos<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> ypos<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="删除节点">删除节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除节点</span>nuke<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token comment"># 删除工程中，所有dot节点</span><span class="token keyword">for</span> i <span class="token keyword">in</span> nuke<span class="token punctuation">.</span>allNodes<span class="token punctuation">(</span><span class="token string">"Dot"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  nuke<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="连接一个节点">连接一个节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">'Text1'</span><span class="token punctuation">)</span>w <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">'Write1'</span><span class="token punctuation">)</span><span class="token comment"># setInput的第一个参数是输入编号</span><span class="token comment"># 第二个参数是需要连接的上游节点</span>w<span class="token punctuation">.</span>setInput<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token comment"># 得到节点的input关系</span>w<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> Result<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Text1 at <span class="token number">0x000000001073FF30</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="渲染一个write节点">渲染一个Write节点</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 参数分别是Write节点名，渲染起始帧，渲染结束帧，步长。</span>nuke<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'Write1'</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1010</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="使一个节点被选择">使一个节点被选择</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使一个节点被选择状态</span>node <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">"Grade1"</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setSelected<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="获取设置节点坐标位置">获取，设置节点坐标位置</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">node <span class="token operator">=</span> nuke<span class="token punctuation">.</span>toNode<span class="token punctuation">(</span><span class="token string">"Grade1"</span><span class="token punctuation">)</span><span class="token keyword">print</span> node<span class="token punctuation">.</span>xpos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> node<span class="token punctuation">.</span>ypos<span class="token punctuation">(</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setXpos<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setYpos<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>node<span class="token punctuation">.</span>setXYpos<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>界面操作</title>
      <link href="//nuke-ui/"/>
      <url>//nuke-ui/</url>
      
        <content type="html"><![CDATA[<h3><span id="nuke的界面">nuke的界面</span></h3><p><code>nuke.message(&quot;this is message&quot;)</code> 提示框</p><p><code>nuke.ask(&quot;create a node?&quot;)</code> 询问框，点yes返回True</p><p><code>nuke.getInput(&quot;input:&quot;, &quot;test..&quot;)</code> 输入框，返回值为输入的内容，第二个参数为默认值</p><p><code>nuke.getColor()</code> 颜色拾取框，返回整数形式的颜色</p><p><code>nuke.getFilename(&quot;get file&quot;, &quot;*.nk&quot;)</code> 文件浏览器</p><p><code>nuke.getClipname(&quot;get clip&quot;)</code> 文件选择，可以支持选择序列文件夹</p><p><code>nuke.panel(&quot;test panel&quot;)</code> 一个面板窗口</p><p><strong>关于面板窗口的例子</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> nuke<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span><span class="token string">"test panel"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addClipnameSearch<span class="token punctuation">(</span><span class="token string">"clip path"</span><span class="token punctuation">,</span> <span class="token string">"/tmp"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addFilenameSearch<span class="token punctuation">(</span><span class="token string">"file path"</span><span class="token punctuation">,</span> <span class="token string">"/tmp"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addTextFontPulldown<span class="token punctuation">(</span><span class="token string">"font browser"</span><span class="token punctuation">,</span> <span class="token string">"/myFonts/"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addRGBColorChip<span class="token punctuation">(</span><span class="token string">"some pretty color"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addExpressionInput<span class="token punctuation">(</span><span class="token string">"enter an expression"</span><span class="token punctuation">,</span> <span class="token string">"4*25"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addBooleanCheckBox<span class="token punctuation">(</span><span class="token string">"Yes or no?"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addEnumerationPulldown<span class="token punctuation">(</span><span class="token string">"my choices"</span><span class="token punctuation">,</span> <span class="token string">"A B C"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addScriptCommand<span class="token punctuation">(</span><span class="token string">"tcl or python code"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"just one line"</span><span class="token punctuation">,</span> <span class="token string">"not much space"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addMultilineTextInput<span class="token punctuation">(</span><span class="token string">"multiple lines of user input"</span><span class="token punctuation">,</span> <span class="token string">"lineA\\nlineB"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addPasswordInput<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"donttellanyone"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>addButton<span class="token punctuation">(</span><span class="token string">"push here"</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> p<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>用dot节点画圆的例子</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nuke<span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  circleType <span class="token operator">=</span> <span class="token string">"circle spiral both"</span>  circleNum <span class="token operator">=</span> <span class="token string">"50"</span>  scaleCircle <span class="token operator">=</span> <span class="token string">"50"</span>  spiralNum <span class="token operator">=</span> <span class="token string">"100"</span>  line <span class="token operator">=</span> <span class="token string">"5"</span>  scaleSpiral <span class="token operator">=</span> <span class="token string">"0.5"</span>  rotateOffsetX <span class="token operator">=</span> <span class="token string">"0"</span>  rotateOffsetY <span class="token operator">=</span> <span class="token string">"0"</span>  clockwise <span class="token operator">=</span> <span class="token boolean">True</span>  connectDots <span class="token operator">=</span> <span class="token boolean">False</span>  hideinput <span class="token operator">=</span> <span class="token boolean">True</span>  p <span class="token operator">=</span> nuke<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span><span class="token string">"draw circle"</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addEnumerationPulldown<span class="token punctuation">(</span><span class="token string">"circle type:"</span><span class="token punctuation">,</span> circleType<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"circle num:"</span><span class="token punctuation">,</span> circleNum<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"circle scale:"</span><span class="token punctuation">,</span> scaleCircle<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"spiral num:"</span><span class="token punctuation">,</span> spiralNum<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"spiral scale:"</span><span class="token punctuation">,</span> scaleSpiral<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"line num:"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"rotateOffsetX:"</span><span class="token punctuation">,</span> rotateOffsetX<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addSingleLineInput<span class="token punctuation">(</span><span class="token string">"rotateOffsetY:"</span><span class="token punctuation">,</span> rotateOffsetY<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addBooleanCheckBox<span class="token punctuation">(</span><span class="token string">"clockwise:"</span><span class="token punctuation">,</span> clockwise<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addBooleanCheckBox<span class="token punctuation">(</span><span class="token string">"connect dots:"</span><span class="token punctuation">,</span> connectDots<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>addBooleanCheckBox<span class="token punctuation">(</span><span class="token string">"hide input:"</span><span class="token punctuation">,</span> hideinput<span class="token punctuation">)</span>  result <span class="token operator">=</span> p<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    circleType <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"circle type:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> circleType <span class="token operator">==</span> <span class="token string">"circle"</span> <span class="token keyword">or</span> circleType <span class="token operator">==</span> <span class="token string">"both"</span><span class="token punctuation">:</span>      circleNum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"circle num:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      scaleCircle  <span class="token builtin">float</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"circle scale:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> circleType <span class="token operator">=</span> <span class="token string">"spiral"</span> <span class="token keyword">or</span> circleType <span class="token operator">==</span> <span class="token string">"both"</span><span class="token punctuation">:</span>      spiralNum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"spiral num:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      scaleSpiral <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"spiral scale:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      line <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"line num:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      rotateOffsetX <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"rotateOffsetX:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      rotateOffsetY <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"rotateOffsetY:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      clockwise <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"clockwise"</span><span class="token punctuation">)</span>    connectDots <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"connect dots:"</span><span class="token punctuation">)</span>    hideinput <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token string">"hide input:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> circleType <span class="token operator">==</span> <span class="token string">"circle"</span> <span class="token keyword">or</span> circleType <span class="token operator">==</span> <span class="token string">"both"</span><span class="token punctuation">:</span>      color1 <span class="token operator">=</span> nuke<span class="token punctuation">.</span>getColor<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>circleNum<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> circleNum <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> scaleCircle<span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> circleNum <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> scaleCircle<span class="token punctuation">)</span>        dot <span class="token operator">=</span> nuke<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"Dot"</span><span class="token punctuation">,</span> inpanel<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        dot<span class="token punctuation">[</span><span class="token string">"xpos"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        dot<span class="token punctuation">[</span><span class="token string">"ypos"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        dot<span class="token punctuation">[</span><span class="token string">"tile_color"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>color1<span class="token punctuation">)</span>        dot<span class="token punctuation">[</span><span class="token string">"hide_input"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>hideinput<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> circleNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>          finalDot <span class="token operator">=</span> dot        dot<span class="token punctuation">.</span>setSelected<span class="token punctuation">(</span>connectDots<span class="token punctuation">)</span>      finalDot<span class="token punctuation">.</span>setSelected<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> circleType <span class="token operator">==</span> <span class="token string">"spiral"</span> <span class="token keyword">or</span> circleType <span class="token operator">==</span> <span class="token string">"both"</span><span class="token punctuation">:</span>      color2 <span class="token operator">=</span> nuke<span class="token punctuation">.</span>getColor<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>spiralNum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> clockwise<span class="token punctuation">:</span>          x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> line <span class="token operator">+</span> rotateOffsetX <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">*</span> scaleSpiral<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>          x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> line <span class="token operator">+</span> rotateOffsetX <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">*</span> scaleSpiral<span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> line <span class="token operator">+</span> rotateOffsetY <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">*</span> scaleSpiral<span class="token punctuation">)</span>        dot <span class="token operator">=</span> nuke<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"Dot"</span><span class="token punctuation">,</span> inpanel<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        dot<span class="token punctuation">[</span><span class="token string">"xpos"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        dot<span class="token punctuation">[</span><span class="token string">"ypos"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>setValue<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment"># 后面还有一些代码没有写完，当作参考吧</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>将上述的工具放到菜单栏里:</strong><br>把刚刚的代码保存名为 <code>drawCircle.py</code><br>在.nuke文件夹中新建一个<code>menu.py</code>的文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nuke<span class="token keyword">import</span> drawCircletool_menu <span class="token operator">=</span> nuke<span class="token punctuation">.</span>menu<span class="token punctuation">(</span><span class="token string">"Nuke"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addMenu<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span>tool_menu<span class="token punctuation">.</span>addCommand<span class="token punctuation">(</span><span class="token string">"draw circle"</span><span class="token punctuation">,</span> drawCircle<span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> icon<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后还讲了个nukescripts，没有太明白是干嘛用的<br>这里摘抄下代码，以后作为参考。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nukescripts<span class="token keyword">class</span> <span class="token class-name">TestPanel</span><span class="token punctuation">(</span>nukescripts<span class="token punctuation">.</span>PythonPanel<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    nukescripts<span class="token punctuation">.</span>PythonPanel<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'test panel'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>typeKnob <span class="token operator">=</span> nuke<span class="token punctuation">.</span>Enumeration_Knob<span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Shapes'</span><span class="token punctuation">,</span> <span class="token string">'Strokes'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>elementKnob <span class="token operator">=</span> nuke<span class="token punctuation">.</span>Enumeration_Knob<span class="token punctuation">(</span><span class="token string">'curve'</span><span class="token punctuation">,</span> <span class="token string">'curve'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>typeKnob<span class="token punctuation">,</span> self<span class="token punctuation">.</span>elementKnob<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>addKnob<span class="token punctuation">(</span>k<span class="token punctuation">)</span>p <span class="token operator">=</span> TestPanel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 两种显示窗口的方法</span>p<span class="token punctuation">.</span>showModelDialog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 这种方法会占用整个nuke</span>p<span class="token punctuation">.</span>addToPane<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 这种方法是添加到右侧标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tcl入门</title>
      <link href="//nuke-tcl-basic/"/>
      <url>//nuke-tcl-basic/</url>
      
        <content type="html"><![CDATA[<h2><span id="tcl-帮助文档">TCL 帮助文档</span></h2><p><a href="http://www.nukepedia.com/reference/Tcl/">http://www.nukepedia.com/reference/Tcl/</a></p><h2><span id="basic表达式">basic表达式</span></h2><p><code>pi</code>: 圆周率pi<code>x, y</code>: x和y的坐标<code>width, height</code>: 长和宽<code>frame</code>: 当前帧<code>first_frame, last_frame</code>: 工程的第一帧，和最后一帧</p><p><code>?:</code> 判断表达式，例子 <code>frame&lt;50?1:0</code>, 当帧数为50的时候，<br>值为1，否则为0，它也可以进行多层嵌套：<code>frame&lt;50?(frame&gt;25?0.5:1):0</code></p><h2><span id="math">math</span></h2><p><code>sqrt(a)</code> 开根号</p><p><code>hypot(a, b)</code> 先把a和b平方结果相加，再开根号</p><p><code>pow(a, b)</code> 幂函数，返回a的b次方<code>a</code></p><p><code>bs(a)</code> 取绝对值</p><p><code>min(a, b), max(a, b)</code> 返回参数的最小，最大值</p><p><code>clamp(a, x, y)</code> 将a的值限制在x和y之间<br>if a&lt;x, a==x;if a&gt;y, a==y<br>如果不传参，x和y的默认值为0和1。</p><p><strong>取整</strong></p><p><code>int(a)</code> 直接去小数点取整</p><p><code>ceil(a)</code> 向上取整</p><p><code>floor(a)</code> 向下取整</p><p><strong>角度弧度计算</strong></p><p><code>degrees(pi)</code> 返回180 (公式为：180 * 弧度 / pi)<br><code>radians(180)</code> 返回3.14159</p><p><code>sin cos tan asin acos atan</code> 三角函数</p><p><code>noise random</code> 噪波和随机函数</p><p><strong>curve 关键帧</strong><br>默认的给动画key了关键帧，右键打开表达式，都会显示一个curve的函数</p><p>可以对其进行修改(修改后，<strong>虚线为之前的</strong>，<strong>实线为修改后的</strong>)：<code>curve(1)</code> 将所有关键帧都改为第一帧的数值<br><code>curve(frame)</code> 没有任何更改，曲线为每一帧本身的数值<br><code>curve(frame+10)</code> 向前偏移10帧<br><code>curve(frame+TimeOffset2.time_offset)</code> 关联节点”TimeOffset2”的time_offset参数</p><p><strong>一个例子</strong>: transform节点位移的时候指针始终指向位移的方向。<br><code>degrees(atan(translate.y.derivative/translate.x.derivative))</code></p><p><strong>判断像素是否正常</strong><br>有时候会遇到rgb的数值，为inf或者为nan<br>为素材添加一个Expression节点(这里的例子是红通道为inf，绿通道为nan)<br><code>isinf(r)?0:r</code> <code>isnan(r)?0:g</code></p><p><strong>input</strong><br>一个节点的input端口<br>可以用在继承节点input端口的某个属性<br><code>input0.white</code> (这里是创建了两个Grade节点为例子)</p><p><strong>topnode</strong><br>一套节点的最上一个节点<br><code>[topnode].boxsize</code> (这里继承的是一个CheckerBoard节点的boxsize参数)</p><p><strong>parent</strong><br>父节点，比如将两个节点打包，整个包就是被打包节点的父节点。<br>用法：<br>可以在group上添加一个knob，比如名为test_a<br>然后在group里选择一个节点属性，添加表达式<br><code>parent.test_a</code></p><p><strong>value</strong><br>返回指定参数的值<br>比如创建一个Blur节点<br>在节点Node标签，Label里写<br><code>[value size]</code></p><p>或者使用<code>[python int(5.0)]</code> (这里显示的是python运行这行代码的输出结果)</p><p><strong>inrange(a, x, y)</strong><br>数值a是否在x到y的范围内，<br>如果a在x到y的范围内，返回1<br>反之，则返回0.</p><p>这里的一个例子是，后台渲染的时候，开启defocus节点，<br>当nuke以Gui打开的时候，禁用defocus节点。</p><p>这里会用到nuke的一个变量，$gui<br>当nuke以窗口打开的时候 $gui 为1，以后台打开则为0</p><p>在defocus节点的disable属性添加一个表达式<br><code>$gui</code></p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
          <category> Nuke编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python片段参考</title>
      <link href="//ue4-python-ref/"/>
      <url>//ue4-python-ref/</url>
      
        <content type="html"><![CDATA[<h2><span id="列出所有assets以及类型">列出所有Assets以及类型</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unrealworkingPath <span class="token operator">=</span> <span class="token string">"/Game/"</span><span class="token decorator annotation punctuation">@unreal<span class="token punctuation">.</span>uclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">GetEditorAssetLibrary</span><span class="token punctuation">(</span>unreal<span class="token punctuation">.</span>EditorAssetLibrary<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>editorAssetLib <span class="token operator">=</span> GetEditorAssetLibrary<span class="token punctuation">(</span><span class="token punctuation">)</span>allAssets <span class="token operator">=</span> editorAssetLib<span class="token punctuation">.</span>list_assets<span class="token punctuation">(</span>workingPath<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>allAssetsCount <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>allAssets<span class="token punctuation">)</span>selectedAssetPath <span class="token operator">=</span> workingPath<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">with</span> unreal<span class="token punctuation">.</span>ScopedSlowTask<span class="token punctuation">(</span>allAssetsCount<span class="token punctuation">,</span> selectedAssetPath<span class="token punctuation">)</span> <span class="token keyword">as</span> slowTask<span class="token punctuation">:</span>    slowTask<span class="token punctuation">.</span>make_dialog<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> asset <span class="token keyword">in</span> allAssets<span class="token punctuation">:</span>        _assetData <span class="token operator">=</span> editorAssetLib<span class="token punctuation">.</span>find_asset_data<span class="token punctuation">(</span>asset<span class="token punctuation">)</span>        _assetName <span class="token operator">=</span> _assetData<span class="token punctuation">.</span>get_asset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        _assetPathName <span class="token operator">=</span> _assetData<span class="token punctuation">.</span>get_asset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_path_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        _assetClassName <span class="token operator">=</span> _assetData<span class="token punctuation">.</span>get_asset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_class<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;0&#125;  >>>>  &#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>_assetName<span class="token punctuation">,</span> _assetClassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""type:LevelSequence, Material, StaticMesh, SkeletalMesh, AnimSequence, Skeleton, PhysicsAsset"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="输出log">输出log</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unrealunreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'基本'</span><span class="token punctuation">)</span>unreal<span class="token punctuation">.</span>log_warning<span class="token punctuation">(</span><span class="token string">'警告'</span><span class="token punctuation">)</span>unreal<span class="token punctuation">.</span>log_error<span class="token punctuation">(</span><span class="token string">'报错'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="列出所有选择的资产">列出所有选择的资产</span></h2><p><strong>概念</strong>：在Content Browser里的是Assets，在场景中的是Actor</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unreal<span class="token decorator annotation punctuation">@unreal<span class="token punctuation">.</span>uclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyEditorUtility</span><span class="token punctuation">(</span>unreal<span class="token punctuation">.</span>GlobalEditorUtilityBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>selectedAssets <span class="token operator">=</span> MyEditorUtility<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_selected_assets<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> asset <span class="token keyword">in</span> selectedAssets<span class="token punctuation">:</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>asset<span class="token punctuation">.</span>get_full_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取该资产全名（类的名称+完整的路径）</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>asset<span class="token punctuation">.</span>get_fname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 获取该资产的名称</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>asset<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 获取该资产的名称</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>asset<span class="token punctuation">.</span>get_path_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取该资产的路径</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>asset<span class="token punctuation">.</span>get_class<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 获取该资产的类名</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'--'</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于ObjectBase的方法可以参考：</p><p><a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/_ObjectBase.html">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/_ObjectBase.html</a></p><h2><span id="列出所有选择的actor">列出所有选择的Actor</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unreal<span class="token decorator annotation punctuation">@unreal<span class="token punctuation">.</span>uclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyEditorUtility</span><span class="token punctuation">(</span>unreal<span class="token punctuation">.</span>GlobalEditorUtilityBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>selectedActors <span class="token operator">=</span> MyEditorUtility<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_selection_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> actor <span class="token keyword">in</span> selectedActors<span class="token punctuation">:</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># 获取actor的名称</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>get_actor_location<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取actor的loaction实例</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>get_actor_transform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取actor的transform实例</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span>actor<span class="token punctuation">.</span>is_hidden_ed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># actor是否隐藏</span>    <span class="token keyword">if</span> actor<span class="token punctuation">.</span>actor_has_tag<span class="token punctuation">(</span><span class="token string">"tagOne"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># actor是否有xx标签</span>        actor<span class="token punctuation">.</span>destroy_actor<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 删除actor</span>        unreal<span class="token punctuation">.</span>log_warning<span class="token punctuation">(</span><span class="token string">">>>> Do Remove"</span><span class="token punctuation">)</span>    unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于Actor的方法可以参考：</p><p><a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/Actor.html#unreal.Actor">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/Actor.html#unreal.Actor</a></p><h2><span id="创建蓝图">创建蓝图</span></h2><p><strong>Factory 工厂</strong>：如果需要创建一个蓝图，就要找到蓝图工厂，如果要创建一个动画就要创建动画工厂。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unrealblueprintName <span class="token operator">=</span> <span class="token string">"MyEpicBPActorClass"</span>  <span class="token comment"># 定义蓝图的名称</span>blueprintPath <span class="token operator">=</span> <span class="token string">"/Game/AutoCreated"</span>   <span class="token comment"># 定义蓝图的路径</span>factory <span class="token operator">=</span> unreal<span class="token punctuation">.</span>BlueprintFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 实例化蓝图类</span>factory<span class="token punctuation">.</span>set_editor_property<span class="token punctuation">(</span><span class="token string">"ParentClass"</span><span class="token punctuation">,</span> unreal<span class="token punctuation">.</span>Actor<span class="token punctuation">)</span>  <span class="token comment"># 定义蓝图类型</span><span class="token comment"># 实例化资产创建工具，并执行创建</span>assetTools <span class="token operator">=</span> unreal<span class="token punctuation">.</span>AssetToolsHelpers<span class="token punctuation">.</span>get_asset_tools<span class="token punctuation">(</span><span class="token punctuation">)</span>myFancyNewAssetFile <span class="token operator">=</span> assetTools<span class="token punctuation">.</span>create_asset<span class="token punctuation">(</span>blueprintName<span class="token punctuation">,</span> blueprintPath<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token comment"># 保存创建的结果</span>unreal<span class="token punctuation">.</span>EditorAssetLibrary<span class="token punctuation">.</span>save_loaded_asset<span class="token punctuation">(</span>myFancyNewAssetFile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="创建进度条任务">创建进度条任务</span></h2><p>当一些任务执行时间较长，程序长时间处于“卡死”的状态，可以使用进度条来告知用户程序并没有崩溃。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unrealtotalFrames <span class="token operator">=</span> <span class="token number">500000</span>textDisplay <span class="token operator">=</span> <span class="token string">"This is the text displayed on a progress bar"</span> <span class="token comment"># 进度显示的文字</span><span class="token keyword">with</span> unreal<span class="token punctuation">.</span>ScopedSlowTask<span class="token punctuation">(</span>totalFrames<span class="token punctuation">,</span> textDisplay<span class="token punctuation">)</span> <span class="token keyword">as</span> ST<span class="token punctuation">:</span>    ST<span class="token punctuation">.</span>make_dialog<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment"># 创建对话框</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>totalFrames<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ST<span class="token punctuation">.</span>should_cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 当用户点击取消时</span>            <span class="token keyword">break</span>        unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"running running"</span><span class="token punctuation">)</span>        ST<span class="token punctuation">.</span>enter_progress_frame<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><p><a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ScopedSlowTask.html">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ScopedSlowTask.html</a></p><h2><span id="创建多个蓝图案例结合">创建多个蓝图（案例结合）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unrealtotalRequiredBlueprints <span class="token operator">=</span> <span class="token number">70</span>newAssetName <span class="token operator">=</span> <span class="token string">"BP_pythonMade_%d"</span>createdAssetsPath <span class="token operator">=</span> <span class="token string">"/Game/TestStuff"</span>slowTaskDisplayText <span class="token operator">=</span> <span class="token string">"Createing new assets....."</span>factory <span class="token operator">=</span> unreal<span class="token punctuation">.</span>BlueprintFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>factory<span class="token punctuation">.</span>set_editor_property<span class="token punctuation">(</span><span class="token string">"ParentClass"</span><span class="token punctuation">,</span> unreal<span class="token punctuation">.</span>Pawn<span class="token punctuation">)</span>assetTools <span class="token operator">=</span> unreal<span class="token punctuation">.</span>AssetToolsHelpers<span class="token punctuation">.</span>get_asset_tools<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> unreal<span class="token punctuation">.</span>ScopedSlowTask<span class="token punctuation">(</span>totalRequiredBlueprints<span class="token punctuation">,</span> slowTaskDisplayText<span class="token punctuation">)</span> <span class="token keyword">as</span> ST<span class="token punctuation">:</span>    ST<span class="token punctuation">.</span>make_dialog<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>totalRequiredBlueprints<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ST<span class="token punctuation">.</span>should_cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        newAsset <span class="token operator">=</span> assetTools<span class="token punctuation">.</span>create_asset<span class="token punctuation">(</span>newAssetName<span class="token operator">%</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> createdAssetsPath<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span>        unreal<span class="token punctuation">.</span>EditorAssetLibrary<span class="token punctuation">.</span>save_loaded_asset<span class="token punctuation">(</span>newAsset<span class="token punctuation">)</span>        unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"Just created an asset BP_PythonMade_%d via PYTHON API"</span> <span class="token operator">%</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        ST<span class="token punctuation">.</span>enter_progress_frame<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="将选中的actor放到level中">将选中的Actor放到Level中</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unrealactorsCount <span class="token operator">=</span> <span class="token number">50</span>slowTaskDisplayText <span class="token operator">=</span> <span class="token string">"Spawning actors in the level...."</span><span class="token decorator annotation punctuation">@unreal<span class="token punctuation">.</span>uclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyEditorUtility</span><span class="token punctuation">(</span>unreal<span class="token punctuation">.</span>GlobalEditorUtilityBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>selectedAssets <span class="token operator">=</span> MyEditorUtility<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_selected_assets<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> unreal<span class="token punctuation">.</span>ScopedSlowTask<span class="token punctuation">(</span>actorsCount<span class="token punctuation">,</span> slowTaskDisplayText<span class="token punctuation">)</span> <span class="token keyword">as</span> ST<span class="token punctuation">:</span>    ST<span class="token punctuation">.</span>make_dialog<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>actorsCount<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ST<span class="token punctuation">.</span>should_cancel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment"># 针对关卡的操作，所有这里去找EditorLevelLibray里的方法</span>        unreal<span class="token punctuation">.</span>EditorLevelLibrary<span class="token punctuation">.</span>spawn_actor_from_object<span class="token punctuation">(</span>selectedAssets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> unreal<span class="token punctuation">.</span>Vector<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">+</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token operator">+</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unreal<span class="token punctuation">.</span>Rotator<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        unreal<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">"Just added an actor to the level!"</span><span class="token punctuation">)</span>        ST<span class="token punctuation">.</span>enter_progress_frame<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Unreal </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Maya中进行Flipping Camera</title>
      <link href="//maya-flipping-camera/"/>
      <url>//maya-flipping-camera/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>视效制作中，在完成Camera Tracking后，可能会被告知：“素材进行了翻转处理”。然后丢给你一个镜像后的素材，并要求你重新进行Tracking。</p><p>翻转素材一般有两种情况：</p><ul><li><p>基于x轴镜像<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p1.gif"></p></li><li><p>基于y轴镜像<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p2.gif"></p></li></ul><p>对于这样的镜头，不用重新再做一遍Tracking，只需要在Maya里进行一些处理就可以了。</p><p>这篇文章主要是讲<strong>如何让摄像机和场景物体匹配上翻转后的素材。</strong></p><h1><span id="基本方法">基本方法</span></h1><p>1.对于x轴翻转的，将摄像机的ty，rx，rz轴的数值设为其相反数。</p><p>2.对于y轴翻转的，将摄像机的tx，ry，rz轴的数值设为其相反数。</p><p>3.最后把场景中其它物体（<strong>不要摄像机</strong>）打组，以原点为中心缩放-1的数值。（如果是x轴翻转，缩放y轴；如果是y轴翻转，缩放x轴）</p><h1><span id="脚本实现">脚本实现</span></h1><p>上述最麻烦了的就是对摄像机进行操作，因为如果手动的去修改每一帧数值会非常繁琐。</p><p>通常这样的问题可以交给代码来处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 选择你的摄像机，运行下面的代码</span><span class="token keyword">import</span> pymel<span class="token punctuation">.</span>core <span class="token keyword">as</span> pmcam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>start_t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>playbackOptions<span class="token punctuation">(</span>q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>end_t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>playbackOptions<span class="token punctuation">(</span>q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_t<span class="token punctuation">,</span> end_t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pm<span class="token punctuation">.</span>currentTime<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> attr <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'tx'</span><span class="token punctuation">,</span> <span class="token string">'ry'</span><span class="token punctuation">,</span> <span class="token string">'rz'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 基于y轴的翻转</span>        cam<span class="token punctuation">.</span>attr<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>cam<span class="token punctuation">.</span>attr<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然除去使用脚本，我们也可以用约束的方法，手动实现翻转摄像机的效果。</p><h1><span id="手动实现">手动实现</span></h1><p><strong>这里以y轴翻转为例</strong>  </p><p>1.将所有物体包括摄像机打组</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p3.jpg"></p><p>2.在组上将y轴的数值改成-1（基于y轴的翻转）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p4.jpg"></p><p>3.将原始的摄像机ctrl+d复制一份，提出组外，为了方便区分重命名为Cam_mirror_y</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p5.jpg"></p><p>4.先选择原始摄像机，再选择组外的mirror摄像机，进行约束操作</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p6.jpg"></p><p>5.将mirror的摄像机缩放数值设为1</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p7.jpg"></p><p>6.选择mirror摄像机的constraint节点，修改offset rotate x的旋转为-180</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-flipping-camera/p8.jpg"></p><p>7.这个时候将mirror摄像机替换翻转后的素材，可以看到已经实现了摄像机翻转的操作。最后就是烘培mirror摄像机的动画，删除constraint节点。将所有物体提出组就好了。</p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shotgun常用命令参考</title>
      <link href="//sg-common-command/"/>
      <url>//sg-common-command/</url>
      
        <content type="html"><![CDATA[<h2><span id="常用命令">常用命令</span></h2><h3><span id="用api-key获取sg对象">用api key获取sg对象</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用apikey登陆</span>sg <span class="token operator">=</span> shotgun_api3<span class="token punctuation">.</span>Shotgun<span class="token punctuation">(</span><span class="token string">"https://piedpiper.shotgunstudio.com"</span><span class="token punctuation">,</span>                          script_name<span class="token operator">=</span><span class="token string">"compress"</span><span class="token punctuation">,</span>                          api_key<span class="token operator">=</span><span class="token string">"01234567ef0123456789abcdef"</span><span class="token punctuation">)</span><span class="token comment"># 使用账号登陆</span>sg <span class="token operator">=</span> shotgun_api3<span class="token punctuation">.</span>Shotgun<span class="token punctuation">(</span><span class="token string">"https://piedpiper.shotgunstudio.com"</span><span class="token punctuation">,</span>                          login<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>                          password<span class="token operator">=</span><span class="token string">"password"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="获取所有项目">获取所有项目</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getAllProjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">]</span>    projects<span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Project"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fields<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>projects<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"couldn't find any projects"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Found "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>projects<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" projects"</span>    <span class="token keyword">return</span> projects<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'TST'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="获取指定project所有的sequence需要project-id">获取指定Project所有的sequence（需要Project id）</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getSequencesByProjId</span><span class="token punctuation">(</span>proj_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">]</span>    filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Project'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">:</span>proj_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    sequences<span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Sequence"</span><span class="token punctuation">,</span>filters<span class="token punctuation">,</span>fields<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sequences<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"couldn't find any sequences"</span>    <span class="token keyword">return</span> sequences<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'test_seq001'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">154</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="获取指定seq下所有shot需要sequence-id">获取指定seq下所有shot（需要sequence id）</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getShotsBySeqId</span><span class="token punctuation">(</span>seq_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">]</span>    filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'sg_sequence'</span><span class="token punctuation">,</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Sequence'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">:</span>seq_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    shots<span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Shot"</span><span class="token punctuation">,</span>filters<span class="token punctuation">,</span>fields<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shots<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"couldn't find any shots"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token boolean">None</span>       <span class="token keyword">return</span> shots<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'zly_test_001'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3485</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="列出指定project-sequence下的character资产">列出指定Project Sequence下的Character资产</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">]</span>sequence_id <span class="token operator">=</span> <span class="token number">154</span>project_id <span class="token operator">=</span> <span class="token number">87</span>filters <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> project_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Character'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'sequences'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> sequence_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>assets <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Asset"</span><span class="token punctuation">,</span>filters<span class="token punctuation">,</span>fields<span class="token punctuation">)</span><span class="token keyword">print</span> assets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="下载指定version-id的mov-file">下载指定version id的mov file</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">version <span class="token operator">=</span> sg<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token string">"Version"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token number">8649</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"sg_uploaded_movie"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>local_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">r"D:\temp"</span><span class="token punctuation">,</span> version<span class="token punctuation">[</span><span class="token string">"sg_uploaded_movie"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sg<span class="token punctuation">.</span>download_attachment<span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token string">"sg_uploaded_movie"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> file_path<span class="token operator">=</span>local_file_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="用名称寻找asset">用名称寻找asset</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findAssetByName</span><span class="token punctuation">(</span>proj_id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'tasks'</span><span class="token punctuation">]</span>    filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> proj_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Asset'</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="指定project-id场次名和镜头号获取镜头信息">指定project id,场次名和镜头号,获取镜头信息</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findShotByName</span><span class="token punctuation">(</span>project_id<span class="token punctuation">,</span> seq<span class="token punctuation">,</span> shot<span class="token punctuation">)</span><span class="token punctuation">:</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'tasks'</span><span class="token punctuation">,</span> <span class="token string">'sg_sequence'</span><span class="token punctuation">]</span>    filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> project_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> shot<span class="token punctuation">]</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> result<span class="token punctuation">:</span>        name <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token string">'sg_sequence'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> seq<span class="token punctuation">:</span>            <span class="token keyword">return</span> x    <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="打印出指定项目下所有sequence和seq下所有shots">打印出指定项目下，所有Sequence，和Seq下所有Shots</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">]</span>filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>sequences <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Sequence"</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token keyword">for</span> seq <span class="token keyword">in</span> sequences<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"Sequence: "</span><span class="token punctuation">,</span> seq<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seq<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">]</span>    filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'sg_sequence'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> seq<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    shots <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Shot"</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>    <span class="token keyword">for</span> shot <span class="token keyword">in</span> shots<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'Shot: '</span><span class="token punctuation">,</span> shot<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="创建一个镜头任务和版本指定project-id和sequence-id">创建一个镜头，任务，和版本（指定Project id和Sequence id）</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建Shot</span>shot_name <span class="token operator">=</span> <span class="token string">'TESTSHOT_001'</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'project'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'sg_sequence'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">246</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'code'</span><span class="token punctuation">:</span> shot_name<span class="token punctuation">,</span>    <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span> <span class="token string">'ip'</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> sg<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token comment"># 在Shot下创建Task</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'project'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'ani01'</span><span class="token punctuation">,</span> <span class="token comment"># 任务名</span>    <span class="token string">'step'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Animation'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> const<span class="token punctuation">.</span>PIPELINE_STEP_ID<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Animation'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment"># 任务类型</span>    <span class="token string">'entity'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment"># 这里指定Shot id</span><span class="token punctuation">&#125;</span>t <span class="token operator">=</span> sg<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token string">'Task'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">print</span> t<span class="token comment"># 在Task下创建Version</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'project'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'testshot_ani_v001'</span><span class="token punctuation">,</span>        <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span> <span class="token string">'rev'</span><span class="token punctuation">,</span>        <span class="token string">'entity'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment"># Shot id</span>        <span class="token string">'sg_task'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Task'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> t<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment"># Task id</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'HumanUser'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">220</span><span class="token punctuation">&#125;</span> <span class="token comment"># 创建Version的人员</span>        <span class="token punctuation">&#125;</span>version <span class="token operator">=</span> sg<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token string">'Version'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">print</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="对自定义entity进行创建">对自定义Entity进行创建</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'project'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'test_plate_v005'</span><span class="token punctuation">,</span>    <span class="token string">'sg_shot'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">6661</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'updated_by'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Group'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment"># 更新用户为群组</span>    <span class="token string">'sg_original_resolution'</span><span class="token punctuation">:</span> <span class="token string">'1920x1080'</span><span class="token punctuation">,</span>    <span class="token string">'sg_plate_type'</span><span class="token punctuation">:</span> <span class="token string">'BG01'</span><span class="token punctuation">,</span>    <span class="token string">'sg_frames_scanned'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span>    <span class="token string">'sg_scan_start'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'sg_scan_end'</span><span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">&#125;</span>plate <span class="token operator">=</span> sg<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token string">'CustomEntity10'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">print</span> plate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="对自定义entity进行查找">对自定义Entity进行查找</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pprintfilters <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'CustomEntity10'</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="查询指定类型的资产指定projectsequence-id">查询指定类型的资产（指定Project，Sequence id）</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">]</span>filters <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'sequence'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">247</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Character'</span><span class="token punctuation">]</span> <span class="token comment"># 指定Character类型</span><span class="token punctuation">]</span><span class="token builtin">chr</span> <span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Asset'</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="官方的example">官方的example</span></h2><blockquote><p>参考来源：<a href="https://developer.shotgunsoftware.com/python-api/reference.html">https://developer.shotgunsoftware.com/python-api/reference.html</a></p></blockquote><h3><span id="创建一个镜头">创建一个镜头</span></h3><blockquote><p>Shotgun.create(entity_type, data, return_fields=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token string">"project"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Project"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">161</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token string">"sg_sequence"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Sequence"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">109</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"001_100"</span><span class="token punctuation">,</span>     <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span> <span class="token string">"ip"</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'001_100'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2557</span><span class="token punctuation">,</span> <span class="token string">'project'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Pied Piper'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'sg_sequence'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Sequence 001'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span> <span class="token string">'ip'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="指定project-id-和-sequence-id返回所有character的资产">指定Project id 和 Sequence id，返回所有Character的资产</span></h3><blockquote><p>Shotgun.find(entity_type, filters, fields=None, order=None, filter_operator=None, limit=0, retired_only=False, page=0, include_archived_projects=True, additional_filter_presets=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Find Character Assets in Sequence 100_FOO</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># -------------</span><span class="token operator">>></span><span class="token operator">></span> fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sequence_id <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># Sequence "100_FOO"</span><span class="token operator">>></span><span class="token operator">></span> project_id <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment"># Demo Project</span><span class="token operator">>></span><span class="token operator">></span> filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> project_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">[</span><span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'Character'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">[</span><span class="token string">'sequences'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> sequence_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> assets<span class="token operator">=</span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Asset"</span><span class="token punctuation">,</span>filters<span class="token punctuation">,</span>fields<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Gopher'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Cow'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Bird_1'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Bird_2'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Bird_3'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Raccoon'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Wet Gopher'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="指定project-id-和-animation-step-id返回所有version">指定Project id 和 animation step id，返回所有Version</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Find Versions created by Tasks in the Animation Pipeline Step</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># -------------</span><span class="token operator">>></span><span class="token operator">></span> fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> pipeline_step_id <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># Animation Step ID</span><span class="token operator">>></span><span class="token operator">></span> project_id <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment"># Demo Project</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># you can drill through single-entity link fields</span><span class="token operator">>></span><span class="token operator">></span> filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span><span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span><span class="token string">'id'</span><span class="token punctuation">:</span> project_id<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">[</span><span class="token string">'sg_task.Task.step.Step.id'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> pipeline_step_id<span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Version"</span><span class="token punctuation">,</span> filters<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'scene_010_anim_v001'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Version'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'scene_010_anim_v002'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Version'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'bird_v001'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Version'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'birdAltBlue_v002'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Version'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="指定类型和id返回名称">指定类型和id，返回名称</span></h3><blockquote><p>Shotgun.find_one(entity_type, filters, fields=None, order=None, filter_operator=None, retired_only=False, include_archived_projects=True, additional_filter_presets=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这里的Asset可以是Project，Sequence，Shot，Version等等</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token string">"Asset"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"sg_status_list"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token string">'Gopher'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span> <span class="token string">'ip'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="更新选定镜头的制作状态">更新选定镜头的制作状态</span></h3><blockquote><p>Shotgun.update(entity_type, entity_id, data, multi_entity_update_modes=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 看起来好像有问题，待测试</span><span class="token operator">>></span><span class="token operator">></span> shots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'40435'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'40438'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'40441'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'shots'</span><span class="token punctuation">:</span> shots<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span><span class="token string">'rev'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">"Asset"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">'sg_status_list'</span><span class="token punctuation">:</span> <span class="token string">'rev'</span><span class="token punctuation">,</span> <span class="token string">'shots'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">40435</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'100_010'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">40438</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'100_040'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">40441</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'100_070'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="删除一个镜头">删除一个镜头</span></h3><blockquote><p>Shotgun.delete(entity_type, entity_id)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token number">2557</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="恢复之前删除的镜头">恢复之前删除的镜头</span></h3><blockquote><p>Shotgun.revive(entity_type, entity_id)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>revive<span class="token punctuation">(</span><span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token number">860</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="批量处理创建删除更新镜头">批量处理（创建，删除，更新）镜头</span></h3><blockquote><p>Shotgun.batch(requests)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># batch可用作于create(), update(), delete()</span><span class="token comment"># 使用batch函数的任务，要么全部完成，要么全都不完成</span>batch_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"shot_%04d"</span> <span class="token operator">%</span> i<span class="token punctuation">,</span>        <span class="token string">"project"</span><span class="token punctuation">:</span> project    <span class="token punctuation">&#125;</span>    batch_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"request_type"</span><span class="token punctuation">:</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"entity_type"</span><span class="token punctuation">:</span> <span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>sg<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_data<span class="token punctuation">)</span><span class="token comment"># 三种不同类型可同时存在</span>batch_data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span><span class="token string">"request_type"</span><span class="token punctuation">:</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"entity_type"</span><span class="token punctuation">:</span> <span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"New Shot 1"</span><span class="token punctuation">,</span> <span class="token string">"project"</span><span class="token punctuation">:</span> project<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token string">"request_type"</span><span class="token punctuation">:</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"entity_type"</span><span class="token punctuation">:</span> <span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token string">"entity_id"</span><span class="token punctuation">:</span> <span class="token number">3624</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"Changed 1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token string">"request_type"</span><span class="token punctuation">:</span> <span class="token string">"delete"</span><span class="token punctuation">,</span> <span class="token string">"entity_type"</span><span class="token punctuation">:</span> <span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token string">"entity_id"</span><span class="token punctuation">:</span> <span class="token number">3624</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>sg<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="计算指定项目中所有assets数量">计算指定项目中所有Assets数量</span></h3><blockquote><p>Shotgun.summarize(entity_type, filters, summary_fields, filter_operator=None, grouping=None, include_archived_projects=True)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>summarize<span class="token punctuation">(</span>entity_type<span class="token operator">=</span><span class="token string">'Asset'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              summary_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 返回值的id即为数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="计算指定项目中所有assets数量按照sg_asset_type排序">计算指定项目中所有Assets数量，按照sg_asset_type排序</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>summarize<span class="token punctuation">(</span>entity_type<span class="token operator">=</span><span class="token string">'Asset'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              filters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'project'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Project'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              summary_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              grouping<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'sg_asset_type'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'exact'</span><span class="token punctuation">,</span> <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'asc'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Groups里是每个类型资产的总数</span><span class="token punctuation">&#123;</span><span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span><span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token string">'Character'</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Environment'</span><span class="token punctuation">,</span><span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token string">'Environment'</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Matte Painting'</span><span class="token punctuation">,</span> <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token string">'Matte Painting'</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Prop'</span><span class="token punctuation">,</span> <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token string">'Prop'</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Vehicle'</span><span class="token punctuation">,</span> <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token string">'Vehicle'</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 最后是所有资产的总和</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="计算一个sequence里所有的任务数量并找到其中最近截止日期">计算一个Sequence里所有的任务数量，并找到其中最近截止日期</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>summarize<span class="token punctuation">(</span>entity_type<span class="token operator">=</span><span class="token string">'Task'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 <span class="token punctuation">[</span><span class="token string">'entity.Shot.sg_sequence'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 <span class="token punctuation">[</span><span class="token string">'sg_status_list'</span><span class="token punctuation">,</span> <span class="token string">'is_not'</span><span class="token punctuation">,</span> <span class="token string">'na'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              summary_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                              <span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span><span class="token string">'due_date'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'latest'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 最近的截至日期，和当前场次所有任务的总数</span><span class="token punctuation">&#123;</span><span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-07-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="计算一个sequence里所有的任务数量并列出所有shots按照截至日期排序">计算一个Sequence里所有的任务数量，并列出所有Shots，按照截至日期排序</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>summarize<span class="token punctuation">(</span>entity_type<span class="token operator">=</span><span class="token string">'Task'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 <span class="token punctuation">[</span><span class="token string">'entity.Shot.sg_sequence'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 <span class="token punctuation">[</span><span class="token string">'sg_status_list'</span><span class="token punctuation">,</span> <span class="token string">'is_not'</span><span class="token punctuation">,</span> <span class="token string">'na'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              summary_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'due_date'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'latest'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              grouping<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'entity'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'exact'</span><span class="token punctuation">,</span> <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'asc'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'shot_010'</span><span class="token punctuation">,</span>             <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'shot_010'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-06-18'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'shot_020'</span><span class="token punctuation">,</span>             <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'shot_020'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-06-28'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'shot_030'</span><span class="token punctuation">,</span>             <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'shot_030'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-07-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-07-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="计算一个sequence里所有任务数量找到最近的截止日期并列出所有shots和step">计算一个Sequence里所有任务数量，找到最近的截止日期，并列出所有Shots和Step</span></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>summarize<span class="token punctuation">(</span>entity_type<span class="token operator">=</span><span class="token string">'Task'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 filters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token punctuation">[</span><span class="token string">'entity.Shot.sg_sequence'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Sequence'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token punctuation">[</span><span class="token string">'sg_status_list'</span><span class="token punctuation">,</span> <span class="token string">'is_not'</span><span class="token punctuation">,</span> <span class="token string">'na'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 summary_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                                 <span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'due_date'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'latest'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                 grouping<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'entity'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'exact'</span><span class="token punctuation">,</span> <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'asc'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                           <span class="token punctuation">&#123;</span><span class="token string">'field'</span><span class="token punctuation">:</span> <span class="token string">'step'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'exact'</span><span class="token punctuation">,</span> <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'asc'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'shot_010'</span><span class="token punctuation">,</span>             <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'shot_010'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-05-04'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Online'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Online'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-05-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> truncated <span class="token keyword">for</span> brevity                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Comp'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Comp'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-06-18'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-06-18'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'shot_020'</span><span class="token punctuation">,</span>             <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'shot_020'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-05-15'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Online'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Online'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-05-16'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> truncated <span class="token keyword">for</span> brevity                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Comp'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Comp'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-06-28'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-06-28'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'shot_030'</span><span class="token punctuation">,</span>             <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'shot_030'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token string">'groups'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Client'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-05-20'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Online'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Online'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-05-21'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> truncated <span class="token keyword">for</span> brevity                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">&#123;</span><span class="token string">'group_name'</span><span class="token punctuation">:</span> <span class="token string">'Comp'</span><span class="token punctuation">,</span>                         <span class="token string">'group_value'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Comp'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Step'</span><span class="token punctuation">,</span> <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                         <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-07-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-07-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'summaries'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'due_date'</span><span class="token punctuation">:</span> <span class="token string">'2013-07-05'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="给notes-id参数返回完整notes对话包括回复与附件">给notes id参数，返回完整notes对话，包括回复与附件</span></h3><blockquote><p>Shotgun.note_thread_read(note_id, entity_fields=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'Please add more awesomeness to the color grading.'</span><span class="token punctuation">,</span>  <span class="token string">'created_at'</span><span class="token punctuation">:</span> <span class="token string">'2015-07-14 21:33:28 UTC'</span><span class="token punctuation">,</span>  <span class="token string">'created_by'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>                 <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'John Pink'</span><span class="token punctuation">,</span>                 <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'act'</span><span class="token punctuation">,</span>                 <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'HumanUser'</span><span class="token punctuation">,</span>                 <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">6013</span><span class="token punctuation">,</span>  <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Note'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'created_at'</span><span class="token punctuation">:</span> <span class="token string">'2015-07-14 21:33:32 UTC'</span><span class="token punctuation">,</span>  <span class="token string">'created_by'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>                 <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'John Pink'</span><span class="token punctuation">,</span>                 <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'act'</span><span class="token punctuation">,</span>                 <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'HumanUser'</span><span class="token punctuation">,</span>                 <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">,</span>  <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Attachment'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'More awesomeness added'</span><span class="token punctuation">,</span>  <span class="token string">'created_at'</span><span class="token punctuation">:</span> <span class="token string">'2015-07-14 21:54:51 UTC'</span><span class="token punctuation">,</span>  <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Reply'</span><span class="token punctuation">,</span>  <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>           <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'David Blue'</span><span class="token punctuation">,</span>           <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'act'</span><span class="token punctuation">,</span>           <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'HumanUser'</span><span class="token punctuation">,</span>           <span class="token string">'valid'</span><span class="token punctuation">:</span> <span class="token string">'valid'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="给定一个text参数和entiry_type参数全局搜索匹配条件的资产">给定一个text参数，和entiry_type参数，全局搜索匹配条件的资产</span></h3><blockquote><p>Shotgun.text_search(text, entity_types, project_ids=None, limit=None)   # 这里可以给定Project id参数，限制搜索范围</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> entity_types <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">"Asset"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"sg_asset_type"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"Character"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">"Task"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>text_search<span class="token punctuation">(</span><span class="token string">"bunny"</span><span class="token punctuation">,</span> entity_types<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'matches'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">734</span><span class="token punctuation">,</span>              <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Asset'</span><span class="token punctuation">,</span>              <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bunny'</span><span class="token punctuation">,</span>              <span class="token string">'project_id'</span><span class="token punctuation">:</span> <span class="token number">65</span><span class="token punctuation">,</span>              <span class="token string">'image'</span><span class="token punctuation">:</span> <span class="token string">'https://...'</span><span class="token punctuation">,</span>              <span class="token string">'links'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'fin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token number">558</span><span class="token punctuation">,</span>               <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Task'</span>               <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'FX'</span><span class="token punctuation">,</span>               <span class="token string">'project_id'</span><span class="token punctuation">:</span> <span class="token number">65</span><span class="token punctuation">,</span>               <span class="token string">'image'</span><span class="token punctuation">:</span> <span class="token string">'https://...'</span><span class="token punctuation">,</span>               <span class="token string">'links'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shot'</span><span class="token punctuation">,</span> <span class="token string">'bunny_010_0010'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token string">'status'</span><span class="token punctuation">:</span> <span class="token string">'fin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'terms'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bunny'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="上传mov到指定的shot标志为sg_latest_quicktime">上传mov到指定的shot，标志为sg_latest_quicktime</span></h3><blockquote><p>Shotgun.upload(entity_type, entity_id, path, field_name=None, display_name=None, tag_list=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 官方的例子</span><span class="token operator">>></span><span class="token operator">></span> mov_file <span class="token operator">=</span> <span class="token string">'/data/show/ne2/100_110/anim/01.mlk-02b.mov'</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>upload<span class="token punctuation">(</span><span class="token string">"Shot"</span><span class="token punctuation">,</span> <span class="token number">423</span><span class="token punctuation">,</span> mov_file<span class="token punctuation">,</span> field_name<span class="token operator">=</span><span class="token string">"sg_latest_quicktime"</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           display_name<span class="token operator">=</span><span class="token string">"Latest QT"</span><span class="token punctuation">)</span><span class="token number">72</span><span class="token comment"># 自己尝试的方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PYTHONHTTPSVERIFY'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>ssl<span class="token punctuation">,</span> <span class="token string">'_create_unverified_context'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ssl<span class="token punctuation">.</span>_create_default_https_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>_create_unverified_contextsg <span class="token operator">=</span> shotgun_api<span class="token punctuation">.</span>Shotgun<span class="token punctuation">(</span>const<span class="token punctuation">.</span>SHOTGUN_WEB_PATH<span class="token punctuation">,</span> const<span class="token punctuation">.</span>SCRIPT_NAME<span class="token punctuation">,</span> const<span class="token punctuation">.</span>API_KEY<span class="token punctuation">)</span>mov_file <span class="token operator">=</span> <span class="token string">r'D:\\show\VPT\B003C022\img\B003C022_layout_v001.mov'</span>sg<span class="token punctuation">.</span>upload<span class="token punctuation">(</span><span class="token string">'Version'</span><span class="token punctuation">,</span> <span class="token number">8676</span><span class="token punctuation">,</span> mov_file<span class="token punctuation">,</span> <span class="token string">'sg_uploaded_movie'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="上传本地文件到指定的entity下">上传本地文件到指定的entity下</span></h3><blockquote><p>Shotgun.upload_thumbnail（entity_type，entity_id，path，** kwargs ）</p></blockquote><blockquote><p>图像将在服务器上自动调整大小，以生成适合大小的图像文件。但是，原始文件也将保留，并且在Web UI中单击缩略图时可以访问。如果您使用本地安装的Shotgun而未启用S3，则如果您要为缩略图上传非常大的源图像，则会占用磁盘空间。</p></blockquote><h3><span id="从给定的版本下载附件">从给定的版本下载附件</span></h3><blockquote><p>Shotgun.download_attachment(attachment=False, file_path=None, attachment_id=None)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> version <span class="token operator">=</span> sg<span class="token punctuation">.</span>find_one<span class="token punctuation">(</span><span class="token string">"Version"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token number">7115</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"sg_uploaded_movie"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> local_file_path <span class="token operator">=</span> <span class="token string">"/var/tmp/%s"</span> <span class="token operator">%</span> version<span class="token punctuation">[</span><span class="token string">"sg_uploaded_movie"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> sg<span class="token punctuation">.</span>download_attachment<span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token string">"sg_uploaded_movie"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> file_path<span class="token operator">=</span>local_file_path<span class="token punctuation">)</span><span class="token operator">/</span>var<span class="token operator">/</span>tmp<span class="token operator">/</span>100b_scene_output_v032<span class="token punctuation">.</span>mov<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="返回下载附件的url">返回下载附件的URL</span></h3><blockquote><p>Shotgun.get_attachment_download_url(attachment)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Shotgun </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matchmover Tools 帮助文档</title>
      <link href="//tools-help/"/>
      <url>//tools-help/</url>
      
        <content type="html"><![CDATA[<p><strong>Wiki大纲</strong></p><ul><li>优先设置</li><li>层级结构</li><li>mmv工具文档</li><li>3DE插件</li><li>常见疑难问题</li><li>关于seafile</li><li>流程建议</li></ul><p>（右侧导航可以进行定位浏览）</p><p><strong>关于此次更新的一些说明</strong><br>工具在使用功能和界面上没有大的调整和更改，不过底层代码几乎是全部推掉重写了。  </p><p>因为最开始写这个工具时刚接触python不久，现在看来代码结构和语法非常混乱，<br>遇到bug难以进行维护和修改，所以决定对代码进行整体重构，于是就有了这次的更新。</p><p>新的工具会用seafile自动同步到大家的电脑，除了进行下述的“优先设置”外，无需进行其它操作。</p><p>建议的软件版本：</p><ul><li>Maya2017.4 到 Maya2019</li><li>Nuke10.0 到 Nuke11.3</li></ul><p><strong>大家完成下面的优先设置后，就可以正常使用工具了。</strong></p><h1><span id="优先设置">优先设置</span></h1><p> <strong>1.设置自己的软件路径</strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p1.png"></p><p>根据自己电脑上的软件路径填写即可，完成后直接关闭窗口。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p2.png"></p><p><strong>2.修改3DE的插件路径</strong></p><p>3DE插件在seafile同步的目录的这个位置<br><code>..\Seafile\matchmove\matchmover_tools\tde</code></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p3.png"></p><p><strong>3.拷贝distortion插件到nuke目录</strong></p><p>插件位置在这里：<br><code>..\Seafile\matchmove\matchmover_tools\share\distortion_plugins_for_nuke</code></p><p>拷贝对应的nuke版本到:<br><code>C:\Program Files\Nuke11.2v2\plugins</code></p><h1><span id="层级结构">层级结构</span></h1><pre class="line-numbers language-json" data-language="json"><code class="language-json">project path        - shot01            - geo：存放模型            - img：存放畸变图，拍屏序列            - plates：存放原始素材            - publish：存放工程文件，以及提交文件            - task                - 3de：存放3de工程文件                  -export：存放3de导出的mel文件                - syn：存放syn工程文件                - data：存放二维点数据文件                - nuke：存放矫正畸变的nuke文件        - shot02          ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="mmv工具文档">mmv工具文档</span></h1><h2><span id="工具架">工具架</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p4.jpg"></p><ul><li><strong>MMV</strong>：打开右侧的工具集</li><li><strong>Crtl 1</strong>：开启快捷键功能（ctrl+1 调整物体轴向朝向摄像机，alt+2隐藏/显示视图中模型）</li><li><strong>Bake</strong>：快速烘培动画</li><li><strong>Rivet</strong>：选择模型的两个边，添加一个locator</li><li><strong>Get 3D</strong>：在不同的两帧定位locator，获取场景中的一个三维位置</li><li><strong>Split</strong>: 将视图分割为左右两个视图，左边为摄像机视图，右边为透视图</li></ul><h2><span id="菜单栏">菜单栏</span></h2><p>菜单栏分为File，Tools，Setting和About。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p5.png"></p><p><strong>File</strong>里主要是一些打开文件夹的操作</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p6.png"></p><ul><li><strong>Geo</strong>： 打开当前镜头的geo文件夹</li><li><strong>Img</strong>：打开当前镜头的img文件夹</li><li><strong>Plates</strong>：打开当前镜头的plates文件夹</li><li><strong>Task</strong>：打开当前镜头的task文件夹</li><li><strong>Publish</strong>：打开当前镜头的publish文件夹</li></ul><p><strong>Tools</strong>里存放一些不常用的小工具</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p7.jpg"></p><ul><li><strong>Create shots folder</strong><br>创建镜头文件夹层级的工具。  </li></ul><p> <img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p7-1.jpg"></p><ul><li><p><strong>Package Tool</strong><br>打包工具。<br>用于一个Shot完成后，进行打包。  </p></li><li><p><strong>Adjust plate(CC)</strong><br>素材调色工具。<br>选择素材，自动生产调色节点并打开nuke文件。</p></li></ul><p><strong>Setting</strong>  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p8.png"></p><ul><li><strong>Project Setting</strong><br>项目设置，用于设置filmback，fps，文件命名等。<br>{shot}指代当前镜头名，{version}指代版本号，默认是“v001”。<br>Presets的里可以选择一些预设设定。</li></ul><p> <img src="https://cdn.jsdelivr.net/gh/lingyunfx/image@main/tools_wiki11.png"></p><ul><li><strong>Software Setting</strong><br>软件路径设置</li></ul><p> <img src="https://cdn.jsdelivr.net/gh/lingyunfx/image@main/tools_wiki12.png"></p><p><strong>Ahout</strong>  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p9.png"></p><ul><li><strong>Tools wiki</strong>： 打开工具Wiki页面</li></ul><h2><span id="peoject-tools">Peoject Tools</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p10.png"></p><p><strong>Lock</strong><br>锁定/解锁项目路径按钮。当指定路径点击lock后，<br>在Shot Name一栏就会显示指定路径下所有的Shot。<br>（文件夹中包含“plates”文件夹，则判定为一个Shot）</p><p>Shot Name一栏用作切换当前工作的镜头。</p><p><strong>Import和Export</strong></p><p>根据后面所选的类型，进行导入或导出操作。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p11.png"></p><ul><li><strong>Geo</strong>：从当前镜头的geo目录，导入或导出obj模型。</li><li><strong>Assets</strong>：从当前项目路径的Asset文件夹中导入或导出文件。</li><li><strong>3DE</strong>：import是从当前目录下的<code>task/3de/export</code>文件夹从导入mel文件。<br>export是从maya场景从导出camera给3de。</li></ul><p><strong>Open Maya File</strong><br>从当前镜头的Publish中打开Maya文件。</p><p><strong>Save As..</strong><br>另存为Maya文件到当前镜头的Publish文件夹。</p><h2><span id="camera-tools">Camera Tools</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p12.png"></p><p><strong>Replace Cam Images</strong><br>替换摄像机背景素材工具。点击按钮后会弹出选择窗口，<br>窗口里会列出所有plates和img文件夹中的序列帧。<br>双击路径即可进行替换。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p13.png"></p><p><strong>Set Camera</strong><br>将摄像机提出Group外，并继承动画，锁定所有属性，然后重命名。</p><p><strong>Retime</strong><br>变速工具。在弹出的窗口中选择变速节点，点击Run按钮。<br>工具会将Maya场景中，所有动画曲线进行变速。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p14.png"></p><p><strong>Pan to Follow</strong><br>在摄像机视图选择Locator进行居中显示。</p><p><strong>Reset 2D Pan/Zoom</strong><br>还原摄像机视图。</p><h2><span id="object-tools">Object Tools</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p15.png"></p><p><strong>Un Group</strong><br>将选中的物体提出Group，继承动画。  </p><p><strong>Clean Up</strong><br>按照规定的层级结构整理Maya场景。  </p><ul><li>camera会放到最外层级</li><li>locator和锥放到<code>layout/misc/Trackers</code></li><li>mesh模型放到<code>layout/mesh</code>下</li><li>带动画的mesh模型放到<code>layout/ani</code>下</li><li>对于reference资产不会去管</li></ul><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p16.png"></p><p><strong>Export fbx</strong><br>将选中的物体导出为fbx，到<code>geo/export</code>文件夹。</p><p><strong>Export abc</strong><br>将选中的物体导出为abc，到<code>geo/export</code>文件夹。</p><p><strong>Extend Curve</strong><br>动画曲线延伸工具，前面的数值为延伸多少帧。</p><p><strong>Smooth Curve</strong><br>平滑曲线工具。<br>在曲线编辑器中选中曲线，点击Smooth按钮。<br>width为平滑的强度，loop为平滑操作的次数。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p17.png"></p><h2><span id="render-tools">Render Tools</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p18.png"></p><p><strong>Undistort</strong><br>矫正畸变工具。<br>工具会生成nuke文件存放在<code>task/nuke</code>文件夹中。</p><p><strong>Add Cones</strong><br>选择locator添加锥体。</p><p><strong>Add Render Layer</strong><br>添加渲染层，并为这个渲染层所有的物体添加useBackground材质，以到达hideline显示效果。</p><p><strong>Play Blast</strong><br>拍屏工具。<br>Play Blast按钮前面的数值为尺寸缩放比。（比如输入0.5则为半尺寸拍屏）<br>后面为拍屏的格式选择。如果选择mov，在拍屏结束后工具会调用nuke进行序列帧转mov的渲染。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p19.png"></p><p>最下侧的几个勾选项分别为：</p><ul><li>open rv：是否在拍屏结束后打开rv。</li><li>undistort：是否对拍屏进行还原畸变。（如勾选，需要选择dst图）</li><li>ornaments：是否显示摄像机视图的信息。</li></ul><h2><span id="tracking-tools">Tracking Tools</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p20.png"></p><p><strong>Start with</strong><br>开始进行tracking，后面有3DE和SynthEyes两个按钮分别为选择的tracking软件。<br>点击按钮后会弹出素材选择窗口，选择素材后：<br>1.工具会打开相应的软件，指定好背景素材。<br>2.然后根据项目设置，在软件中设置flimback和fps。<br>3.最后在相应路径下保存文件。</p><p>对于3DE，需要在打开软件后，点击Setup按钮进行素材读取。<br>（SynthEyes不需要）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p21.png"></p><p>如果发现对应路径已经存在3de或sni工程文件，则直接打开选择的文件。</p><p><strong>Convert 2D Tracker</strong><br>二维点转换工具。<br>点击按钮后，首先选择二维点，然后选择背景素材（起始帧）。<br>如果勾选了distortion，则再选择stmap。  </p><h2><span id="other-tools">Other Tools</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p22.png"></p><p><strong>Image Rename</strong><br>序列帧批量更名工具。</p><p><strong>Batch Parent</strong><br>批量约束工具。<br>首先在Maya中选择父级物体，其后选择多个子级物体。<br>点击按钮后，父级将会一次对每一个子级进行约束。</p><h1><span id="3de插件">3DE插件</span></h1><p>首先要根据上述的“优先设置”进行3DE插件的安装。  </p><p>一些常用的我放到LingyunFX栏中：<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p23.png"></p><ul><li><strong>Export Maya</strong>：导出文件到Maya。如果有矫正畸变，导出的mel文件已经包含了畸变信息。无需再导出nk lens文件。</li><li><strong>File Open</strong>：从3de目录中打开3de文件。（切记先保存当前文件）</li><li><strong>Save as</strong>：文件另存为到3de目录。</li><li><strong>Setup File</strong>：从Maya打开3de后，进行第一次素材读取操作。</li></ul><p>还有一些工具放在Tools里：<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p24.png"></p><ul><li><strong>Duplicate Point</strong>：复制点工具。首先选择一个带有动画的点，再选择没有动画的二维点，点击工具动画将会拷贝到第二个选择的点上。</li><li><strong>Go to Syntheyes</strong>：跳转Syntheyes工具。工具会自动转将3de的二维点转为syn，然后打开syn软件加载素材，并按照3de设置好filmback和fps。转换后的二维点路径会复制到系统剪切板，在Syn中import 2d point后ctrl+v粘贴路径进行二维点导入即可完成整个步骤。</li></ul><h1><span id="常见疑难问题">常见疑难问题</span></h1><p><code>这个版块会持续更新。</code>  </p><h2><span id="打开右侧工具架报错">打开右侧工具架报错</span></h2><p>如果点mmv按钮，报错且没有弹出工具右侧工具。<br>可以尝试删除工具配置文件。<br>位置：C:\Users{你的用户名}\Documents.ly_tools_config<br>删除里面的文件，重新打开Maya即可。  </p><h2><span id="验证未通过">验证未通过</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p25.png"></p><p>工具在打开MMV工具的时候，会有一次验证。（打开后使用工具就不会有验证了）<br>验证的主要有：</p><ul><li>网络是否联通。（如果网络联通的状态依旧显示验证识别，过30秒再尝试）</li><li>系统时间是否正确。</li><li>使用的版本是否在2017-2019之间。</li></ul><h2><span id="打开maya工具架没有图标按钮">打开Maya工具架没有图标按钮</span></h2><p>这是每当用户关闭maya的时候，maya程序会对shelf文件进行一次重写覆盖操作。<br>比如小红在使用maya2019关闭后，小窝再打开maya2017，工具架上的图标按钮就会不见。<br>（因为每个版本maya的shelf语法有稍许不同，互相不兼容）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p26.jpg"></p><p><strong>解决方法：</strong><br>1.首先关闭maya<br>2.打开seafile，在matchmove资料库右键，选择<strong>重新同步此资料库</strong>。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p27.jpg"></p><p>3.等待同步完成后，删除多余的mel文件。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p28.jpg"></p><p>4.最后选择这个文件右键，点击书写，将它改为只读。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p29.jpg"></p><p>5.这个时候打开maya就可以看到工具架了，关闭maya的时候也不会再影响到这个文件。</p><h2><span id="输入项目路径后点击lock不显示shot">输入项目路径后，点击lock不显示shot</span></h2><p>这次的工具更新，修改了shot的文件夹层级结构。（可参考上述的层级结构说明）<br>将原本的<code>jpg</code>层级改为了<code>plates</code>，当shot的文件夹下有<code>plates</code>文件夹，工具才会认作它是一个shot。</p><h1><span id="关于seafile">关于Seafile</span></h1><p>Seafile是一个文件夹同步工具，类似于之前使用的OneDrive。<br>搭建的这个服务是租用的一个香港云主机，所以同步速度是非常快的。</p><p>我们所使用的是seafile开源社区版（阉割版），无法设置用户权限，大家默认的权限是只读。<br>意味着<strong>只有管理员可以在文件夹中进行增删操作</strong>。<br>所以<strong>无法达到文件分享的作用</strong>。</p><h1><span id="流程建议">流程建议</span></h1><p>下面是开始一个新项目，工具使用的流程说明。</p><p><strong>1.批量输出Plates</strong><br>一般外包项目会发来mov的原始素材，首先要进行mov转序列帧输出，并建立文件夹层级。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p7-1.jpg"></p><p><strong>2.项目配置</strong><br>在菜单栏Project Setting里，设置这个项目的filmback和fps。</p><p><strong>3.设置项目路径</strong><br>将项目路径输入到下面的输入框中，然后点击lock按钮锁定。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p31.png"></p><p>选择对应的Shot开始跟踪。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p32.png"></p><p><strong>4.打开跟踪软件</strong>   </p><p>点击对应的跟踪软件开始跟踪。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p33.png"></p><p>如果是3DE需要多一个步骤进行素材加载。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p34.png"></p><p><strong>5.完成跟踪导出</strong><br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p35.png"></p><p>如果有矫正畸变，导出的mel文件已经包含了畸变信息。无需再导出nk lens文件。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p36.png"></p><p><strong>6.Maya导入文件</strong><br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p37.png"></p><p>导入文件后先进行save保存。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p38.png"></p><p>如果有畸变则点击Undistort工具矫正畸变。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/tools-help/p39.png"></p><p>后续的操作就是整理文件提交，这里暂时不赘述了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maya Command 代码段</title>
      <link href="//maya-cmds-example/"/>
      <url>//maya-cmds-example/</url>
      
        <content type="html"><![CDATA[<h1><span id="动画相关">动画相关</span></h1><h2><span id="获取物体有多少个关键帧">获取物体有多少个关键帧</span></h2><p><code>cmds.keyframe(name, q=True, keyframeCount=True)</code></p><h2><span id="获取物体第一个动画帧帧数">获取物体第一个动画帧帧数</span></h2><p><code>cmds.findKeyframe(name, which=&#39;first&#39;)</code></p><h2><span id="获取物体最后一个动画帧帧数">获取物体最后一个动画帧帧数</span></h2><p><code>cmds.findKeyframe(name, which=&#39;last&#39;)</code></p><h2><span id="修复乱轴曲线">修复乱轴曲线</span></h2><p><code>cmds.filterCurve(name_list)</code></p><h2><span id="复制粘贴单个指定属性动画">复制粘贴单个指定属性动画</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这里是复制摄像机焦距动画</span>cmds<span class="token punctuation">.</span>copyKey<span class="token punctuation">(</span>cam<span class="token punctuation">,</span> at<span class="token operator">=</span><span class="token string">'fl'</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>pasteKey<span class="token punctuation">(</span>dup_cam<span class="token punctuation">,</span> at<span class="token operator">=</span><span class="token string">'fl'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="显示层">显示层</span></h1><h2><span id="设置显示层的颜色">设置显示层的颜色</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>layerName<span class="token operator">+</span><span class="token string">'.color'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>dag<span class="token operator">+</span><span class="token string">'.overrideEnabled'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>dag<span class="token operator">+</span><span class="token string">'.overrideColor'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="列出跟物体连接的显示层">列出跟物体连接的显示层</span></h2><p><code>cmds.listConnections(dag, s=True, t=&#39;displayLayer&#39;)</code></p><h1><span id="物体对象">物体对象</span></h1><h2><span id="求不规则物体的长宽高">求不规则物体的长宽高</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">box <span class="token operator">=</span> cmds<span class="token punctuation">.</span>exactWorldBoundingBox<span class="token punctuation">(</span>cmds<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>width_x <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>height_y <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>depth_z <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="创建一条曲线">创建一条曲线</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需提供一个点位置列表</span>position <span class="token operator">=</span> cmds<span class="token punctuation">.</span>xform<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> worldSpace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>curve<span class="token punctuation">(</span>p<span class="token operator">=</span>position<span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="求曲线长度">求曲线长度</span></h2><p><code>cmds.arclen(curve)</code></p><h2><span id="根据两条曲线创建模型">根据两条曲线创建模型</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cmds<span class="token punctuation">.</span>nurbsToPolygonsPref<span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>loft<span class="token punctuation">(</span>curve1<span class="token punctuation">,</span> curve2<span class="token punctuation">,</span> ch<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> po<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> rsn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>name<span class="token operator">+</span><span class="token string">'_path'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="获取物体属性列表">获取物体属性列表</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cmds<span class="token punctuation">.</span>findKeyframe<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> curve<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>listAttr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> u<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="获取选中模型点的位置">获取选中模型点的位置</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">sel_vtx <span class="token operator">=</span> cmds<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>vtx_position <span class="token operator">=</span> cmds<span class="token punctuation">.</span>pointPosition<span class="token punctuation">(</span>sel_vtx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="视图">视图</span></h1><h2><span id="获取拍屏激活的视图名">获取拍屏激活的视图名</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cmds<span class="token punctuation">.</span>playblast<span class="token punctuation">(</span>activeEditor<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>playblast<span class="token punctuation">(</span>activeEditor<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 得到实际名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="命名空间">命名空间</span></h1><h2><span id="获取命名空间列表">获取命名空间列表</span></h2><p><code>namespace_list = cmds.namespaceInfo(recurse=True, listOnlyNamespace=True)</code></p><h2><span id="删除指定的命名空间">删除指定的命名空间</span></h2><p><code>cmds.namespace(moveNamespace=(&#39;:&#39; + namespace_list[-1], &#39;:&#39;), force=True)</code></p><h1><span id="摄像机">摄像机</span></h1><h2><span id="为摄像机添加素材">为摄像机添加素材</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.得到摄像机的名字和形状节点</span>cam <span class="token operator">=</span> cmds<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  camShape <span class="token operator">=</span> listRelatives<span class="token punctuation">(</span>cam<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 2.得到指定物所有连接节点的列表</span>image_plane <span class="token operator">=</span> cmds<span class="token punctuation">.</span>listConnections<span class="token punctuation">(</span>camShape<span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">'imagePlane'</span><span class="token punctuation">)</span><span class="token comment"># 3.检查是否有image节点，如果没有创建</span><span class="token keyword">if</span> image_plane<span class="token punctuation">:</span>   imp <span class="token operator">=</span> image_plane<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>   imp <span class="token operator">=</span> cmds<span class="token punctuation">.</span>shadingNode<span class="token punctuation">(</span><span class="token string">'imagePlane'</span><span class="token punctuation">,</span> asUtility<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 4.连接属性到摄像机</span>cmds<span class="token punctuation">.</span>connectAttr<span class="token punctuation">(</span>imp <span class="token operator">+</span> <span class="token string">'.message'</span><span class="token punctuation">,</span> camShape <span class="token operator">+</span> <span class="token string">'.imagePlane'</span><span class="token punctuation">,</span> nextAvailable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>imagePlane<span class="token punctuation">(</span>imp<span class="token punctuation">,</span> edit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> camera<span class="token operator">=</span>camShape<span class="token punctuation">)</span><span class="token comment"># 5.素材指定给摄像机, 开启素材帧序列动画</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span> <span class="token string">'.imageName'</span><span class="token punctuation">,</span> image_seq<span class="token punctuation">,</span> tyoe<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp <span class="token operator">+</span> <span class="token string">'.useFrameExtension'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="摄像机额外属性设置">摄像机额外属性设置</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.lockedToCamera'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.sizeX'</span><span class="token punctuation">,</span> cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span>camShape<span class="token operator">+</span><span class="token string">'.horizontalFilmAperture'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.sizeY'</span><span class="token punctuation">,</span> cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span>camShape<span class="token operator">+</span><span class="token string">'.verticalFilmAperture'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.width'</span><span class="token punctuation">,</span> cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span>camShape<span class="token operator">+</span><span class="token string">'.orthographicWidth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.height'</span><span class="token punctuation">,</span> cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span>camShape<span class="token operator">+</span><span class="token string">'.orthographicHeight'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.depth'</span><span class="token punctuation">,</span>  <span class="token number">5000</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.displayOnlyIfCurrent'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.displayMode'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.frameCache'</span><span class="token punctuation">,</span> seq_time<span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>imp<span class="token operator">+</span><span class="token string">'.fit'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="为摄像机创建地平线">为摄像机创建地平线</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">horizon <span class="token operator">=</span> cmds<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>normal<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'horizon_curve1'</span><span class="token punctuation">,</span> constructionHistory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cmds<span class="token punctuation">.</span>pointConstraint<span class="token punctuation">(</span>cam<span class="token punctuation">,</span> horizon<span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>addAttr<span class="token punctuation">(</span>horizon<span class="token punctuation">,</span> longName<span class="token operator">=</span><span class="token string">'camera'</span><span class="token punctuation">,</span> attributeType<span class="token operator">=</span><span class="token string">'message'</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>horizon <span class="token operator">+</span> <span class="token string">'.overrideEnabled'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>horizon <span class="token operator">+</span> <span class="token string">'.overrideColor'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>connectAttr<span class="token punctuation">(</span>cam <span class="token operator">+</span> <span class="token string">'.message'</span><span class="token punctuation">,</span> horizon <span class="token operator">+</span> <span class="token string">'.camera'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="操作">操作</span></h1><h2><span id="记录撤销操作还原">记录撤销操作还原</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cmds<span class="token punctuation">.</span>undoInfo<span class="token punctuation">(</span>openChunk<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>cmds<span class="token punctuation">.</span>undoInfo<span class="token punctuation">(</span>closeChunk<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建Cloudreve私有云盘</title>
      <link href="//cloudreve-install/"/>
      <url>//cloudreve-install/</url>
      
        <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>对于网盘来说现在最普及的就是百度云盘，不过很不喜欢百度盘的一点是：<br>分享一个文件给朋友，对方必须使用百度云客户端才可以下载，而且百度云对于资源会进行审核。</p><p>这个时候就希望一个网盘能实现：<br>1.发送给对方分享链接<br>2.对方点击链接，直接下载<br>（且下载速度不受限，文件内容不被监管）</p><p>这就需要搭建一个私有的个人网盘，并满足上述的需求。<br>于是Cloudreve诞生了。</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p1.png" width="80%" height="80%" alt align="center"></left>  </p><p>私有网盘的优势是，所有文件都在自己的服务器上，更安全可靠，自由度更高。<br>那么搭建个人网盘的条件是什么？</p><ul><li>一点linux基础</li><li>一台云主机</li></ul><p>下面就为大家介绍cloudreve，并讲解如何搭建cloudreve服务。</p><h2><span id="cloudreve介绍">Cloudreve介绍</span></h2><p>Cloudreve是一个开源的网盘系统，它具有如下特性：</p><ul><li>网页端直接上传/下载。</li><li>支持离线下载</li><li>支持WebDAV协议</li><li>多用户组，用户管理，支持用户注册</li><li>视频，图片，音频，文本，office文档在线预览</li><li>支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive作为存储端</li><li>等等等…</li></ul><p><strong>cloudreve的主页</strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p2.png"></p><p><strong>后台配置页面</strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p3.png"></p><p>更多了解可以访问它的github主页：<br><a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p><p><strong>支持WebDAV</strong><br>除了上传分享文件外，笔者最常用的就是将cloudreve网盘挂载成一个网络驱动器。  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p4.png" width="80%" height="80%" alt align="center"></left>  </p><p>首先为朋友的电脑挂上这个网络驱动器（因为cloudreve支持WebDAV）。<br>每次要分享文件的时候，只需要将文件拷贝进去。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p5.gif"></p><p>对方就可以在他的电脑上打开这个盘，拿走文件。</p><h2><span id="搭建cloudreve">搭建Cloudreve</span></h2><p>搭建这样的一个网盘，肯定需要一台云服务器。<br>（其实就是一台配有公网ip的电脑主机）</p><p>笔者是在腾讯云租的<strong>lightroom轻量应用服务器</strong>。<br>其它的如阿里云，华为云，国外的一些云服务器厂商也都ok。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p6.png"></p><p>这里我选用的是香港地区，CentOS8.0系统。<br>一个最便宜的资费套餐。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p7.png"></p><p>进入控制台，找到公网ip，并重置一下密码。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p8.png"></p><p>我使用的是MobaXterm这款软件进行ssh连接（贼好用）。<br>然后就开始命令行环节了。</p><h3><span id="准备cloudreve程序">准备cloudreve程序</span></h3><p>从这里找到最新的版本：<br><a href="https://github.com/cloudreve/Cloudreve/releases">https://github.com/cloudreve/Cloudreve/releases</a></p><p>我用的是CentOS，x86架构，所以这里选择amd64版本。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p9.png"></p><p>鼠标右键复制链接地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载cloudreve主程序，wget后面是刚刚复制的地址</span><span class="token function">wget</span> https://github.com/cloudreve/Cloudreve/releases/download/3.3.1/cloudreve_3.3.1_linux_amd64.tar.gz<span class="token comment"># 解压</span><span class="token function">tar</span> xvf cloudreve_3.3.1_linux_amd64.tar.gz<span class="token comment"># 复制到指定位置</span><span class="token function">cp</span> cloudreve /usr/bin/cloudreve<span class="token comment"># 给予可执行权限</span><span class="token function">chmod</span> <span class="token number">755</span> /usr/bin/cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="安装配置mysql">安装配置mysql</span></h3><p>默认情况下，Cloudreve会使用内置的SQLite数据库。笔者建议使用mysql。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装mysql</span>yum <span class="token function">install</span> mysql-server<span class="token comment"># 启动mysql</span>systemctl start mysqld.service<span class="token comment"># 进入到mysql交互界面</span>mysql<span class="token comment"># 设置root密码</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'你的密码'</span><span class="token punctuation">;</span><span class="token comment"># 创建用户</span>CREATE <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'你的密码'</span><span class="token punctuation">;</span><span class="token comment"># 开启root远程访问</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> WITH GRANT OPTION<span class="token punctuation">;</span><span class="token comment"># 刷新设置</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span class="token comment"># 退出交互界面</span><span class="token builtin class-name">exit</span><span class="token comment"># 重启mysql服务</span>systemctl restart mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql默认运行在3306端口，我们需要将它配置给cloudreve。<br>新建一个文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/cloudreve.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入下面的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Database<span class="token punctuation">]</span><span class="token punctuation">;</span> 数据库类型，目前支持 sqlite <span class="token operator">|</span> mysqlType <span class="token operator">=</span> mysql<span class="token punctuation">;</span> MySQL 端口Port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">;</span> 用户名,根据自己情况修改User <span class="token operator">=</span> root<span class="token punctuation">;</span> 密码,根据自己情况修改Password <span class="token operator">=</span> <span class="token string">"mysql的root密码"</span><span class="token punctuation">;</span> 数据库地址,根据自己情况修改Host <span class="token operator">=</span> <span class="token number">127.0</span>.0.1<span class="token punctuation">;</span> 数据库名称,根据自己情况修改Name <span class="token operator">=</span> mysql<span class="token punctuation">;</span> 数据表前缀TablePrefix <span class="token operator">=</span> <span class="token builtin class-name">cd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="进行测试">进行测试</span></h3><p>这个时候cloudreve服务就已经配置好了。<br>输入下面的命令启动它：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用刚刚创建的配置文件启动</span>cloudreve -c /etc/cloudreve.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到终端里输出的信息，初始的账户和密码。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p10.png"></p><p>它运行在5212端口，打开浏览器，输入你的服务器”公网ip:5212”，回车。<br>输入刚刚显示的账户和密码就可以登陆了：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p11.png"></p><p>然后我们需要为它加上一个域名和https，还有aria2（用作离线下载）。</p><h3><span id="域名解析">域名解析</span></h3><p>我是在namecheap购买的域名和解析，<br>添加一条A记录输入你的公网ip即可。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p12.png"></p><h3><span id="配置ssl">配置ssl</span></h3><blockquote><p>网站没有一个小锁是不好看的  </p></blockquote><p>有了ssl证书，网站才会是https协议。<br>我使用的是acme来申请的证书。<br>首先从安装nginx开始：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装nginx</span>yum <span class="token function">install</span> nginx<span class="token comment"># 安装acme的依赖</span>yum <span class="token function">install</span> opensslyum <span class="token function">install</span> socatyum <span class="token function">install</span> netcat<span class="token comment"># 下载acme</span><span class="token function">curl</span>  https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 生成证书（在这一步前一定要完成域名解析）</span><span class="token builtin class-name">cd</span> .acme.sh/./acme.sh --issue -d cloud.lingyunfx.com --standalone -k ec-256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看到终端输出的证书和密钥位置：<br>（记下来！）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p13.png"></p><p>配置nginx：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在此之前新建一个目录</span><span class="token function">mkdir</span> -p /www/log/<span class="token comment"># 新建一个配置文件</span><span class="token function">vim</span> /etc/nginx/conf.d/default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容如下（有四个地方需要根据自己的情况进行替换）</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">server<span class="token punctuation">&#123;</span>listen <span class="token number">80</span>;listen <span class="token number">443</span> ssl http2;server_name cloud.lingyunfx.com;       # 这里替换自己的域名if ($host != 'cloud.lingyunfx.com')<span class="token punctuation">&#123;</span>   # 这里替换自己的域名return <span class="token number">403</span>;<span class="token punctuation">&#125;</span>if ($server_port = <span class="token number">80</span> ) <span class="token punctuation">&#123;</span>return <span class="token number">301</span> https<span class="token operator">:</span><span class="token comment">//$host$request_uri;</span><span class="token punctuation">&#125;</span>index index.php index.html index.htm default.php default.htm default.html;location / <span class="token punctuation">&#123;</span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header Host $http_host;    proxy_redirect off;    proxy_pass http<span class="token operator">:</span><span class="token comment">//127.0.0.1:5212;</span>    client_max_body_size 4000m;        # 这里限制了单个文件上传的大小<span class="token punctuation">&#125;</span>#SSL-START SSL相关配置，请勿删除或修改下一行带注释的<span class="token number">404</span>规则#error_page <span class="token number">404</span>/<span class="token number">404</span>.html;ssl_certificate /root/.acme.sh/cloud.lingyunfx.com_ecc/cloud.lingyunfx.com.cer;     # 这里是你的证书地址ssl_certificate_key /root/.acme.sh/cloud.lingyunfx.com_ecc/cloud.lingyunfx.com.key; # 这里是你的密钥路径ssl_protocols TLSv1.<span class="token number">1</span> TLSv1.<span class="token number">2</span> TLSv1.<span class="token number">3</span>;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256<span class="token operator">:</span>HIGH<span class="token operator">:</span>!aNULL<span class="token operator">:</span>!MD5<span class="token operator">:</span>!RC4<span class="token operator">:</span>!DHE;ssl_prefer_server_ciphers on;ssl_session_cache shared<span class="token operator">:</span>SSL<span class="token operator">:</span>10m;ssl_session_timeout 10m;#SSL-END#禁止访问的文件或目录location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)<span class="token punctuation">&#123;</span>    return <span class="token number">404</span>;<span class="token punctuation">&#125;</span>access_log  /www/log/access.log;error_log  /www/log/error.log;<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后启动nginx。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次启动cloudreve服务进行验证。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cloudreve -c /etc/cloudreve.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在可以看到网站上有美丽的小锁了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p14.png"></p><h3><span id="配置aria2">配置aria2</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装</span>yum <span class="token function">install</span> aria2<span class="token comment"># 新建一个配置文件</span><span class="token function">mkdir</span> /etc/aria2<span class="token function">vim</span> /etc/aria2/aria2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写入下面内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#是否启用RPC服务，请设置为true</span>enable-rpc<span class="token operator">=</span>true<span class="token comment">#RPC服务的端口，默认为6800</span>rpc-listen-port<span class="token operator">=</span><span class="token number">6800</span><span class="token comment">#设置PRC服务的密钥，在接下来的步骤中会用到</span>rpc-secret<span class="token operator">=</span>my_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面rpc-secret后面是你对接aria2的密码，自己改一个。</p><p>然后建立并配置aria2服务。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /usr/lib/systemd/system/aria2.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>aria2c<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/aria2c --conf-path<span class="token operator">=</span>/etc/aria2/aria2.conf<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abort<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载daemon，启动服务。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> aria2systemctl start aria2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后需要cloudreve网页端配置aria2。<br>首先启动cloudreve程序。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cloudreve -c /etc/cloudreve.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录后在网站右上角进入管理面板</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p15.png" width="50%" height="50%" alt align="center"></left>  </p><p>进行如下设置。<br>可以参考官方的wiki：<a href="https://docs.cloudreve.org/use/aria2">https://docs.cloudreve.org/use/aria2</a></p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p16.png" width="75%" height="75%" alt align="center"></left>  </p><p>到了这里离线下载的功能就配置好了。</p><h3><span id="配置cloudreve开机启动">配置cloudreve开机启动</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /usr/lib/systemd/system/cloudreve.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Cloudreve<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>https://docs.cloudreve.org<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token assign-left variable">Wants</span><span class="token operator">=</span>network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/cloudreve -c /etc/cloudreve.conf<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abnormal<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span>5s<span class="token assign-left variable">KillMode</span><span class="token operator">=</span>mixed<span class="token assign-left variable">StandardOutput</span><span class="token operator">=</span>null<span class="token assign-left variable">StandardError</span><span class="token operator">=</span>syslog<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后更新并启动服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 更新配置</span>systemctl daemon-reload<span class="token comment"># 启动服务</span>systemctl start cloudreve<span class="token comment"># 设置开机启动</span>systemctl <span class="token builtin class-name">enable</span> cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里就完成了！</p><h2><span id="挂载网络驱动器">挂载网络驱动器</span></h2><p>最后说一下怎么把网盘挂载成一个网络驱动器。</p><p>我用的是一个叫raidrive的软件进行辅助挂载。windows自身也可以直接进行挂载，<br>不过这个软件有本地缓存的帮助，访问会流畅很多。</p><p>下载地址：<br><a href="https://www.raidrive.com/download">https://www.raidrive.com/download</a></p><p>下载后双击安装，这里进行配置即可  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p17.png" width="70%" height="70%" alt align="center"></left>  </p><p>账户密码在这个页面获取</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/cloudreve-install/p18.png"></p><hr><p>这篇文章差不多就到这里，觉得还不错可以关注下这个公众号，thx！  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> Cloudreve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python3的一些新特性</title>
      <link href="//py2py3/"/>
      <url>//py2py3/</url>
      
        <content type="html"><![CDATA[<p>最近开发的工具不用依赖DCC软件，索性就开始使用最新的python3.8（现在好像到3.9了）<br>踩了一些坑，在实践中知晓了从python2到python3的一些变化和不同。<br>然后就整理了一些python3的新特性。<br>（下面的内容在py3.8测试ok，有些是3.5或者3.7之后才开放的特性）</p><h3><span id="语句变成函数">语句变成函数</span></h3><p><code>print</code>语句在python3里变成了<code>print()</code>函数。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2</span><span class="token keyword">print</span> <span class="token string">'hello pig!'</span><span class="token comment"># python3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello pig'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>raise</code>语句。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2</span><span class="token keyword">raise</span> Exception<span class="token punctuation">,</span> <span class="token string">'I made a mistake.'</span><span class="token comment"># python3</span><span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'I made a mistake.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然还有<code>exec()</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2</span><span class="token keyword">exec</span> <span class="token string">'print("Hello World")'</span><span class="token comment"># python3</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'print("Hello World")'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="除法">除法</span></h3><p>python2中<code>/</code>的结果是整型，python3中是浮点类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2</span><span class="token keyword">print</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span><span class="token comment"># python3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="允许数值下划线">允许数值下划线</span></h3><p>为了提高多位数字的可读性，可以这样写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1_000_000_000_000</span> <span class="token comment"># 等同于 1000000000000</span>b <span class="token operator">=</span> <span class="token number">0x_FF_FF_FF_FF</span> <span class="token comment"># 等同于 4294967295</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="字典保持顺序">字典保持顺序</span></h3><p>现在的字典是有序的了，不需要再调用<code>collections.OrderedDict</code>来生成有序字典了。</p><h3><span id="类似迭代器的返回值">类似迭代器的返回值</span></h3><p>在python3中，之前返回列表的内置函数，比如<code>map</code>,<code>range</code>,<code>zip</code>,<code>filter</code>等等。<br>它们的返回值都变成了类似迭代器的对象。（这种懒加载方式为了性能考虑）</p><p>这里以map来举例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token comment"># python3</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token builtin">map</span> at <span class="token number">0x7ff2989a0910</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：字典里的<code>dict.keys()</code>,<code>dict.values()</code>,<code>dict.items()</code>在python3里也不会返回列表了，<br>同样返回的是一个类似迭代器的对象。(字典的<code>dict.iteritems()</code>方法没有了)</p><h3><span id="except语句">except语句</span></h3><p><code>except</code>语句的轻微改变，<br>捕获异常必须使用<code>except...as...</code>的格式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span> e<span class="token comment"># python3</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="赋值表达式">赋值表达式</span></h3><p>优点是可以防止多次计算重复值和可以写赋值表达式。<br>（其实就是为了少写一行，有点鸡肋的特性）</p><p>比如这样一段代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redata <span class="token operator">=</span> <span class="token string">"check123out"</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"(\d+)"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">if</span> match<span class="token punctuation">:</span>    num <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用赋值表达式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redata <span class="token operator">=</span> <span class="token string">"check123out"</span><span class="token keyword">if</span> match <span class="token punctuation">:</span><span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"(\d+)"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 这里进行了简化</span>    num <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="类型标注">类型标注</span></h3><p>比如声明一个函数时，标注其参数和返回值的类型。<br><strong>注意</strong>：它只起到标注作用（增加代码可读性），python并不会真的限制其类型。  </p><p>一个简单的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello '</span> <span class="token operator">+</span> name<span class="token keyword">def</span> <span class="token function">plus</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型标准支持别名，可以用它来简化一些复杂的类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token punctuation">,</span> Tuple<span class="token punctuation">,</span> Sequence<span class="token keyword">def</span> <span class="token function">broadcast_message</span><span class="token punctuation">(</span>        message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>        servers<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 可以使用别名简化为</span>ConnectionOptions <span class="token operator">=</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span>Address <span class="token operator">=</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span>Server <span class="token operator">=</span> Tuple<span class="token punctuation">[</span>Address<span class="token punctuation">,</span> ConnectionOptions<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">broadcast_message</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> servers<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span>Server<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然万物皆是对象的python，函数也可以成为其标注的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token keyword">def</span> <span class="token function">get_regex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">regex</span><span class="token punctuation">(</span>pattern<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> re    <span class="token keyword">return</span> regex<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量也可以标注类型，这样就可以先声明类型，再进行赋值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在python3.7后，我们可以使用dataclass来简化声明类的时，标记类型的写法。<br>(这是真好用！)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 之前的写法</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> Tuple<span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> phone<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> location<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token comment"># 使用dataclass写法</span><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass<span class="token keyword">from</span> typing <span class="token keyword">import</span> Tuple<span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>dataclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    phone<span class="token punctuation">:</span> <span class="token builtin">int</span>    location<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/</a></p><h3><span id="格式化字符串">格式化字符串</span></h3><p>可以不用<code>format</code>了！</p><p>一个简单的用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Han Meimei"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"My name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> My name <span class="token keyword">is</span> Han Meimei<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>支持函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'result=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> result<span class="token operator">=</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用做十进制转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">value <span class="token operator">=</span> <span class="token number">1234</span><span class="token string-interpolation"><span class="token string">f'input=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span><span class="token format-spec">#06x</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'input=0x04d2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用来格式化日期</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>date<span class="token punctuation">&#125;</span></span><span class="token string"> was on a </span><span class="token interpolation"><span class="token punctuation">&#123;</span>date<span class="token punctuation">:</span><span class="token format-spec">%A</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'1991-10-12 was on a Saturday'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以这样嵌套来限制字符宽度和数字的长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> decimalwidth <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment"># value部分的总长度，左边空格填充</span>precision <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment"># 数字的总长度，这里即保留小数点后两位</span>value <span class="token operator">=</span> decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">'12.34567'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'result: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span><span class="token punctuation">&#123;</span>width<span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>precision<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> result<span class="token punctuation">:</span>      <span class="token number">12.35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持<code>=</code>符号，来打印可读性的输出：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pos_x <span class="token operator">=</span> <span class="token number">1.0</span>pos_y <span class="token operator">=</span> <span class="token number">2.0</span>pos_z <span class="token operator">=</span> <span class="token number">3.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The xyz value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pos_x<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pos_y<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pos_z<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> The xyz value<span class="token punctuation">:</span> pos_x<span class="token operator">=</span><span class="token number">1.0</span> pos_y<span class="token operator">=</span><span class="token number">2.0</span> pos_z<span class="token operator">=</span><span class="token number">3.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://www.python.org/dev/peps/pep-0498/">https://www.python.org/dev/peps/pep-0498/</a></p><h3><span id="虚拟变量">虚拟变量</span></h3><p>在python2中，运行下面的代码，变量i是会被打印出来的。  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而在python3中就会触发错误：<code>NameError: name &#39;i&#39; is not defined</code></p><h3><span id="断点调试">断点调试</span></h3><p>之前设置断点都是通过诸如pycharm之类的IDE来设置。<br>在python3.6之前，也许会使用<code>import pdb; pdb.set_trace()</code>。</p><p>现在可以在代码里通过函数<code>breakpoint()</code>来设置断点。<br>比如下面这段会导致<code>ZeroDivisionError</code>代码：  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f <span class="token operator">/</span> ea<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加<code>breakpoint()</code>函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    breakpoint<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> f <span class="token operator">/</span> ea<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调试完成后，可以注释掉所有的<code>breakpoint()</code>代码，也可以设置环境变量<code>PYTHONBREAKPOINT</code>为0，python将会忽略所有<code>breakpoint()</code>的调用。</p><h3><span id="模块重载">模块重载</span></h3><p>python3中的reload被替换成了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> spam<span class="token keyword">import</span> impimp<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span>spam<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>（持续更新...）</center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maya常用环境变量</title>
      <link href="//maya-env-varibles/"/>
      <url>//maya-env-varibles/</url>
      
        <content type="html"><![CDATA[<p>收集一些常用的Maya环境变量，方便用的时候查。<br>有关PATH的变量，Mac OS X中使用<code>:</code>分隔，Windows和Linux中使用<code>;</code>分隔。</p><table><thead><tr><th align="left">Variable</th><th>Description</th></tr></thead><tbody><tr><td align="left"><code>MAYA_IGNORE_DIALOGS    </code></td><td>打开maya场景禁止弹出警告框</td></tr><tr><td align="left"><code>MAYA_DISABLE_CLIC_IPM</code></td><td>禁用Cloud登陆</td></tr><tr><td align="left"><code>MAYA_DISABLE_CIP</code></td><td>禁用CIP（客户参与计划）</td></tr><tr><td align="left"><code>MAYA_DISABLE_CER</code></td><td>禁用CER（客户错误报告）</td></tr><tr><td align="left"><code>MAYA_NO_CONSOLE_WINDOW</code></td><td>隐藏启动时的控制台窗口</td></tr><tr><td align="left"><code>MAYA_CMD_FILE_OUTPUT</code></td><td>在启动时启用cmdFileOutput命令，使脚本辑器中的内容自动输出到指定文件</td></tr><tr><td align="left"><code>MAYA_MODULE_PATH</code></td><td>定义maya模块的搜索路径（*.mod ）</td></tr><tr><td align="left"><code>MAYA_PLUG_IN_PATH</code></td><td>定义maya插件搜索路径（*.py *.mll *.so *.bundle ）</td></tr><tr><td align="left"><code>MAYA_SCRIPT_PATH</code></td><td>定义mel脚本搜索路径（*.mel ）</td></tr><tr><td align="left"><code>MAYA_PRESET_PATH</code></td><td>定义预设路径</td></tr><tr><td align="left"><code>MAYA_SHELF_PATH</code></td><td>工具架目录（*.mel）</td></tr><tr><td align="left"><code>MAYA_MOVIE_DIR</code></td><td>存储movie文件的目录（默认为$MAYA_LOCATION/movies）</td></tr><tr><td align="left"><code>MAYA_PROJECT</code></td><td>maya项目目录</td></tr><tr><td align="left"><code>MAYA_DEBUG_ENABLE_CRASH_REPORTING</code></td><td>maya崩溃时写入日志 MayaCrashLog[yymmdd.hhmm].log</td></tr><tr><td align="left"><code>MAYA_UI_LANGUAGE</code></td><td>UI语言（zh_CN，en_US，ja_JP）</td></tr><tr><td align="left"><code>MAYA_USE_MALLOC</code></td><td>如果在加载大型场景时maya遇到问题而意外关闭，尝试将此环境变量设置为1。不过，如果设置此环境变量，则在选择”文件 &gt; 新建”(File &gt; New)时Maya不会释放使用的内存；只在退出maya时释放。</td></tr><tr><td align="left"><code>MAYA_ENABLE_LEGACY_RENDER_LAYERS</code></td><td>mayas是否使用render layer(1) 或新版的render setup(0)</td></tr><tr><td align="left"><code>MAYA_VP2_USE_GPU_MAX_TARGET_SIZE</code></td><td>允许Viewport2.0 渲染大于4K</td></tr><tr><td align="left"><code>PYTHONPATH</code></td><td>定义python文件搜索路径</td></tr><tr><td align="left"><code>TMPDIR/Temp</code></td><td>指定Maya用于各种临时文件的目录</td></tr><tr><td align="left"><code>XBMLANGPATH</code></td><td>定义图标文件位置</td></tr></tbody></table><p>更多的看<a href="https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-EnvVar/files/GUID-228CCA33-4AFE-4380-8C3D-18D23F7EAC72-htm.html">官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rez介绍（使用篇）</title>
      <link href="//rez-intro/"/>
      <url>//rez-intro/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>这篇文章讲下rez的使用，根据最近所得谈谈自己的理解。<br>开始之前补充一些rez工具的背景和特性。  </p><p>rez最开始是Dr.D Studio于2011年用python写的依赖解算器，于2012年开源。<br>之后的V2版本几乎重写，变成一个完整的API。<br>具有跨平台，支持多种shell环境，基于python的包格式定义等特性。</p><p>它是针对视效工作室流程开发的工具：</p><ul><li>在项目中，配置不同版本的dcc软件，插件以及环境（并且可以灵活动态的进行增减）</li><li>快速适应不同类型的部署工作（比如不同方案需要不同的渲染流程）</li><li>在出现问题的时候，可以快速回溯到上一个流程环境</li><li>能快速测试尚未投入生产的产品</li><li>Pipeline不受到迁移操作系统等事件的影响</li><li>尽量减少开发人员对制作的时间占用</li></ul><p>以上资料来自Open Source Day中关于rez的一期：<br><a href="https://youtu.be/y5VSPeeqJbM">https://youtu.be/y5VSPeeqJbM</a></p><h1><span id="配置">配置</span></h1><p>rez是跨平台的，为了方便这里用macOS进行演示。<br>（类UNIX系统命令行操作友好一些）</p><p>安装的部分就跳过了，开始基本的配置。<br>默认配置文件的位置是rez安装目录下<code>rezconfig.py</code>文件。<br>为了能够进行统一设置，这个配置文件最好也是在服务器上，所以首先更改rez配置文件路径。<br>官方推荐的方式是设置<code>REZ_CONFIG_FILE</code>环境变量指向配置文件路径。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 写入环境变量</span>ehco <span class="token string">"export REZ_CONFIG_FILE=<span class="token variable"><span class="token variable">`</span>/Library/smb_server/rezconfig.py<span class="token variable">`</span></span>"</span><span class="token operator">>></span>.bash_profile<span class="token builtin class-name">source</span> .bash_profile<span class="token comment"># 验证是否返回了正确的路径</span><span class="token builtin class-name">echo</span> <span class="token variable">$REZ_CONFIG_FILE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们要将包存储库放在共享的服务器上，以便于任何一台PC机都可以访问它。<br>下面是对<code>rezconfig.py</code>文件的修改：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">packages_path = <span class="token punctuation">[</span>    <span class="token string">"~/packages"</span><span class="token punctuation">,</span>           # locally installed pkgs<span class="token punctuation">,</span> not yet deployed    <span class="token string">"~/.rez/packages/int"</span><span class="token punctuation">,</span>  # internally developed pkgs<span class="token punctuation">,</span> deployed    <span class="token string">"~/.rez/packages/ext"</span><span class="token punctuation">,</span>  # external (3rd party) pkgs<span class="token punctuation">,</span> such as houdini<span class="token punctuation">,</span> boost    <span class="token string">"/Library/smb_server/dcc"</span><span class="token punctuation">,</span>                      <span class="token string">"/Library/smb_server/plug-ins"</span><span class="token punctuation">,</span>                   <span class="token string">"/Library/smb_server/third-lib"</span><span class="token punctuation">,</span>    <span class="token string">"/Library/smb_server/tools"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比默认的配置，这里在列表后面添加了四个路径，<br>分别存放DCC软件包，DCC插件包，第三方库，和自定义工具包。  </p><p>设置完成后执行<code>rez-config packages_path</code>查看是否配置已经更新。</p><h1><span id="使用">使用</span></h1><p>使用<code>rez-env &#123;package name&#125;</code>进行环境构建。<br>它的工作原理是，从包存储库搜索需要的包，<br>从这些包的定义文件<code>package.py</code>中解析依赖，<br>然后生成一个sh文件并构建环境。所以在<strong>使用前必须配置好所需的包与定义</strong>。</p><p>一个基本的包层级结构如下：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>Your Repository Path<span class="token punctuation">&#125;</span>  - <span class="token punctuation">&#123;</span>package Name<span class="token punctuation">&#125;</span>    - <span class="token punctuation">&#123;</span>Version<span class="token punctuation">&#125;</span>      - package.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="软件包定义">软件包定义</span></h2><p>先来创建一个maya软件包，用package.py文件定义它。<br><code>/Library/smb_server/dcc/maya/2018/package.py</code></p><p>写入内容：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">name &#x3D; &quot;maya&quot;version &#x3D; &quot;2018&quot;def commands():    env.MAYA_DISABLE_CLIC_IPM &#x3D; 1    env.MAYA_UI_LANGUAGE &#x3D; &#39;en_US&#39;    alias(&quot;maya2018&quot;, r&quot;&#x2F;Applications&#x2F;Autodesk&#x2F;maya2018&#x2F;Maya.app&#x2F;Contents&#x2F;MacOS&#x2F;Maya&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义了包的名称，版本，设置了几个环境变量，并为maya程序声明了一个别名。<br>回到终端，输入<code>rez-env maya</code>，这个时候就有了一个最简单的maya环境。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p1.gif"></p><p>对于DCC软件包大多使用引用的方式，不会真的将程序放在存储仓库中。<br>(同上述例子一样，只用在对应的包中定义一个package.py文件)</p><p>对于插件和一些脚本工具，可以直接放在仓库中。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p2.png"></p><p>package定义文件可以是这样：  </p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;mtoa&#39;version &#x3D; &#39;4.1.0&#39;requires &#x3D; [    &quot;~maya-2018+&lt;2021&quot;,    &quot;~houdini-18.5.351+&quot;]def commands():    env.SOLIDANGLE_LICENSE &#x3D; &quot;5053@localhost&quot;    if &#39;maya&#39; in request:        env.MAYA_MODULE_PATH.append(&quot;&#123;this.root&#125;&#x2F;maya&#x2F;mod&quot;)    if &#39;houdini&#39; in request:        env.PATH.append(&quot;&#123;this.root&#125;&#x2F;houdini&#x2F;scripts&#x2F;bin&quot;)        env.HOUDINI_PATH.append(&quot;&#123;this.root&#125;&#x2F;houdini&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用requires参数限制了dcc软件版本的有效范围，<br>使用weak reference符号<code>~</code>，为了不对没有请求的包进行搜索。  </p><p>比如使用<code>rez-env maya-2018 mtoa</code>构建环境时，这里没有对houdini请求，rez则不会去搜索它。<br>（如果不使用weak reference符，在请求mtoa时，requires列表中的所有包都会被代入环境）<br><strong>commands</strong>的部分为其添加环境变量，<code>&#123;this.root&#125;</code>代表这个包的当前目录。  </p><p>对于一些python第三方库，可以通过<code>rez-pip</code>直接进行安装(自动生成package.py文件)。<br>比如需要一个PyQt5，并将它安装到指定的目录的话，可以执行：<br><code>rez pip -p /Library/smb_server/third-lib --python-version python-2.7 -i PyQt5</code></p><p>或者直接拷贝第三方模块到路径下，同样用package.py定义这个包。<br>这里以shotgun_api为例：  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p3.png"></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;shotgun api&#39;version &#x3D; &#39;3.0&#39;requires &#x3D; [    &#39;python&#39;]def commands():    env.PYTHONPATH.append(&quot;&#123;root&#125;&#x2F;python&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义好后，在终端中输入命令测试看看<code>rez-env shotgun_api maya</code>  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p4.gif"></p><h2><span id="包的灵活运用">包的灵活运用</span></h2><p>可以将包理解为一块积木，要怎么组合和运用完全取决于你自己的需要。  </p><p>举一个例子，比如在一个名为TST的项目中，有这样的要求：  </p><ul><li>Maya2018</li><li>插件mGear要求版本大于2.0</li><li>最新版本的xgen插件</li><li>Arnold4.1.0渲染器</li><li>一个自己的工具脚本库my_maya_tools</li><li>Nuke12.1v2</li><li>Cryptomatte 1.2.8</li></ul><p>构建它的环境命令可能会变得很长：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rez-env maya-2018 mGear-2+ mtoa-4.1.0 xgen my_maya_tools nuke12.1.2 cryptomatte-1.2.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果再加上例如其它houdini，katana等软件需求，每次输入这么长一串命令会很繁琐。<br>避免这样繁琐的方法很多，这里为了说明包的灵活性，我们将一个项目比作一个包。  </p><p>新建一个目录为<code>/Library/smb_server/show</code>，添加到package_path配置中。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p5.png"></p><p>定义的文件内容如下：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">name &#x3D; &#39;TST&#39;version &#x3D; &#39;1.0&#39;requires &#x3D; [    &quot;maya-2018&quot;,    &quot;mGear-2+&quot;,    &quot;mtoa-4.1.0&quot;,    &quot;xgen&quot;,    &quot;my_maya_tools&quot;,    &quot;nuke-12.1.2&quot;,    &quot;cryptomatte-1.2.8&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以直接执行<code>rez-env TST</code>构建这样一个项目的环境需求了。<br>如果之后因为一些原因，要更换为redshift渲染器，只需要新建一个1.1的版本，修改requires参数即可。  </p><p><code>rez-env TST</code>命令不指定包版本的情况，默认是获取最新版本。<br>如果要回溯到上一个版本的话：<code>rez-env TST-1</code>。</p><blockquote><p>在实际生产中，我们通常会先本地测试，再发布测试版本，通过测试后发布一个正式版本。<br>这些步骤可以参考<code>rez-test</code>，<code>rez-build</code>，<code>rez-release</code>（作者暂时没有太去深究整个流程）</p></blockquote><h1><span id="一些扩展">一些扩展</span></h1><p>这些扩展就简单说明一下，因篇幅有限（码字码累了），<br>具体的概念和使用可以参照文档。  </p><h2><span id="context">context</span></h2><p>rez支持将目标环境写入一个文件中，比如：<br><code>rez-env maya xgen --output test.rxt</code><br>然后通过读取文件的方式，构建环境：<br><code>rez-env --input test.rxt</code></p><h2><span id="bundle">bundle</span></h2><p>也可以将rxt文件和它所需要的软件包进行打包。<br><code>rez-bundle test.rxt mybundle</code><br>打包后可以看到，软件包和rxt文件被放在了同一个目录下：<br>（这使得bundle是可移动和独立的）  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p6.png" width="30%" height="30%" alt align="center"></left></p><p>执行<code>rez-env -i mybundle/context.rxt </code>进行构建环境。</p><h2><span id="variants">variants</span></h2><p>这是一个非常有用的概念，这里用Arnold插件来举例。<br>Arnold插件支持Maya和Houdini，且跨平台，在Mac，Linux，Windows系统下都可以使用。<br>这样的话同一个版本的Arnold，会根据不同的系统平台和不同的软件产生多个分支(如下图)：  </p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-intro/p7.png" width="50%" height="50%" alt align="center"></left>  </p><p>当我们请求<code>rez-env maya Arnold</code>的时候，为了能让rez找到符合当前系统平台的分支，<br>就需要在定义文件中定义variants。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">name &#x3D; &quot;Arnold&quot;version &#x3D; &quot;1.0&quot;variants &#x3D; [    [&quot;platform-linux&quot;, &quot;maya&quot;],    [&quot;platform-linux&quot;, &quot;houdini&quot;],    [&quot;platform-osx&quot;, &quot;maya&quot;],    [&quot;platform-osx&quot;, &quot;houdini&quot;],    [&quot;platform-win&quot;, &quot;maya&quot;],    [&quot;platform-win&quot;, &quot;houdini&quot;]]def commands():    env.PATH.append(&quot;&#123;root&#125;&#x2F;bin&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证它试试：  </p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; rez-env maya Arnold -- echo &#39;$REZ_ARNOLD_ROOT&#39;&#x2F;Library&#x2F;smb_server&#x2F;plug-ins&#x2F;Arnold&#x2F;v1.0&#x2F;platform-osx&#x2F;maya<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="api">API</span></h2><p>上述的所有操作都可以通过python api来实现。  </p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import subprocessfrom rez.resolved_context import ResolvedContextr &#x3D; ResolvedContext([&quot;houdini-12.5+&quot;, &quot;houdini-0+&lt;13&quot;, &quot;java&quot;, &quot;!java-1.8+&quot;])p &#x3D; r.execute_shell(command&#x3D;&#39;which hescape&#39;, stdout&#x3D;subprocess.PIPE)out, err &#x3D; p.communicate()print out&gt;&gt;&gt; &#39;&#x2F;software&#x2F;ext&#x2F;houdini&#x2F;12.5.562&#x2F;bin&#x2F;hescape&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用python写一个交互UI，让制作人员能更直观的进行操作。</p><h1><span id="总结">总结</span></h1><p>对rez的使用介绍差不多就到这里，自己也是刚接触不久。<br>这篇文章是自己对rez的一些理解，要真正投入到生产环境中，<br>最好还是多阅读官方文档。  </p><p>文章如果对你有帮助，可以关注一下这个公众号：</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>00 Rez中文文档</title>
      <link href="//00%20rez-wiki-cn/"/>
      <url>//00%20rez-wiki-cn/</url>
      
        <content type="html"><![CDATA[<p>这是一份Rez中文文档，供大家学习讨论。<br>作者能力有限，翻译也许有不当的地方，如果发现问题还望指出，感激不尽。<br>原项目地址：<a href="https://github.com/nerdvegas/rez">https://github.com/nerdvegas/rez</a></p><h2><span id="入门"><strong>入门</strong></span></h2><p><a href="https://lingyunfx.com/01%20rez-home/">主页 (Home)</a></p><h2><span id="介绍"><strong>介绍</strong></span></h2><p><a href="https://lingyunfx.com/02%20rez-install/">安装 (Installation)</a><br><a href="https://lingyunfx.com/03%20rez-getting-started/">入门 (Getting Started)</a><br><a href="https://lingyunfx.com/04%20rez-basic-concepts/">基础概念 (Basic Concepts)</a><br><a href="https://lingyunfx.com/05%20rez-configuring/">配置 (Configuring Rez)</a></p><h2><span id="软件包"><strong>软件包</strong></span></h2><p><a href="https://lingyunfx.com/06%20rez-package-commands/">软件包命令 (Package Commands)</a><br><a href="https://lingyunfx.com/07%20rez-package-definition-guide/">软件包定义指南 (Package Definition Guide)</a><br><a href="https://lingyunfx.com/08%20rez-variants/">变体 (Variants)</a><br><a href="https://lingyunfx.com/09%20rez-ephemeral-packages/">临时包 (Ephemeral Packages)</a></p><h2><span id="rez"><strong>Rez</strong></span></h2><p><a href="https://lingyunfx.com/10%20rez-contexts/">Contexts</a><br><a href="https://lingyunfx.com/11%20rez-bundles/">Bundles</a><br><a href="https://lingyunfx.com/12%20rez-suites/">Suites</a><br><a href="https://lingyunfx.com/13%20rez-building-package/">Building Packages</a><br><a href="https://lingyunfx.com/14%20rez-copying-package/">Copying Packages</a><br><a href="https://lingyunfx.com/15%20rez-package-caching/">Package Caching</a><br><a href="https://lingyunfx.com/16%20rez-environment-variables/">Environment Variables</a></p><hr><p>如果文档有所帮助，可以关注这个公众号支持下作者thx！  </p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>16 Environment Variables</title>
      <link href="//16%20rez-environment-variables/"/>
      <url>//16%20rez-environment-variables/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节列出来rez在某些情况下产生的环境变量，以及你可以设置的影响rez操作的环境变量。</p></blockquote><h1><span id="context环境变量">Context环境变量</span></h1><p>这些是rez在解析环境中产生的环境变量。</p><p><code>REZ_RXT_FILE</code> ： 当前context的文件路径 ( rxt 文件)。<br><code>REZ_USED</code> ：用于解析这个环境的rez安装路径。<br><code>REZ_USED_IMPLICIT_PACKAGES</code> ： 用于解析环境的隐含包列表。<br><code>REZ_USED_PACKAGES_PATH</code> ： 用于解析环境的软件包搜索路径。<br><code>REZ_USED_RESOLVE</code> ： 已解析的软件包列表，例如 “platform-linux utils-1.2.3”。<br><code>REZ_USED_EPH_RESOLVE</code> ： 已解析的临时包的列表，例如”.foo.cli-1 .debugging-0”。<br><code>REZ_USED_REQUEST</code> ： 环境的包请求，以字符串表示，例如 “maya-2017 maya_utils-1.3+”。不包括隐含包。<br><code>REZ_USED_REQUESTED_TIMESTAMP</code> ： 这个已解析环境的时间，由用户使用<code>rez-env -time</code>标志明确设置，否则为零。<br><code>REZ_USED_TIMESTAMP</code> ：这个环境被解析的时间；或者为<code>REZ_USED_REQUESTED_TIMESTAMP</code>的值，如果不为零。<br><code>REZ_USED_VERSION</code> ： 用于解析这个环境的rez版本。<br><code>REZ_SHELL_INIT_TIMESTAMP</code> ： 当前shell被实例化的时间。<br><code>REZ_SHELL_INTERACTIVE</code> ： 如果shell是交互式的，则为’1’，否则为’0’(即当指定命令时，如<code>rez-env foo -- mycommand</code>)。</p><p>每个程序包都会生成以下变量。（PKG代表包的大写名称）</p><p><code>REZ_(PKG)_*BASE</code>：包安装的基本目录，例如 “/packages/utils/1.0.0”。<br><code>REZ_PKG)_ROOT</code>：包安装的根目录，例如 “/packages/utils/1.0.0/python-2.7”。<br><code>REZ_(PKG)_VERSION</code>：软件包的版本。<br><code>REZ_(PKG)_MAJOR_VERSION</code>：<em>软件包的主要版本，或为空。<br><code>REZ_(PKG)_MINOR_VERSION</code>：</em>软件包的次要版本，或为空。<br><code>REZ_(PKG)_PATCH_VERSION</code>：软件包的补丁版本，或为空。</p><p>对于每个临时包的请求，都会生成以下变量。</p><p>（下面变量中的”PKG)”是大写的包名，其中的点用下划线代替，并去掉最前的点符号。）</p><p><code>REZ_EPH_(PKG)_REQUEST</code>：已解析的临时包请求。</p><h1><span id="构建时环境变量">构建时环境变量</span></h1><p><code>REZ_BUILD_ENV</code>：始终存在于编译过程中，值为1。<br><code>REZ_BUILD_INSTALL</code>：如果正在进行安装(无论是rez-build -i还是rez-release)，其值为1，否则为0。<br><code>REZ_BUILD_INSTALL_PATH</code> ：如果正在进行安装，则安装路径为1，否则为0。<br><code>REZ_BUILD_PATH</code> ：构建输出的路径。<br><code>REZ_BUILD_PROJECT_DESCRIPTION</code> ：正在构建的包描述属性。<br><code>REZ_BUILD_PROJECT_FILE</code> ：正在构建的软件包的文件路径 (通常是package文件)。<br><code>REZ_BUILD_PROJECT_NAME</code> ：正在构建的软件包的名称。<br><code>REZ_BUILD_PROJECT_VERSION</code> ：正在构建的软件包的版本。<br><code>REZ_BUILD_REQUIRES</code>：联编需求的空间分隔列表，来自当前包的 requires、build_requires 和 private_build_requires 属性，包括当前变量的需求。<br><code>REZ_BUILD_REQUIRES_UNVERSIONED</code> ：相当于REZ_BUILD_REQUIRES的未版本列表。<br><code>REZ_BUILD_SOURCE_PATH：</code>包含package文件的路径。<br><code>REZ_BUILD_THREAD_COUNT</code>： 用于构建的线程数。<br><code>REZ_BUILD_TYPE</code> ：local或central;之一。如果正在进行发布，则值为central。<br><code>REZ_BUILD_VARIANT_INDEX</code>：当前正在构建的变体的索引。对于非变体包，这个值是 “0”。<br><code>REZ_BUILD_VARIANT_REQUIRES</code> ：当前变体的运行时需求的空间分隔的列表。</p><p>（不包括在<code>REZ_BUILD_REQUIRES</code>中找到的通用需求。对于非变体构建，这是一个空字符串。）<br><code>REZ_BUILD_VARIANT_SUBPATH</code> ：包含当前变体的子目录。对于非变体构建，这是一个空字符串。</p><h1><span id="运行时环境变量">运行时环境变量</span></h1><p><code>REZ_(CONFIG_ENTRY)</code> ：任何给定的rez config条目 (参见rezconfig.py文件)。为了方便起见，你可以用一个环境变量覆盖这个设置。这里，(CONFIG_ENTRY)是设置名称的大写字母。例如，通常用这种方式覆盖的设置是 packages_path，其对应的变量是 REZ_PACKAGES_PATH。<br><code>REZ_(CONFIG_ENTRY)_JSON</code> ：和前面的env-var一样，只是格式是JSON字符串。这意味着一些更复杂的设置可以被覆盖，而这些设置在非JSON情况下是不支持的（package_filter就是一个例子）。<br><code>EDITOR</code> ：在 Linux 和 OSX 系统上，如果 rez 需要使用编辑器，这将设置默认的编辑器（一个例子是在 release 时，如果 prompt_release_message 配置设置为 true）。<br><code>REZ_KEEP_TMPDIRS</code>：如果设置为非空字符串，这将防止rez清理任何临时目录。为了调试的目的。<br><code>REZ_SIGUSR1_ACTION</code>：如果你把它设置为print_stack，当发送USR1信号时，rez会把当前的stacktrace打印到stdout。这是为调试目的而设置的。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>15 Package Caching</title>
      <link href="//15%20rez-package-caching/"/>
      <url>//15%20rez-package-caching/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>软件包缓存（Package Caching）是一个将包复制到本地磁盘加快运行环境的功能。</p><p>比如你发布的包通常是在共享服务器上，那么运行python进程时，就会从共享存储上获取所有源码。缓存的意义在于将这些内容复制到本地，节省访问网络的时间成本。</p><h1><span id="启用缓存">启用缓存</span></h1><p>软件包缓存功能不是默认启用的。要启用它，需要配置<code>cache_packages_path</code>来指定缓存的路径。</p><p>你也可以细致的控制哪些包是需要被缓存的，只需要在它的定义文件（package.py）设置<code>cachable = True</code> 。我们需要单独控制哪些包是可以被缓存的，因为某些编译后的包无法支持重定向（即缓存到本地会丢失作用）。</p><p>还有一些配置会在包没有设置<code>cachable=True</code>的情况下缓存包。比如<code>dedefault_cachable</code>，<code>default_cachable_per_package</code> 和<code>default_cachable_per_repository</code>。</p><p><strong>Notes</strong>：你也可以使用<code>rez-env --no-pkg-caching</code>来禁用包缓存。</p><h1><span id="验证">验证</span></h1><p>当你解析一个环境后，可以通过<code>rez-context</code>输出的右侧栏中看到缓存标签，查看哪些变体已经被缓存。如下所示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env FlaskYou are now <span class="token keyword">in</span> a rez-configured environment.requested packages:Flask~platform<span class="token operator">==</span>linux   <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64      <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>Ubuntu-16.04  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:Flask-1.1.2         /home/ajohns/package_cache/Flask/1.1.2/d998/a                                     <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>Jinja2-2.11.2       /home/ajohns/package_cache/Jinja2/2.11.2/6087/a                                   <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>MarkupSafe-1.1.1    /svr/packages/MarkupSafe/1.1.1/d9e9d80193dcd9578844ec4c2c22c9366ef0b88aWerkzeug-1.0.1      /home/ajohns/package_cache/Werkzeug/1.0.1/fe76/a                                  <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>arch-x86_64         /home/ajohns/package_cache/arch/x86_64/6450/a                                     <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>click-7.1.2         /home/ajohns/package_cache/click/7.1.2/0da2/a                                     <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>itsdangerous-1.1.0  /home/ajohns/package_cache/itsdangerous/1.1.0/b23f/a                              <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>platform-linux      /home/ajohns/package_cache/platform/linux/9d4d/a                                  <span class="token punctuation">(</span>cached<span class="token punctuation">)</span>python-3.7.4        /home/ajohns/package_cache/python/3.7.4/ce1c/a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于引用，缓存的包也会将其原始的位置存储到一个环境变量中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token variable">$REZ_FLASK_ORIG_ROOT</span>/svr/packages/Flask/1.1.2/88a70aca30cb79a278872594adf043dc6c40af99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="工作原理">工作原理</span></h1><p>包缓存实际上缓存的是变体，而不是整个包。当你执行环境解析的时候，或者source一些存在的context时，所需的变体会被异步复制到本地磁盘（如果它们是可缓存的），在一个单独的进程中，进程名为<code>rez-pkg-cache</code>。</p><p>这意味着在第一次解析时，不一定会用到缓存的变体（因为进程还在持续运行中，完成缓存需要时间，这是一个缓慢的过程）。</p><p>注意，包缓存不是一个包仓库，它只是一个变体存储，结构上可以将任何仓库中的变体存储到一个共享缓存中。</p><p>被缓存的变体是不可变的，没法检查变体是否有发生变化。所以你不应该在包仓库中使用缓存，因为包可能会覆盖。正因如此，本地包的缓存默认是被禁用的。（参考<a href="https://github.com/nerdvegas/rez/wiki/Configuring-Rez#package_cache_local">package_cache_local</a>）</p><h1><span id="命令行">命令行</span></h1><h2><span id="检验">检验</span></h2><p>使用<code>rez-pkg-cache</code>来查看缓存的状态，并进行预加载和删除操作。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-pkg-cachePackage cache at /home/ajohns/package_cache:status   package             variant uri                                             cache path------   -------             -----------                                             ----------cached   Flask-1.1.2         /svr/packages/Flask/1.1.2/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>         /home/ajohns/package_cache/Flask/1.1.2/d998/acached   Jinja2-2.11.2       /svr/packages/Jinja2/2.11.2/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>       /home/ajohns/package_cache/Jinja2/2.11.2/6087/acached   Werkzeug-1.0.1      /svr/packages/Werkzeug/1.0.1/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      /home/ajohns/package_cache/Werkzeug/1.0.1/fe76/acached   arch-x86_64         /svr/packages/arch/x86_64/package.py<span class="token punctuation">[</span><span class="token punctuation">]</span>          /home/ajohns/package_cache/arch/x86_64/6450/acached   click-7.1.2         /svr/packages/click/7.1.2/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>         /home/ajohns/package_cache/click/7.1.2/0da2/acached   itsdangerous-1.1.0  /svr/packages/itsdangerous/1.1.0/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  /home/ajohns/package_cache/itsdangerous/1.1.0/b23f/acached   platform-linux      /svr/packages/platform/linux/package.py<span class="token punctuation">[</span><span class="token punctuation">]</span>       /home/ajohns/package_cache/platform/linux/9d4d/acopying  python-3.7.4        /svr/packages/python/3.7.4/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        /home/ajohns/package_cache/python/3.7.4/ce1c/astalled  MarkupSafe-1.1.1    /svr/packages/MarkupSafe/1.1.1/package.py<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    /home/ajohns/package_cache/MarkupSafe/1.1.1/724c/a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个变体都被存储在一个目录中，这个目录是该变体唯一的标识符。</p><p>软件包缓存是具有线程和多进程的，并在必要时使用文件锁来控制访问。</p><p>缓存的变体在任何时候都有其中之一的状态：</p><ul><li>copying：这个变体正在被复制到缓存中，还不能使用。</li><li>cached：该变体已经被缓存，可以使用。</li><li>stalled：变体在复制中出现来点问题，缓存中只存在部分副本。</li></ul><h2><span id="日志">日志</span></h2><p>缓存操作存储在缓存目录下的日志文件中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-pkg-cache --logsrez-pkg-cache <span class="token number">2020</span>-05-23 <span class="token number">16</span>:17:45,194 PID-29827 INFO Started daemonrez-pkg-cache <span class="token number">2020</span>-05-23 <span class="token number">16</span>:17:45,201 PID-29827 INFO Started caching of variant /home/ajohns/packages/Werkzeug/1.0.1/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.rez-pkg-cache <span class="token number">2020</span>-05-23 <span class="token number">16</span>:17:45,404 PID-29827 INFO Cached variant to /home/ajohns/package_cache/Werkzeug/1.0.1/fe76/a <span class="token keyword">in</span> <span class="token number">0.202576</span> secondsrez-pkg-cache <span class="token number">2020</span>-05-23 <span class="token number">16</span>:17:45,404 PID-29827 INFO Started caching of variant /home/ajohns/packages/python/3.7.4/package.py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.rez-pkg-cache <span class="token number">2020</span>-05-23 <span class="token number">16</span>:17:46,006 PID-29827 INFO Cached variant to /home/ajohns/package_cache/python/3.7.4/ce1c/a <span class="token keyword">in</span> <span class="token number">0.602037</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="清理缓存">清理缓存</span></h2><p>清理缓存是指删除停滞的或者不再使用的变体。由于我们无法知道一个变体是否在使用，所以有一个可配置的<code>package_cache_max_variant_days</code>设置，它将删除超过X天没有被使用的变体。</p><p>你也可以使用<code>rez-pkg-cache -r</code>来手动删除缓存中的变体。需主要这样的操作只是使缓存不可用，但它仍然存储在磁盘上。执行<code>rez-pkg-cache --clean</code>来真正意义上从磁盘删除缓存。</p><p>你可以使用package_cache_clean_limit 设置，在每次更新缓存时，异步的执行一些清理工作。如果你不想使用这个设置，建议你设置一个cron或其它形式的定时器来定期运行<code>rez-pkg-cache --clean</code>，否则你的缓存将越积越多。</p><p>最后请注意，处于停滞状态的缓存不会尝试重新缓存，直到它被清理或移除操作。</p><p>你需要运行<code>rez-pkg-cache --clean</code>来删除停滞的缓存。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>14 Copying Packages</title>
      <link href="//14%20rez-copying-package/"/>
      <url>//14%20rez-copying-package/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>包可以从一个库复制到另一个库，就像这样。<br>使用命令：</p><p><code>]$ rez-cp --dest-path /svr/packages2 my_pkg-1.2.3</code></p><p>使用API：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">>></span><span class="token operator">></span> from rez.package_copy <span class="token function">import</span> copy_package<span class="token operator">>></span><span class="token operator">></span> from rez.packages <span class="token function">import</span> get_latest_package<span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> get_latest_package<span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> pPackage<span class="token punctuation">(</span>FileSystemPackageResource<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'location'</span><span class="token builtin class-name">:</span> <span class="token string">'/home/ajohns/packages'</span>, <span class="token string">'name'</span><span class="token builtin class-name">:</span> <span class="token string">'python'</span>, <span class="token string">'repository_type'</span><span class="token builtin class-name">:</span> <span class="token string">'filesystem'</span>, <span class="token string">'version'</span><span class="token builtin class-name">:</span> <span class="token string">'3.7.4'</span><span class="token punctuation">&#125;</span><span class="token punctuation">))</span><span class="token operator">>></span><span class="token operator">></span> r <span class="token operator">=</span> copy_package<span class="token punctuation">(</span>p, <span class="token string">"./repo2"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> print<span class="token punctuation">(</span>pprint.pformat<span class="token punctuation">(</span>r<span class="token punctuation">))</span><span class="token punctuation">&#123;</span>    <span class="token string">'copied'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span>            Variant<span class="token punctuation">(</span>FileSystemVariantResource<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'location'</span><span class="token builtin class-name">:</span> <span class="token string">'/home/ajohns/packages'</span>, <span class="token string">'name'</span><span class="token builtin class-name">:</span> <span class="token string">'python'</span>, <span class="token string">'repository_type'</span><span class="token builtin class-name">:</span> <span class="token string">'filesystem'</span>, <span class="token string">'index'</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, <span class="token string">'version'</span><span class="token builtin class-name">:</span> <span class="token string">'3.7.4'</span><span class="token punctuation">&#125;</span><span class="token punctuation">))</span>,            FileSystemVariantResource<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'location'</span><span class="token builtin class-name">:</span> <span class="token string">'/home/ajohns/repo2'</span>, <span class="token string">'name'</span><span class="token builtin class-name">:</span> <span class="token string">'python'</span>, <span class="token string">'repository_type'</span><span class="token builtin class-name">:</span> <span class="token string">'filesystem'</span>, <span class="token string">'index'</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, <span class="token string">'version'</span><span class="token builtin class-name">:</span> <span class="token string">'3.7.4'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">]</span>,    <span class="token string">'skipped'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制包实际上每次只复制一个变体，当然也可以指定复制包的某些变体，而不是整个包。<br>API调用的返回值显示了被复制的变量copied中的二元组分别列出了源和目标。</p><p><strong>注意</strong>：不要直接复制包目录，应当使用<code>rez-cp</code>。直接复制可能会导致resolve缓存问题。</p><h1><span id="启用">启用</span></h1><p>复制包功能是默认启用的，如果你想指定哪些可以被重定位，哪些不可重定位。</p><p>可以通过包定义文件中设置<code>relocatable=False</code>来标记包为不可重定位。</p><p>还有些配置会影响，可以参考default_relocatable，default_relocatable_per_package 和 default_relocatable_per_repository。</p><p>试图复制一个不可重定位的包会引发一个<code>PackageCopyError</code>。<br>请注意，<code>-force</code>选项会覆盖这一点，使用时风险自负。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>13 Building Packages</title>
      <link href="//13%20rez-building-package/"/>
      <url>//13%20rez-building-package/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>rez包可以使用rez-build工具来构建和本地安装。这个工具有以下操作：</p><ul><li>遍历一个包的变体</li><li>构建环境</li><li>在此环境中运行构建系统</li></ul><p>每一个构建都来自构建的目录路径。（通常是构建的子目录或构建下的变体特定子目录）<br>例如一个包含两个基本python变体的程序包：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">+- package.py+- CMakeLists.txt <span class="token punctuation">(</span>or other build <span class="token function">file</span><span class="token punctuation">)</span>+-build  +-python-2.6  <span class="token comment"># build dir for python-2.6 variant</span>  +-python-2.7  <span class="token comment"># build dir for python-2.6 variant</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构建过程中，当前目录被视为构建路径。</p><h1><span id="构建环境">构建环境</span></h1><p>构建环境是一个rez解析环境，它的需求列表是这样构造的：</p><ul><li>首先使用程序包require列表</li><li>然后添加程序包的build_require列表。其它包的build_requires也会被使用</li><li>再然后追加程序包的private_build_requires</li><li>最后，如果包有变体，则追加变体的需求</li></ul><p>构建时会创建一系列环境变量（REZ_BUILD_开头），在<a href="https://lingyunfx.com/2021/03/15/rez-environment-variables/">这里</a>可以看到构建时产生的环境变量。</p><p>在这个环境中会为每个变量调用构建系统。</p><h1><span id="构建时依赖">构建时依赖</span></h1><p>有时候一个包只需要依赖另一个包来构建它的代码，或者生成文档。<br>以文档为例，一个C++项目可能需要使用doxygen来构建它的文档，<br>而一旦文档被生成，就不再需要doxygen了。</p><p>这可以通过package.py的build_requires或private_build_requires来实现，<br>在这两个参数下的依赖包都只用于构建时，是过渡性的依赖列表。</p><p>一些private_build_requires使用包括：</p><ul><li>文档的生成器，如doxygen或sphinx</li><li>构建工具，如一个名为pyqt_cmake_utils的包，它提供了将ui文件转换为py的cmake宏</li><li>静态链接库（因为库在构建时已经链接好了，所以运行时就不需要这个包了）</li></ul><h1><span id="包的通信">包的通信</span></h1><p>比如有两个C++包，maya_utils和著名的boost库。maya_utils如何找到boost的头文件，或库文件？<br>简单的回答是，这取决于你。Rez其实并不是一个构建系统，它支持各种构建系统，它可以配置构建环境，但构建本身的细节部分是留给使用者的。</p><p>话虽如此，rez支持cmake有一段时间了，而且rez自带大量的实用代码来管理cmake构建。<br>当配置rez环境时，每个包的命令部分都会配置环境。当发生构建时，一个特殊的变量building被设置为True。你的包会使用这个变量来向未构建的包传达构建信息。</p><p>举个例子，我们的boost包命令看起来也许是这样的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> building<span class="token punctuation">:</span>        <span class="token comment"># there is a 'FindBoost.cmake' file in this dir..</span>        env<span class="token punctuation">.</span>CMAKE_MODULE_PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/cmake"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的FindBoost.cmake文件可能是这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set<span class="token punctuation">(</span>Boost_INCLUDE_DIRS <span class="token variable">$ENV</span><span class="token punctuation">&#123;</span>REZ_BOOST_ROOT<span class="token punctuation">&#125;</span>/include<span class="token punctuation">)</span>set<span class="token punctuation">(</span>Boost_LIBRARY_DIRS <span class="token variable">$ENV</span><span class="token punctuation">&#123;</span>REZ_BOOST_ROOT<span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span>set<span class="token punctuation">(</span>Boost_LIBRARIES boost-python<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，我们的maya_utils包可能有一个CMakeLists.txt文件（cmake的构建脚本），其中包含：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">find_package<span class="token punctuation">(</span>Boost<span class="token punctuation">)</span>include_directories<span class="token punctuation">(</span><span class="token variable">$&#123;Boost_INCLUDE_DIRS&#125;</span><span class="token punctuation">)</span>link_directories<span class="token punctuation">(</span><span class="token variable">$&#123;Boost_LIBRARY_DIRS&#125;</span><span class="token punctuation">)</span>target_link_libraries<span class="token punctuation">(</span>maya_utils <span class="token variable">$&#123;Boost_LIBRARIES&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>find_package cmake宏会搜索CMAKE_MODULE_PATH环境变量中列出的路径，并寻找一个名为FindXXX.cmake的文件，其中XXX是包的名称（在本例中为Boost），然后将其包含在内。</p><h1><span id="构建系统">构建系统</span></h1><p>Rez支持多种构建系统，新的构建系统可以作为插件添加。当调用构建时，会自动检测并选择构建系统。例如如果在程序包根目录发现来CMakeLists.txt文件，就会使用cmake构建系统。</p><h2><span id="参数传递">参数传递</span></h2><p>有两种方法可以将参数传递给构建系统。</p><p>其一，一些编译系统插件会直接向<code>rez-build</code>命令添加额外选项。例如在一个基于CMake的程序包中，<br>又运行了<code>rez-build -h</code>命令，你会看到cmake的特定参数列表，比如 <code>—build-target</code>。</p><p>其二，你可以直接向编译系统传递参数，使用<code>rez-build —build-args</code>命令。</p><p>例如，这里在cmake中明确定义一个变量：<br><code>]$ rez-build -- -DMYVAR=YES</code></p><h2><span id="自定义构建">自定义构建</span></h2><p>除了从构建文件中检查构建系统外，程序包还可以使用build_command属性明确指定构建命令。</p><p>在package.py文件中定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"nuke_utils"</span>version <span class="token operator">=</span> <span class="token string">"1.2.3"</span>build_command <span class="token operator">=</span> <span class="token string">"bash &#123;root&#125;/build.sh &#123;install&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当在这个包运行rez-build时，给定的build.sh脚本将用bash执行。</p><p>{root}字符为软件包根目录，如果又安装，{install}字符串将展开为”install”，否则为空。</p><p>构建过程中的当前工作目录被设置为构建路径，而不是包的根目录。因此通常会使用{root}字符串来引用包根目录下的构建脚本。</p><p><strong>传递参数</strong></p><p>你可以直接为你的编译脚本添加参数到rez-build命令中，通过在程序包根目录创建一个parse_build_args.py文件，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in parse_build_args.py</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--foo"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"do some foo"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，如果你在这个软件包上运行<code>rez-build -h</code>会看到列出的选项：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ rez-build -husage: rez build <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token environment constant">PATH</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--fail-graph<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>--view-pre<span class="token punctuation">]</span>                 <span class="token punctuation">[</span>--process <span class="token punctuation">&#123;</span>remote,local<span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--foo<span class="token punctuation">]</span>                 <span class="token punctuation">[</span>--variants INDEX <span class="token punctuation">[</span>INDEX <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--ba ARGS<span class="token punctuation">]</span> <span class="token punctuation">[</span>--cba ARGS<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v<span class="token punctuation">]</span>Build a package from source.optional arguments:  <span class="token punctuation">..</span>.  --foo                 <span class="token keyword">do</span> some foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加的参数会被存储到环境变量中，这样你的编译脚本就可以访问它们。</p><p>它们的前缀是<code>__PARSE_ARF_</code> ；在上面的例子中，变量<code>__PARSE_ARG_FOO</code>被设置。<br>布尔由0/1表示，而列表则用空格分隔，必要时使用引号。</p><p><strong>一个实例</strong></p><p>以下是一个非常简单的C++例子，展示来如何使用自定义构建命令，通过make进行构建和安装。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in package.py</span>build_command <span class="token operator">=</span> <span class="token string">"make -f &#123;root&#125;/Makefile &#123;install&#125;"</span><span class="token comment"># in Makefile</span>hai<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>REZ_BUILD_SOURCE_PATH<span class="token punctuation">&#125;</span><span class="token operator">/</span>lib<span class="token operator">/</span>main<span class="token punctuation">.</span>cpp    g<span class="token operator">+</span><span class="token operator">+</span> <span class="token operator">-</span>o hai $<span class="token punctuation">&#123;</span>REZ_BUILD_SOURCE_PATH<span class="token punctuation">&#125;</span><span class="token operator">/</span>lib<span class="token operator">/</span>main<span class="token punctuation">.</span>cpp<span class="token punctuation">.</span>PHONY<span class="token punctuation">:</span> installinstall<span class="token punctuation">:</span> hai    mkdir <span class="token operator">-</span>p $<span class="token punctuation">&#123;</span>REZ_BUILD_INSTALL_PATH<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token builtin">bin</span>p $<span class="token operator">&lt;</span> $<span class="token punctuation">&#123;</span>REZ_BUILD_INSTALL_PATH<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>hai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="本地包安装">本地包安装</span></h1><p>在你做了一些代码修改之后，想要测试它们。你可以通过本地安装程序包，然后用<code>rez-env</code>解析环境来测试程序包，大概是这样：</p><ul><li>进行代码修改</li><li>运行<code>rez-build —install</code> 安装为本地包</li><li>在一个单独的shell里运行rez-env mypackage。这将启用你的本地软件包，以及程序包需求</li><li>测试软件包</li></ul><p>本地安装会将程序包构建并安装到本地仓库中，通常是~/package目录。这个目录被列在包搜索路径的开头，所以当你解析一个环境进行测试时，本地安装的包会被首先选中。你的包通常会被安装到 ~/packages/packagename/version，例如 ~/packages/maya_utils/1.0.5。如果你有变体，它们会被安装到这个安装路径的子目录中。<br>（可以参考文章：<a href="https://lingyunfx.com/2021/03/15/rez-variants">变体 (Variants)</a>的结构部分）</p><p>你不需要每次安装后都运行<code>rez-env</code>。如果你的程序包没有改变，你可以继续使用现有测试环境。</p><p>可以通过检查rez-env执行后的输出，来确保你已经pick了你的本地包。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env sequenceYou are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@turtle, on Thu Mar 09 <span class="token number">11</span>:41:06 <span class="token number">2017</span>, using Rez v2.7.0requested packages:sequence~platform<span class="token operator">==</span>linux   <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64      <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>Ubuntu-16.04  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:arch-x86_64      /sw/packages/arch/x86_64os-Ubuntu-16.04  /sw/packages/os/Ubuntu-16.04platform-linux   /sw/packages/platform/linuxpython-2.7.12    /sw/packages/python/2.7.12sequence-2.1.2   /home/ajohns/packages/sequence/2.1.2  <span class="token punctuation">(</span>local<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：这里的sequence包是本地安装，括号里local表示。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12 Suites</title>
      <link href="//12%20rez-suites/"/>
      <url>//12%20rez-suites/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>假设你希望为你的用户提供一些不同的工具，尽管这些工具需要在不同的环境中运行。</p><p>例如你希望工作室的艺术家能够从命令行运行maya和nuke，而不需要考虑它们的环境。</p><p>为了达到这样的需求，你会创建两个context：maya.rxt和nuke.rxt。</p><p>首先运行maya：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env --input maya.rxt -- maya<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以将这个命令包装在一个脚本中，而这个脚本被称为maya：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span>rez-env --input maya.rxt -- maya <span class="token variable">$*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，你把它放在$PATH里，并对nuke也是同样的做法。</p><p>那么这个是你的用户就可以从输入maya这个命令来运行这些应用程序，而不需要直到这背后发生来什么。<br>简而言之，这就是suites的意义，可以理解为包装，包含一组context以及运行工具的脚本。</p><h1><span id="rez-suite命令">rez-suite命令</span></h1><p>同样还是上述的例子，这里使用rez-suite工具来完成。</p><p>首先我们创建一个suite，命令将在当前工作目录下创建一个名为mysuite的文件夹。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-suite --create mysuite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在我们需要向我们的suite添加context，首先创建context：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env maya-2016.2 --output maya.rxt<span class="token punctuation">]</span>$ rez-env nuke --output nuke.rxt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后将这些context添加到suite里：（注意 <em>—context</em> 的参数只需要给予其名称）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-suite --add maya.rxt --context maya mysuite<span class="token punctuation">]</span>$ rez-suite --add nuke.rxt --context nuke mysuite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在suite已经创建完成，下面将它添加到$PATH中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/mysuite/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在你可以看到它了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ <span class="token function">which</span> maya./mysuite/bin/maya<span class="token punctuation">]</span>$ <span class="token function">ls</span> ./mysuite/binmayanuke<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="suite工具">Suite工具</span></h1><p>Suite中context的工具由包的tools属性决定：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in maya package.py</span>tools <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"maya"</span><span class="token punctuation">,</span>    <span class="token string">"mayapy"</span><span class="token punctuation">,</span>    <span class="token string">"fcheck"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有这些工具都在suite中使用（你可以使用 rez-suite —hide来隐藏某个项）。<br>只有在context请求中列出的包，且不是弱请求或有冲突的请求，工具才会暴露有效。</p><p>而作为依赖关系拉进来的包则不会暴露。如果你需要控制一个不在请求中的软件包版本，<br>不用添加它的命令行工具，只需要将其添加到请求列表的弱引用。</p><h2><span id="工具别名">工具别名</span></h2><p>工具可以使用别名，比如这里将一个新版本的maya添加到suite中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ rez-env maya-2017 --output maya2017.rxt<span class="token punctuation">]</span>$ rez-suite --add maya2017.rxt --context maya2017 mysuite<span class="token punctuation">]</span>$ rez-suite --suffix _beta --context maya2017 mysuite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="控制参数">控制参数</span></h2><p>当使用suite里的工具时，所有参数都会按预期传递给底层工具。不过例外是，rez提供了一组控制参数，这些参数以+/++为前缀。这些是可感知套件参数。你可以使用+h/++help来获取它们：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ maya ++helpusage: maya <span class="token punctuation">[</span>+h<span class="token punctuation">]</span> <span class="token punctuation">[</span>+a<span class="token punctuation">]</span> <span class="token punctuation">[</span>+i<span class="token punctuation">]</span> <span class="token punctuation">[</span>+p <span class="token punctuation">[</span>PKG <span class="token punctuation">[</span>PKG <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>++versions<span class="token punctuation">]</span>            <span class="token punctuation">[</span>++command COMMAND <span class="token punctuation">[</span>ARG <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>++stdin<span class="token punctuation">]</span> <span class="token punctuation">[</span>++strict<span class="token punctuation">]</span> <span class="token punctuation">[</span>++nl<span class="token punctuation">]</span>            <span class="token punctuation">[</span>++peek<span class="token punctuation">]</span> <span class="token punctuation">[</span>++verbose<span class="token punctuation">]</span> <span class="token punctuation">[</span>++quiet<span class="token punctuation">]</span> <span class="token punctuation">[</span>++no-rez-args<span class="token punctuation">]</span>optional arguments:  +h, ++help            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>  +a, ++about           print information about the tool  +i, ++interactive     launch an interactive shell within the tool<span class="token string">'s                        configured environment  +p [PKG [PKG ...]], ++patch [PKG [PKG ...]]                        run the tool in a patched environment  ++versions            list versions of package providing this tool  ++command COMMAND [ARG ...]                        read commands from string, rather than executing the                        tool  ++stdin               read commands from standard input, rather than                        executing the tool  ++strict              strict patching. Ignored if ++patch is not present  ++nl, ++no-local      don'</span>t load <span class="token builtin class-name">local</span> packages when patching  ++peek                <span class="token function">diff</span> against the tool<span class="token string">'s context and a re-resolved copy                        - this shows how '</span>stale<span class="token string">' the context is  ++verbose             verbose mode, repeat for more verbosity  ++quiet               hide welcome message when entering interactive mode  ++no-rez-args         pass all args to the tool, even if they start with '</span>+'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，查看suite中maya工具的相关信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ maya ++aboutTool:     mayaPath:     ./mysuite/bin/mayaSuite:    ./mysuiteContext:  ./mysuite/contexts/maya2016.rxt <span class="token punctuation">(</span><span class="token string">'maya2016'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示</strong>：如果目标工具也使用+作为自己的参数，那么可以使用rez对其前缀字符修改。</p><p>参考 <code>rez-suite —prefix-char</code>选项。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11 Bundles</title>
      <link href="//11%20rez-bundles/"/>
      <url>//11%20rez-bundles/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>Bundle是一个包含context文件和程序包仓库的目录。  </p><p>context中的所有包都在存储库中，这使得bundle是可移动和独立的。<br>通过命令创建一个bundle：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env foo -o foo.rxt<span class="token punctuation">]</span>$ rez-bundle foo.rxt ./mybundle<span class="token comment"># example of running a command from the bundled context</span><span class="token punctuation">]</span>$ rez-env -i ./mybundle/context.rxt -- foo-tool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过API创建bundle：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rez<span class="token punctuation">.</span>bundle_context <span class="token keyword">import</span> bundle_context<span class="token keyword">from</span> rez<span class="token punctuation">.</span>resolved_context <span class="token keyword">import</span> ResolvedContextc <span class="token operator">=</span> ResolvedContext<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"python-3+"</span><span class="token punctuation">,</span> <span class="token string">"foo-1.2+&lt;2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>bundle_context<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">"./mybundle"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="结构">结构</span></h1><p>一个bundle的层级结构：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">..</span>./mybundle/       ./context.rxt       ./packages/           <span class="token operator">&lt;</span>standard package repo structure<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在rxt文件中包的引用是相对的，这使得bundle可以被重新定位。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10 Contexts</title>
      <link href="//10%20rez-contexts/"/>
      <url>//10%20rez-contexts/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>当使用<code>rez-env</code>创建解析环境时，实际上是创建了一个称为context的东西。<br>一个context存储的信息包括：</p><ul><li>初始程序包请求列表</li><li>被选择的变体列表</li><li>一个直观显示解析的图表</li></ul><p>context不存储解析到的程序包副本，而是为每个包存储一种句柄，<br>它提供了足够的信息来知道从哪里获取完整的包定义和内容。</p><p>context本身非常小，以json格式存储在一个rxt文件中。<br>当你使用rez-env时，它实际在磁盘上创建了一个临时的context文件，直到shell退出时这个文件就会被删除。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env foo bahYou are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@14jun01.methodstudios.com, on Wed Oct <span class="token number">22</span> <span class="token number">12</span>:44:00 <span class="token number">2014</span>,using Rez v2.0.rc1.10requested packages:foobahresolved packages:eek-2.6   /packages/inhouse/eek/2.6foo-1.2   /packages/inhouse/foo/1.2bah-4     /packages/inhouse/bah/4<span class="token operator">></span> <span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token variable">$REZ_RXT_FILE</span>/tmp/rez_context_0tMS4U/context.rxt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="解析存储">解析存储</span></h1><p>可以使用<code>rez-env —output</code>将解析后的context直接写入文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span>$ rez-env foo bah --output test.rxt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后你可以这样读取context文件，重新构建同样的环境。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env --input test.rxtYou are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@14jun01.methodstudios.com, on Wed Oct <span class="token number">22</span> <span class="token number">12</span>:44:00 <span class="token number">2014</span>,using Rez v2.0.rc1.10requested packages:foobahresolved packages:eek-2.6   /packages/inhouse/eek/2.6foo-1.2   /packages/inhouse/foo/1.2bah-4     /packages/inhouse/bah/4<span class="token operator">></span> <span class="token punctuation">]</span>$ █<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>context并不存储配置环境的副本（比如导出的环境变量等）。context只存储为了配置环境而需要的程序包解析列表。<br>当使用<code>rez-env —input</code>加载一个环境时，每个包的command部分都会被解释一遍。</p><p>你可以把包的command看作配置环境时的脚本片段。通过创建一个context，你就创建了一个脚本片段列表，<br>当这些片段连续运行时，就产生了目标环境。</p><h1><span id="rez-context工具">rez-context工具</span></h1><p><code>rez-context</code>可以检查context文件。当已经在一个解析后的shell中，运行这个命令会进行检查。<br>除非在参数后明确指定了要检查哪一个context文件，默认都是检查当前环境。<br>这个例子就是指定context文件检查：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-context test.rxtresolved by ajohns@14jun01.methodstudios.com, on Wed Oct <span class="token number">22</span> <span class="token number">12</span>:44:00 <span class="token number">2014</span>,using Rez v2.0.rc1.10requested packages:foobahresolved packages:eek-2.6   /packages/inhouse/eek/2.6foo-1.2   /packages/inhouse/foo/1.2bah-4     /packages/inhouse/bah/4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09 Ephemeral Packages</title>
      <link href="//09%20rez-ephemeral-packages/"/>
      <url>//09%20rez-ephemeral-packages/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>于2.71.0版本中引入。</p><p>临时包（Ephemeral Packages）是对不存在的包的请求。<br>包名称以<code>.</code>开头，和其它的软件包请求类似，可以作为变体列表的一部分来请求，<br>或者直接用<code>rez-env</code>命令进行请求。<br>下面是一个例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env .foo-1You are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@turtle, on Tue Dec <span class="token number">22</span> 08:17:00 <span class="token number">2020</span>, using Rez v2.70.0requested packages:.foo-1             <span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span>~platform<span class="token operator">==</span>linux   <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64      <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>Ubuntu-16.04  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:.foo-1    <span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在解析过程中，临时包会其它软件包一样工作，但是它不会和实际软件包相关联，<br>也不会运行执行任何配置。一个版本范围交集的例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env .foo-1 <span class="token string">'.foo-1.5+'</span>You are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@turtle, on Tue Dec <span class="token number">22</span> 08:21:04 <span class="token number">2020</span>, using Rez v2.70.0requested packages:.foo-1             <span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span>.foo-1.5+          <span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span>~platform<span class="token operator">==</span>linux   <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64      <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>Ubuntu-16.04  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:.foo-1.5+<span class="token operator">&lt;</span>1_    <span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个会引发冲突的例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env .foo-1 .foo-2The context failed to resolve:The following package conflicts occurred: <span class="token punctuation">(</span>.foo-1 <span class="token operator">&lt;</span>--<span class="token operator">!</span>--<span class="token operator">></span> .foo-2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="环境变量">环境变量</span></h1><p>临时软件包不会以实际软件包的方式运行，但会设置一些环境变量：</p><ul><li>REZ_USED_EPH_RESOLVE：列出所有解析的临时请求</li><li>REZ_EPH_(PKG)_REQUEST：标记已经解析完成的临时包。PKG为临时包名称，以大写形式表示，<br>其中的点符号由下划线代替，并删除来名称最前面的<code>.</code></li></ul><p>以下例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env python .foo-1 .bah-2<span class="token punctuation">..</span>.<span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token variable">$REZ_EPH_FOO_REQUEST</span><span class="token number">1</span><span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token variable">$REZ_USED_EPH_RESOLVE</span>.foo-1 .bah-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="自检">自检</span></h1><p>为了使软件包检查运行时存在的临时包，提供了一个<code>ephemerals</code>对象，类似于<code>resolve</code>对象。</p><p>通常使用<code>intersects</code>函数进行检查，如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in package.py</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> intersects<span class="token punctuation">(</span>ephemerals<span class="token punctuation">.</span>get_range<span class="token punctuation">(</span><span class="token string">'enable_tracking'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        env<span class="token punctuation">.</span>TRACKING_ENABLED <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子里，如果解析中出现了.enable_tracking-1（或.enable_tracking-1.2+）这样的临时包，<br>那么环境变量TRACKING_ENABLED则被标记为1。</p><p><strong>注意</strong>：implied的包不会包含在ephemerals对象中。</p><p>由于ephemerals对象是一个类似dict的对象，所以它有一个get函数。如果key存在，该函数返回一个完整字符串，<br>因此使用get时，给予的默认值也应该是一个完整的字符串，而不是<code>0</code>这样的版本范围字符串。</p><h1><span id="临时包示例">临时包示例</span></h1><p>为什么我们会需要用到临时包？下面有两个示例：</p><h2><span id="向包传递信息">向包传递信息</span></h2><p>临时包可以作为一种包的选择，或在解析中将信息传递给软件包的一种方式。如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'bah'</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> intersects<span class="token punctuation">(</span>ephemerals<span class="token punctuation">.</span>get_range<span class="token punctuation">(</span><span class="token string">'bah.cli'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;root&#125;/bin'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当检查到临时包bah.cli在运行时存在，bah包将不执行它自身的command。</p><p>临时包可以是任何东西，因此你可以决定将它们用作全局包选项。</p><p>下面的这个示例，引用了一个充当全局白名单的cli临时包：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'bah'</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> intersects<span class="token punctuation">(</span>ephemerals<span class="token punctuation">.</span>get_range<span class="token punctuation">(</span><span class="token string">'cli'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'bah'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;root&#125;/bin'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，如果没有在命令中指定.cli，则将激活所有cli包。否则它将作为一个白名单。</p><h2><span id="表示抽象包">表示抽象包</span></h2><p>有时一个包需要某种形式的抽象对象或功能，而不是一个实际的包。</p><p>例如你的软件包需要GPU在主机上存在，为此需要进行设置，让所有带有GPU主机上的<code>implicits</code>列表包含<code>.gpu-1</code>临时包。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'pixxelator'</span>variants <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'.gpu-0'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># renders via CPU</span>    <span class="token punctuation">[</span><span class="token string">'.gpu-1'</span><span class="token punctuation">]</span>  <span class="token comment"># renders via GPU</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08 Variants</title>
      <link href="//08%20rez-variants/"/>
      <url>//08%20rez-variants/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>rez的包可以包含不同的变体（variant），可以把它看作同一个包版本的不同变种。<br>每个变体都有一个或多个相对于当前包不同的依赖关系。</p><p>假定一个场景来说明变体的使用：</p><p>有一个maya插件my_maya_plugin，公司有两个maya版本分别为2016-sp2和2017。<br>如果你的插件已经编译，而你需要在每个不同的maya版本中构建它。（即使源代码是相同的）<br>这个时候就可以使用变体来创建插件版本，像这样来定义插件的package文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"my_maya_plugin"</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span>requires <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"openexr-2.2"</span><span class="token punctuation">]</span>variants <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"maya-2016.sp2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"maya-2017"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当构建这个插件的时候，会根据当前maya版本选择相应的变体。（在给定的配置环境中，只会使用包的一种变体）<br>每个变体条目都有一个依赖列表，与requires列表里的没有什么不同。<br>第一个变体需要openexr-2.2和maya-2016sp2，第二个变体需要openexr-2.2和maya-2017。</p><h1><span id="结构">结构</span></h1><p>程序包变体存储在程序包符合变体要求的子目录下。例如刚刚示例中的my_maya_plugin软件包：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/rez/packages/my_maya_plugin/1.0.0/maya-2016.sp2/<span class="token operator">&lt;</span>PAYLOAD<span class="token operator">></span>                                  /maya-2017/<span class="token operator">&lt;</span>PAYLOAD<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下图展示了一个包含各种变体的包：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-variants/p1.png"></p><p>包的根目录是它当前变体的根目录（当前环境配置使用的那个）</p><h1><span id="哈希">哈希</span></h1><p>如上所示变体路径有两个问题：</p><ul><li>如果需求有很多，则变体安装路径会很长</li><li>如果一些变体的需求里包含类似<code>!</code>和 <code>&lt;</code> 的字符，它们可能会导致系统构建的泄漏问题。<br>对于不同的系统平台来说，可能不是有效的文件系统路径</li></ul><p>你可以通过哈希命名来避免这些问题，将变体的路径设置为其需求的哈希值。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/rez/packages/my_maya_plugin/1.0.0/83e0c415db1b602f9d59cee028da6ac785e9bacc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以通过变体的短链接来访问相同的路径，需要在已解析的环境中使用。</p><p>短链接是指向每个变体的符号链接，默认是<code>_v</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/rez/packages/my_maya_plugin/1.0.0/_v/a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须为包的定义设置中启用哈希变体：<br><code>hashed_variants = True</code></p><h1><span id="不同系统平台的变体">不同系统平台的变体</span></h1><p>在软件包定义中看到针对不同系统平台，架构而配置的变体并不少见。如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in package.py</span>variants <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"platform-linux"</span><span class="token punctuation">,</span> <span class="token string">"arch-x86_64"</span><span class="token punctuation">,</span> <span class="token string">"os-Ubuntu-12.04"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"platform-linux"</span><span class="token punctuation">,</span> <span class="token string">"arch-x86_64"</span><span class="token punctuation">,</span> <span class="token string">"os-Ubuntu-16.04"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这表明了可以针对多个系统平台创建。</p><h1><span id="单一变体">单一变体</span></h1><p>通常我们只会看到一种变体的程序包，因为：</p><ul><li>比如一个编译过的python包，暂时只支持python2.7，这个时候就只存在一种变体。不过可以在以后编译包更新了在添加变体，从而不需要迁移到新版本。</li><li>安装路径。人们希望可以从安装包路径中看到一些相关信息，譬如平台，架构，操作系统等。通过将这些依赖项放到变体中，使它们出现在程序包的安装路径中。</li></ul><h1><span id="变体的选择">变体的选择</span></h1><p>如之前所说的，rez会根据解析的环境自动选择正确的变体。例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env my_maya_plugin maya-2017 -- <span class="token builtin class-name">echo</span> <span class="token string">'$REZ_MY_MAYA_PLUGIN_ROOT'</span>/rez/packages/my_maya_plugin/1.0.0/maya-2017<span class="token punctuation">]</span>$ rez-env my_maya_plugin maya-2016 -- <span class="token builtin class-name">echo</span> <span class="token string">'$REZ_MY_MAYA_PLUGIN_ROOT'</span>/rez/packages/my_maya_plugin/1.0.0/maya-2016.sp2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果两种变体给定的请求都有效且满足，如下操作（这里maya不在请求中）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env my_maya_plugin -- <span class="token builtin class-name">echo</span> <span class="token string">'$REZ_MY_MAYA_PLUGIN_ROOT'</span>/rez/packages/my_maya_plugin/1.0.0/maya-2017<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>my_maya_plugin的任何一种变体都可以满足要求，因为我们没有指定实际需要哪个版本的maya。<br>默认情况下，rez会选择更高的程序包版本，这也是为什么上述例子中选择了maya-2017的原因。</p><p>如果给定选择，则优先选择给定的变体。如果没有则优先选择列表中前面列出的变体，<br>看下面这个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"foo"</span>variants <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"python-2.6"</span><span class="token punctuation">,</span> <span class="token string">"maya-2017"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"python-2.7"</span><span class="token punctuation">,</span> <span class="token string">"maya-2016"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果运行<code>rez-env foo</code> ，它将选择第二种变体，因为这个时候python具有优先级（变体中列出的第一个包），<br>且第二个变体的python版本更高。</p><p>但如果运行<code>rez-env foo maya</code>这个命令的话，将得到第一个变体，因为在命令中把优先级给了maya，<br>第一个变体的maya版本更高。</p><p>rez的配置设置”variant_select_mode”影响选择方式。刚刚描述的是”version_priority”的方式，<br>还有另外一种方式”intersection_priority”，这种模式下，请求中包数量最多的变体是优先，然后再是版本。</p><h2><span id="排他性">排他性</span></h2><p>在上述的例子中，变体都是相互排斥的，例如不能在同一个环境拥有python-2.6和python-2.7。<br>所以当我们请求”foo python-2.6”的时候，可以确定得到的是哪个变体。<br>然而，变体并不总会相互排斥，比如下面这个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"geocache"</span>variants <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"maya-2016"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"houdini-14"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们运行<code>rez-env geocache</code>，我们会得到哪一个变体？这里肯定不能直接用版本进行比较，<br>那如果我们这样进行选择<code>rez-env geocache maya</code>，也许会得到第一个变体？</p><p>这里的关键字”maya”是选择偏好，但因为变体不是互斥的，所以我们不能保证上述的解决方案是确定的。<br>再看下面这个例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env geocache maya animtools-1.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们请求geocache时，期望获得maya-2016的变体。但animtools需要maya-2017该怎么办？<br>这将导致rez无法选择geocache中的第一个变体maya，而去选择第二个houdini，这是错误的。</p><p><strong>Notes</strong>：rez计划添加一个新的包请求语法，能够显式的选择包变体，避免这样的歧义。</p><h1><span id="为什么使用变体">为什么使用变体</span></h1><p>变体是rez中的一种强大的机制。</p><p>它们避免了为支持不同的依赖关系而维护大量独立包的繁琐需求。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07 Package Definition Guide</title>
      <link href="//07%20rez-package-definition-guide/"/>
      <url>//07%20rez-package-definition-guide/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>软件包的定义来自文件（package.py），位于每个包安装的根目录下。<br>比如包的存储位置为<code>/packages/inhouse</code>，则包”foo-1.0.0”的定义文件路径是：<br><code>/packages/inhouse/foo/1.0.0/package.py</code></p><p>这里是一个定义文件的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'sequence'</span>version <span class="token operator">=</span> <span class="token string">'2.1.2'</span>description <span class="token operator">=</span> <span class="token string">'Sequence detection library.'</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ajohns'</span><span class="token punctuation">]</span>tools <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'lsq'</span><span class="token punctuation">,</span>    <span class="token string">'cpq'</span><span class="token punctuation">]</span>requires <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'python-2.6+&lt;3'</span><span class="token punctuation">,</span>    <span class="token string">'argparse'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/bin"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>PYTHONPATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/python"</span><span class="token punctuation">)</span>uuid <span class="token operator">=</span> <span class="token string">'6c43d533-92bb-4f8b-b812-7020bf54d3f1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="软件包属性">软件包属性</span></h1><p>包定义文件中的每一个变量都会成为已构建或已安装的软件包的属性。<br>所以你可以在包中添加任何自定义属性，不过有些属性并作为包的属性添加，<br>比如下面这个：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sysdescription <span class="token operator">=</span> <span class="token string">"This package was built on %s"</span> <span class="token operator">%</span> sys<span class="token punctuation">.</span>platform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为我们并不想让sys成为一个包属性，这会和python标准模块冲突。<br>所以不会成为包属性的包括：</p><ul><li>python 模块</li><li>函数，不包括预/后绑定函数，不包含命令和相关函数</li><li>任何前面有双下划线的变量</li><li>任何作为构建时软件属性的变量</li></ul><h1><span id="包属性作为函数">包属性作为函数</span></h1><p>包属性可以包装成函数，函数的返回值为属性值。</p><p>有两种类型的属性函数：<br><strong>预绑定函数</strong>(early binding function)和<strong>后绑定函数</strong>(late binding function)。<br>它们分别使用装饰器<code>@early</code>和<code>@late</code>来装饰。</p><p>包定义的commands函数是例外，它们是后期绑定，但与标准的函数属性不同，不能用上述的装饰器来装饰。</p><h2><span id="预绑定函数">预绑定函数</span></h2><p>预绑定函数使用<code>@early</code>装饰器，它们在构建时执行，任何包属性都可以作为预绑定函数来实现。<br>这是一个authors属性的示例，该函数返回包的git项目的贡献者：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> subprocess    p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"git shortlog -sn | cut -f2"</span><span class="token punctuation">,</span>                         shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>    out<span class="token punctuation">,</span> _ <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预绑定函数还可以访问其它软件包的属性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># a not very useful description</span>    <span class="token keyword">return</span> <span class="token string">"%s version %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>this<span class="token punctuation">.</span>name<span class="token punctuation">,</span> this<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：不要在预绑定函数中使用其它预绑定函数或后绑定函数的属性，否则会报错。</p><p>预绑定函数很方便的一点是，你可以使用任意的函数来替代，像这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"%s version %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>this<span class="token punctuation">.</span>name<span class="token punctuation">,</span> this<span class="token punctuation">.</span>version<span class="token punctuation">)</span>description <span class="token operator">=</span> _description<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可用对象：</strong></p><ul><li>building：返回值为布尔，如果正在构建返回True</li><li>build_variant_index：当前正在构建variant的索引值，只有当building为True才有效。</li><li>build_variant_requires：当前构建的软件包的子集，是PackageRequest对象的列表，只有当building为True才有效。</li><li>this：当前包。</li></ul><p><strong>注意：</strong>预绑定函数实际上会在构建过程中执行多次，在构建期间进行一次，然后对每个变体进行一次。这是为了让预绑定函数可以根据比如build_variant_index等variant来更改它们的返回值。</p><p>比如你希望requires字段仅在运行时返回某个软件包（软件包构建的时候不需要返回那个软件包）。<br>可以这样写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">requires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> building<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"python-2"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"runtimeonly-1.2"</span><span class="token punctuation">,</span> <span class="token string">"python-2"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="后绑定函数">后绑定函数</span></h2><p>后绑定函数作为函数保留在已安装的软件包定义中，<br>并且在第一次调用的时候才进行求值（然后会将返回值进行缓存）。<br>允许的属性有：</p><ul><li>requires</li><li>build_requires</li><li>private_build_requires</li><li>tools</li><li>help</li><li>any arbitrary attribute</li></ul><p>下面是一个后绑定函数的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@late</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os    <span class="token comment"># get everything in bin dir</span>    binpath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>this<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"bin"</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>binpath<span class="token punctuation">)</span>    <span class="token comment"># we don't want artists to see the admin tools</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"_USER_ROLE"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"superuser"</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"delete-all"</span><span class="token punctuation">,</span> <span class="token string">"mod-things"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：后绑定函数使用到的模块必须在函数内进行导入，而不是package.py文件顶部。<br>还有一点是，比如函数只是为了返回bin目录的一个路径，最好是将它写作为一个预绑定函数，<br>这样对性能来说更节省。</p><p>但如果有一个环境变量”_USER_ROLE”是在构建时未知的，则适用于写作后绑定函数。<br>有时候我们会通过预绑定函数来存储一个属性来减少运行时的成本，再到后绑定函数中直接读取这个属性，<br>比如下面这个示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@late</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os    result <span class="token operator">=</span> this<span class="token punctuation">.</span>_tools    <span class="token comment"># we don't want artists to see the admin tools</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"_USER_ROLE"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"superuser"</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"delete-all"</span><span class="token punctuation">,</span> <span class="token string">"mod-things"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os    <span class="token keyword">return</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"./bin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意在上述的代码中，_tools函数使用的一个相对路径，因为预绑定函数在进行构建求值时，该软件包是处于尚未安装的状态，所以诸如<code>this.root</code>之类的属性是不存在的。</p><p><strong>in_context 函数</strong></p><p>当后绑定函数求值时，将存在一个布尔函数in_context，如果软件包在解析后的环境中，返回True。<br>比如，仅使用rez API遍历软件包（如rez-search工具），则这些程序不属于解析后环境。</p><p>但如果创建一个ResolvedContext对象（如rez-env工具所做的）并遍历其已解析的软件包，则它们属于in_context。下面同样是一个示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@late</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"edit"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> in_context<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token string">"maya"</span> <span class="token keyword">in</span> request<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"maya-edit"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里检查request对象，查看是否当前环境请求了maya软件。如果是，将maya-edit工具加入列表。</p><p><strong>有效对象</strong></p><p>如果in_context返回True，下面是一些可用对象：</p><ul><li>context</li><li>system</li><li>building</li><li>request</li><li>implicits</li></ul><p>下面是无论in_context返回值，都可以使用的对象：</p><ul><li>this</li><li>in_context</li></ul><p><strong>示例 - 后绑定函数中的build_requires</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"maya_thing"</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span>variants <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"maya-2017"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"maya-2018"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@late</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">build_requires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> this<span class="token punctuation">.</span>is_package<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> this<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"maya_2017_build_utils"</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"maya_2018_build_utils"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对this.is_package检查，实际上如果运行下面的命令，this的字段是一个包实例，并没有索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">]</span>$ rez<span class="token operator">-</span>search maya_thing <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">type</span> package <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">format</span> <span class="token string">'&#123;build_requires&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这种情况下，this.is_package和this.index的返回值都为False，但是仍然可以用else返回一些值。</p><h1><span id="跨软件包共享">跨软件包共享</span></h1><p>跨包定义函数的属性是可以共享的，但是根据函数是预先绑定还是后绑定，机制上有些不同。</p><p>这是为了避免已经安装的软件包依赖于随时可能更改的外部代码。但是依赖于外部代码的构建是没有问题的。</p><h2><span id="在构建期间共享">在构建期间共享</span></h2><p>函数在package.py文件中构建的功能包括：</p><ul><li>预处理功能</li><li>任何使用<code>@early</code>装饰器实现为功能的包属性</li></ul><p>你可以使用<code>package_definition_build_python_paths</code>配置通用的共享属性。</p><h2><span id="在已经安装的程序之间共享">在已经安装的程序之间共享</span></h2><p>包括：</p><ul><li>各种<code>commands</code>函数属性</li><li>任何使用<code>@late</code>装饰器装饰的函数属性</li></ul><p>使用装饰器<code>@include</code>将函数进行共享，该装饰器依赖于<code>package_definition_python_path</code>的设置。</p><p>下面是一个共享模块包命令的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in package.py</span><span class="token decorator annotation punctuation">@include</span><span class="token punctuation">(</span><span class="token string">"utils"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    utils<span class="token punctuation">.</span>set_common_env_vars<span class="token punctuation">(</span>this<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="requires扩展">requires扩展</span></h1><p>通常软件包在构建时，可能比运行时需要更多的依赖项兼容。</p><p>例如，一个C++包可以针对任何版本的boost-1进行构建，但是有时需要链接到它针对的特定小版本，比如boost-1.55。你可以使用通配符号在requires属性（或任何相关属性比如build_requires）中这样去描述它：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">requires <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"boost-1.*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你也可以将requires作为一个预绑定函数来实现刚刚的需求，结合rez包的expand_requires函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">requires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> rez<span class="token punctuation">.</span>package_py_utils <span class="token keyword">import</span> expand_requires    <span class="token keyword">return</span> expand_requires<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"boost-1.*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="软件包预处理">软件包预处理</span></h1><p>你可以在全局或者在package.py文件中定义预处理功能。在构建软件包之前，<br>可以使用它来验证软件包，甚至修改某些属性。要设置这个功能，参考：<br><a href="https://github.com/nerdvegas/rez/wiki/Configuring-Rez#package_preprocess_function">package_preprocess_function</a>配置设置。</p><p>看下面这个预处理示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>package<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> rez<span class="token punctuation">.</span>package_py_utils <span class="token keyword">import</span> InvalidPackageError    <span class="token keyword">import</span> re    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"[a-z]+$"</span><span class="token punctuation">,</span> package<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> InvalidPackageError<span class="token punctuation">(</span><span class="token string">"Invalid name, only lowercase letters allowed"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> package<span class="token punctuation">.</span>authors<span class="token punctuation">:</span>        <span class="token keyword">from</span> preprocess_utils <span class="token keyword">import</span> get_git_committers        data<span class="token punctuation">[</span><span class="token string">"authors"</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_git_committers<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的预处理程序会根据正则来检查软件包名称，并将包的authors属性设置为git_committers的返回值<br>（当包没有给予这个属性的时候）。如果软件包名称没有通过检查，需要停止构建，<br>必须在代码中引发一个”InvalidPackageError”的错误。</p><p><strong>Tips</strong>：要查看package.py的预处理内容，可以在其根目录运行命令：<br><code>rez-build --view-pre</code> 将会打印一个标准输出。</p><h2><span id="在预处理中覆盖配置设置">在预处理中覆盖配置设置</span></h2><p>比如在预处理中，覆盖软件包发布路径设置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in package.py</span><span class="token keyword">with</span> scope<span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>    c<span class="token punctuation">.</span>release_packages_path <span class="token operator">=</span> <span class="token string">"/software/packages/external"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假设一个场景，我们希望将第三方包安装到特定的路径，并且将这些包的属性”external”为True，我们可以在全局预处理函数中这样设置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>package<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"external"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        _ <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"config"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"release_packages_path"</span><span class="token punctuation">]</span>        <span class="token keyword">return</span>  <span class="token comment"># already explicitly specified by package</span>    <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    data<span class="token punctuation">[</span><span class="token string">"config"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"config"</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    data<span class="token punctuation">[</span><span class="token string">"config"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"release_packages_path"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/software/packages/external"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="软件包范例">软件包范例</span></h1><p>下面是一个软件包定义文件，演示了几个特性。<br>这是个python软件包，该软件包不会实际安装python，而是检测现有系统的python安装，<br>并将其绑定到rez软件包中。（结合上述的知识来阅读它吧）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"python"</span><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>__version <span class="token operator">+</span> <span class="token string">"-detected"</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"Guido van Rossum"</span><span class="token punctuation">]</span>description <span class="token operator">=</span> \    <span class="token triple-quoted-string string">"""    The Python programming language.    """</span><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">variants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> rez<span class="token punctuation">.</span>package_py_utils <span class="token keyword">import</span> expand_requires    requires <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"platform-**"</span><span class="token punctuation">,</span> <span class="token string">"arch-**"</span><span class="token punctuation">,</span> <span class="token string">"os-**"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>expand_requires<span class="token punctuation">(</span><span class="token operator">*</span>requires<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    version_parts <span class="token operator">=</span> this<span class="token punctuation">.</span>__version<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string">"2to3"</span><span class="token punctuation">,</span>        <span class="token string">"pydoc"</span><span class="token punctuation">,</span>        <span class="token string">"python"</span><span class="token punctuation">,</span>        <span class="token string">"python%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>version_parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"python%s.%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>version_parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> version_parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>uuid <span class="token operator">=</span> <span class="token string">"recipes.python"</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;this._bin_path&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> building<span class="token punctuation">:</span>        env<span class="token punctuation">.</span>CMAKE_MODULE_PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/cmake"</span><span class="token punctuation">)</span><span class="token comment"># --- internals</span><span class="token keyword">def</span> <span class="token function">_exec_python</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> subprocess    p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>        <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> src<span class="token punctuation">]</span><span class="token punctuation">,</span>        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>    out<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>returncode<span class="token punctuation">:</span>        <span class="token keyword">from</span> rez<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> InvalidPackageError        <span class="token keyword">raise</span> InvalidPackageError<span class="token punctuation">(</span>            <span class="token string">"Error determining package attribute '%s':\n%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>attr<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_bin_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>_exec_python<span class="token punctuation">(</span>        <span class="token string">"_bin_path"</span><span class="token punctuation">,</span>        <span class="token string">"import sys, os.path; print(os.path.dirname(sys.executable))"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> _exec_python<span class="token punctuation">(</span>        <span class="token string">"version"</span><span class="token punctuation">,</span>        <span class="token string">"import sys; print(sys.version.split()[0])"</span><span class="token punctuation">)</span>__version <span class="token operator">=</span> _version<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="软件包标准属性">软件包标准属性</span></h1><h2><span id="authorslist-of-string">authors（List of string）</span></h2><p><code>authors = [&quot;jchrist&quot;, &quot;sclaus&quot;]</code></p><p>软件包的作者，顺序从主要贡献者开始。</p><h2><span id="build_requireslist-of-string">build_requires（List of string）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">build_requires <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"cmake-2.8"</span><span class="token punctuation">,</span>    <span class="token string">"doxygen"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与require相同，只是这些依赖项只包含在构建期间（通常配合rez-build调用）</p><h2><span id="cachableboolean">cachable（Boolean）</span></h2><p><code>cachable = True</code></p><p>在启用包缓存时，是否可以缓存包。如果没有提供此参数，则由全局配置的”default_cachable”和相关的”default_cachable_*”设置中获取。</p><h2><span id="commandsfunction">commands（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>PYTHONPATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/python"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/bin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一个python代码块，告诉rez如何使用这个包更新环境。比如：</p><ul><li>设置，取消，前置或附加环境变量</li><li>创建别名</li><li>执行脚本</li><li>打印信息</li></ul><h2><span id="config">config</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> scope<span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    release_packages_path <span class="token operator">=</span> <span class="token string">"/software/packages/apps"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>软件包可以使用它来覆盖rez配置设置。只在某些情况下有效，比如我们希望将包发布到一个与默认目录不同的路径。</p><h2><span id="descriptionstring">description（String）</span></h2><p><code>description = &quot;Library for communicating with the dead.&quot;</code><br>对软件包的总体描述。不要用它描述关于包的特定版本和细节，只应该提到包的一般特性。</p><h2><span id="has_pluginsboolean">has_plugins（Boolean）</span></h2><p><code>has_plugins = True</code><br>标识这个包是有插件的。</p><h2><span id="hashed_variantsboolean">hashed_variants（Boolean）</span></h2><p><code>hashed_variants = True</code><br>标识软件包根据variants内容的哈希值将variants安装到子目录中。</p><h2><span id="helpstring-or-list-of-string">help（String or List of string）</span></h2><p><code>help = &quot;https://github.com/nerdvegas/rez/wiki&quot;</code><br>软件包的帮助url页面，如果是包含空格的字符，则是要运行的命令。<br>如果是一个列表，代表帮助条目，可以使用SECTION参数指定要查看的条目。</p><h2><span id="namestringmandatory">name（String，mandatory）</span></h2><p><code>name = &quot;maya_utils&quot;</code><br>包的名称。允许使用字母数字和下划线，名称区分大小写。</p><h2><span id="plugin_forstring">plugin_for（String）</span></h2><p><code>plugin_for = &quot;maya&quot;</code><br>表明这个包是另一个包的插件。如上例子，这是一个maya插件。</p><h2><span id="post_commandsfunction">post_commands（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">post_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>FOO_PLUGIN_PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与pre_commands类似，但在最后运行，而不是在开始阶段。</p><h2><span id="pre_commandsfunction">pre_commands（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pre_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os<span class="token punctuation">.</span>path    env<span class="token punctuation">.</span>FOO_PLUGIN_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>this<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"plugins"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和commands一样，执行顺序是pre_commands优先执行，然后是commands，最后是post_commands。</p><h2><span id="pre_test_commandsfunction">pre_test_commands（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pre_test_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> test<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"unit"</span><span class="token punctuation">:</span>        env<span class="token punctuation">.</span>IS_UNIT_TEST <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和commands类似，但它是在测试中的定义的每个测试之前运行。</p><h2><span id="relocatableboolean">relocatable（Boolean）</span></h2><p><code>relocatable = True</code><br>确定这个包是否可以复制到另一个包存储库。（例如使用rez-cp命令）<br>如果没有提供，则由全局配置”default_relocatable”和相关设置”default_relocatable_*”设置确定。</p><h2><span id="requireslist-of-string">requires（List of string）</span></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">requires = <span class="token punctuation">[</span>    <span class="token string">"python-2"</span><span class="token punctuation">,</span>    <span class="token string">"maya-2016"</span><span class="token punctuation">,</span>    <span class="token string">"maya_utils-3.4+&lt;4"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是包所依赖的其它包列表。</p><h2><span id="testsdict">tests（Dict）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tests <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"unit"</span><span class="token punctuation">:</span> <span class="token string">"python -m unittest discover -s &#123;root&#125;/python/tests"</span><span class="token punctuation">,</span>    <span class="token string">"lint"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"command"</span><span class="token punctuation">:</span> <span class="token string">"pylint mymodule"</span><span class="token punctuation">,</span>        <span class="token string">"requires"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pylint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"run_on"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"pre_release"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"maya_CI"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"command"</span><span class="token punctuation">:</span> <span class="token string">"python &#123;root&#125;/ci_tests/maya.py"</span><span class="token punctuation">,</span>        <span class="token string">"on_variants"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"requires"</span><span class="token punctuation">,</span>            <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"maya"</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"run_on"</span><span class="token punctuation">:</span> <span class="token string">"explicit"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义的这个字典，代表可以使用rez-test工具在软件包运行测试。</p><p>例如在上述带有test属性的包maya_utils上运行linter：</p><pre class="line-numbers language-none"><code class="language-none">]$ rez-test maya_utils lint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果测试条目是一个字符串或一个字符串列表，这将会解释为要运行的命令。<br>字符串扩展任何包属性引用，比如{root}。<br>如果提供了一个嵌套字典，你可以为每个测试指定额外的字段：</p><ul><li><strong>requires</strong>: 要包含在测试运行时env中额外包的依赖</li><li><strong>on_variants</strong>：哪些variants可以在测试里生效<ul><li><strong>True</strong>：所有variants</li><li><strong>False</strong>：只在一个variant上进行测试，即在env被解析时获得的variant（默认值）</li><li><strong>Dict</strong>：选择的variants，可以参考上面的”maya_CI”下”on_variants”的值</li></ul></li><li><strong>run_on</strong>: 什么时候运行这个测试。有效值:<ul><li><strong>default</strong>:  在不指定测试参数的情况下运行rez-test</li><li><strong>pre_install</strong>：在安装之前运行（即rez-build -i），并在安装失败后中止安装</li><li><strong>pre_release</strong>：在发布之前运行，失败则中止发布</li><li><strong>explicit</strong>：当rez-test运行时，仅在指定为TEST参数的时候执行</li></ul></li></ul><h2><span id="toolslist-of-string">tools（List of string）</span></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">tools = <span class="token punctuation">[</span>    <span class="token string">"houdini"</span><span class="token punctuation">,</span>    <span class="token string">"hescape"</span><span class="token punctuation">,</span>    <span class="token string">"hython"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>软件包提供的工具列表。</p><h2><span id="uuidstring">uuid（String）</span></h2><pre class="line-numbers language-none"><code class="language-none">uuid &#x3D; &quot;489ad32867494baab7e5be3e462473c6&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个唯一值，可以用于标识相似名称的两个包。（一旦设置就不要更改它）<br>可以这样去获得一个uuid：</p><pre class="line-numbers language-none"><code class="language-none">]$ python -c &#39;import uuid; print(uuid.uuid4().hex)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="variantslist-of-list-of-string">variants（List of list of string）</span></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">variants = <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"maya-2015.3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"maya-2016.1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"maya-2016.7"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个包可以包含的各种变体，可以看作是同一个包的不同版本变体，具有不同的依赖性。</p><h2><span id="versionstring">version（String）</span></h2><p><code>version = &quot;1.0.0&quot;</code><br>标识这个包的版本。</p><h1><span id="构建包时的属性">构建包时的属性</span></h1><p>这些属性只在包构建的时候生效，一旦安装完成，这些属性就走了。  </p><h2><span id="build_commandstring-or-false">build_command（String or False）</span></h2><p><code>build_command = &quot;bash &#123;root&#125;/build.sh &#123;install&#125;&quot;</code>  </p><p>包的构建命令。如果设置，它将在运行”rez-build”时执行这个构建命令。<br>如果为False，则不需要任何构建步骤（仍然会安装包）。<br>{root}字符同样是可用的字符扩展，代表构建路径根目录。<br>{install}字符为“install”如果安装正在进行，否则为空。<br>可以在build命令中引用的变量有：</p><ul><li>root</li><li>install</li><li>build_path：构建路径（也就是当前工作目录）</li><li>install_path：安装目标的完整路径</li><li>name：正在构建包的名称</li><li>variant_index：当前构建variant的索引</li><li>version：当前正在构建包的版本</li></ul><h2><span id="build_systemstring">build_system（String）</span></h2><p><code>build_system = &quot;cmake&quot;</code><br>指定构建这个包所使用的构建系统，如果未设置则在构建时自动检测。<br>或者也可以使用 —build-system option 来指定。  </p><h2><span id="pre_build_commandsfunction">pre_build_commands（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pre_build_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>FOO_BUILT_BY_REZ <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与commands类似，不同的是它在构建包之前运行。</p><h2><span id="preprocessfunction">preprocess（Function）</span></h2><p>见本文之前讲到的 “软件包预处理”  </p><h2><span id="private_build_requireslist-of-string">private_build_requires（List of string）</span></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">private_build_requires = <span class="token punctuation">[</span>    <span class="token string">"cmake-2.8"</span><span class="token punctuation">,</span>    <span class="token string">"doxygen"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与build_requires相同，区别是这些依赖项只有在构建时才包括。</p><h2><span id="requires_rez_versionstring">requires_rez_version（String）</span></h2><p><code>requires_rez_version = &quot;2.10&quot;</code><br>定义了软件包所需的rez最小版本。</p><h1><span id="发布包时的属性">发布包时的属性</span></h1><p>当你的包通过rez-release工具发布时，Rez会创建以下包属性：</p><h2><span id="changelogstring">changelog（String）</span></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">changelog = \    <span class="token string">""</span>"    commit 22abe31541ceebced8d4e209e3f6c44d8d0bea1c    Author<span class="token operator">:</span> allan johns &lt;nerdvegas at gee mail dot com>    Date<span class="token operator">:</span>   Sun May <span class="token number">15</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">10</span> <span class="token number">2016</span> <span class="token number">-0700</span>        first commit    <span class="token string">""</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含上次发布到现在的所有提交更改日志。这个更新日志的语法取决于版本管理工具，这里是基于git的一个例子。</p><h2><span id="previous_revisiontype-varies">previous_revision（Type varies）</span></h2><p>先前发布的软件包的修订信息。（如果有）</p><h2><span id="previous_versionstring">previous_version（String）</span></h2><p><code>previous_version = &quot;1.0.1&quot;</code><br>先前发布的包的版本(如果有的话)。</p><h2><span id="release_messagestring">release_message（String）</span></h2><p><code>release_message = &quot;Fixed the flickering thingo&quot;</code><br>程序包发布信息。可以通过发布工具<code>rez-release —message option</code>设置，<br>或者在发布时的文本编辑器中输入（后者需要rez配置设置TODO_ADD_THIS）。</p><h2><span id="revisiontype-varies">revision（Type varies）</span></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">revision = \    <span class="token punctuation">&#123;</span>'branch'<span class="token operator">:</span> 'master'<span class="token punctuation">,</span>     'commit'<span class="token operator">:</span> '22abe31541ceebced8d4e209e3f6c44d8d0bea1c'<span class="token punctuation">,</span>     'fetch_url'<span class="token operator">:</span> 'git@github.com<span class="token operator">:</span>nerdvegas/dummy.git'<span class="token punctuation">,</span>     'push_url'<span class="token operator">:</span> 'git@github.com<span class="token operator">:</span>nerdvegas/dummy.git'<span class="token punctuation">,</span>     'tracking_branch'<span class="token operator">:</span> 'origin/master'<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关已发布包源代码修订信息。数据类型由所用的版本控制工具确定，这里是git-based的修订信息。</p><h2><span id="timestampinteger">timestamp（Integer）</span></h2><p><code>timestamp = 1463350552</code><br>包发布的时间。</p><h2><span id="vcsstring">vcs（String）</span></h2><p><code>vcs = &quot;git&quot;</code><br>发布包的版本控制工具的名字。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06 Package Commands</title>
      <link href="//06%20rez-package-commands/"/>
      <url>//06%20rez-package-commands/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>程序包定义文件（package.py）通常定义命令的部分。<br>这是一个例子，用于确定如何配置环境和软件包的Python函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  env<span class="token punctuation">.</span>PYTHONPATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/python"</span><span class="token punctuation">)</span>  env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/bin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是一个典型例子，程序包将其路径添加到PYTHONPATH，并将其工具添加到PATH。<br><code>&#123;root&#125;</code> 字符串代表软件包的安装目录。</p><p>配置rez环境后，解析列表中的每个软件包都将其命令部分解释并转换为shell代码。<br>（bash或其它，这取决于系统平台。）shell代码是源代码，用于配置环境。<br>在已配置的环境中，变量<code>REZ_CONTEXT_FILE</code>指向此shell代码文件，</p><p>然后命令<code>rez-context-interper</code>会对其进行打印输出。</p><p>在commands函数中使用的python API称为rex（rez执行语言）。<br>你可以使用此API执行一些常见操作，包括设置环境变量。</p><p><strong>注意</strong>：如果需要导入任何python模块在命令部分中使用，则import语句必须在该函数中。</p><h1><span id="执行顺序">执行顺序</span></h1><p>包的commands执行顺序取决于两个因素，请求包的顺序和包之间的依赖关系。</p><ul><li>如果程序包B之前请求了程序包A，则A的命令在B之前解释执行</li><li>除非程序包A需要（取决于）程序包B，在这种情况下，程序包B将优先解释执行</li></ul><p>比如一个名为”maya_anim_tool”的包，肉眼可见的它是一个maya插件，它依赖于maya。<br>因此，将优先解释执行maya的命令，这是因为maya插件可能取决于maya设置的某些环境变量。<br>maya会初始化MAYA_PLUG_IN_PATH变量，然后”maya_anim_tool”会添加到这里面。</p><p>一个例子：<br><code>rez-env maya_anim_tool-1.3+ PyYAML-3.10 maya-2015</code></p><p>假设PyYAML依赖于python，而maya_anim_tool依赖于maya，则命令的执行顺序为：</p><ul><li>maya</li><li>maya_anim_tool</li><li>python</li><li>PyYAML</li></ul><h1><span id="添加环境变量">添加环境变量</span></h1><p>对于类PATH的环境变量，可以添加到此变量前面，或后面。<br>比如向后添加：<br><code>env.PATH.append(&quot;&#123;root&#125;/bin&quot;)</code></p><p>不过，对于任何给定变量的第一个append/prepend操作实际上会覆盖该变量。<br>因为考虑到了”PYTHONPATH”在系统级别上已经配置了一些PATH变量。  </p><p>例如，PyQt在系统变量的”PYTHONPATH”上，同时又使用rez-env设置了不同版本的PyQt，<br>那么在已配置版本的环境中导入它，仍然会不正确的导入系统版本。</p><p><strong>Tips</strong>：<br>PATH比较特殊，它不是简单的覆盖，因为这样会丢失一些重要的系统路径，比如无法使用<code>ls</code>或<code>cd</code>等命令。<br>通常这种情况下，在解释完所有命令后，系统路径将附加回PATH。</p><p>rez将来的新特性可以为变量指定各种模式，例如一种模式会将原始（pre-rez）值附加回结果值。</p><h1><span id="支持的字符引用">支持的字符引用</span></h1><h2><span id="可引用的对象字符">可引用的对象字符</span></h2><p>commands部分可用的任何对象都可以作为字符引用，该字符会传递给rex函数，例如：</p><p><code>appendenv(&quot;PATH&quot;, &quot;&#123;root&#125;/bin&quot;)</code></p><p>在这里”{root}”将解释为root的值，root的值是软件包的安装路径（也可以使用”this.root”）。</p><p>它的代码和下述是同样的意思，只是下述的代码更冗长：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>pathappendenv<span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过env对象还支持下面这种写法：</p><p><code>env.FOO_LIC = &quot;&#123;this.root&#125;/lic&quot;</code></p><h2><span id="环境变量引用字符">环境变量引用字符</span></h2><p>支持语法是$FOO和${FOO}。</p><h2><span id="literal函数">Literal函数</span></h2><p>你可以使用<code>literal</code>函数，来将对象或环境变量的特殊字符注释掉。比如：</p><p><code>env.TEST = literal(&quot;this &#123;root&#125; will not expand&quot;)</code></p><p>它还有个扩展功能是，类似格式化字符的用法，将字符和变量组合起来：</p><p><code>env.DESC = literal(&quot;the value of &#123;root&#125; is&quot;).expandable(&quot;&#123;root&#125;&quot;)</code></p><h2><span id="expandvars函数">expandvars函数</span></h2><p>字符引用通常只在将字符传递给rex函数或env对象的时候发生。</p><p>例如一个简单的语句”var = {root}/bin”，这里的”{root}”就不会被解释成安装包路径。</p><p>但是可以使用<code>expandvars</code>函数来启用字符引用：</p><p><code>var = expandvars(&quot;&#123;root&#125;/bin&quot;)</code></p><h1><span id="预载和后置命令">预载和后置命令</span></h1><p>我们可以为程序包设置pre_commands或post_commands。</p><p>执行顺序为：</p><ul><li>所有软件包的pre_commands以标准顺序执行</li><li>然后执行所有包的commands</li><li>最后执行所有包的post_commands</li></ul><h1><span id="预构建命令">预构建命令</span></h1><p>在构建一个软件包的时候是不会执行commands的，原因是软件包不在其自身的构建环境中。</p><p>但是有时候需要在构建的时候运行命令，例如将一些环境变量传递到构建系统。</p><p><code>pre_build_commands</code>函数就可以实现。</p><h1><span id="预测试命令">预测试命令</span></h1><p>在运行包测试的环境中执行一些额外的配置很有用。</p><p>可以定义<code>pre_test_commands</code>函数来执行此操作。</p><h1><span id="一个例子">一个例子</span></h1><p>这是一个包定义的示例，其中的commands部分非常冗长：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"foo"</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span>requires <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"python-2.7"</span><span class="token punctuation">,</span>    <span class="token string">"~maya-2015"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> os<span class="token punctuation">.</span>path  <span class="token comment"># imports MUST be inline to the function</span>    <span class="token comment"># add python module, executables</span>    env<span class="token punctuation">.</span>PYTHONPATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;this.root&#125;/python"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;this.root&#125;/bin"</span><span class="token punctuation">)</span>    <span class="token comment"># show include path if a build is occurring</span>    <span class="token keyword">if</span> building<span class="token punctuation">:</span>        env<span class="token punctuation">.</span>FOO_INCLUDE_PATH <span class="token operator">=</span> <span class="token string">"&#123;this.root&#125;/include"</span>    <span class="token comment"># debug support to point at local config</span>    <span class="token keyword">if</span> defined<span class="token punctuation">(</span><span class="token string">"DEBUG_FOO"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        conf_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">"~/.foo/config"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        conf_file <span class="token operator">=</span> <span class="token string">"&#123;this.root&#125;/config"</span>    env<span class="token punctuation">.</span>FOO_CONFIG_FILE <span class="token operator">=</span> conf_file    <span class="token comment"># if maya is in use then include the maya plugin part of this package</span>    <span class="token keyword">if</span> <span class="token string">"maya"</span> <span class="token keyword">in</span> resolve<span class="token punctuation">:</span>        env<span class="token punctuation">.</span>MAYA_PLUG_IN_PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;this.root&#125;/maya/plugins"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> resolve<span class="token punctuation">.</span>maya<span class="token punctuation">.</span>version<span class="token punctuation">.</span>minor <span class="token operator">==</span> <span class="token string">"sp3"</span><span class="token punctuation">:</span>            error<span class="token punctuation">(</span><span class="token string">"known issue with GL renderer in service pack 3, beware"</span><span class="token punctuation">)</span>    <span class="token comment"># license file per major version</span>    env<span class="token punctuation">.</span>FOO_LIC <span class="token operator">=</span> <span class="token string">"/lic/foo_&#123;this.version.major&#125;.lic"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="可使用的对象">可使用的对象</span></h1><p>commands函数中（包括pre_commands和post_commands）可以使用各种对象和函数。<br>例如，env是类似dict对象，表示目标环境中构造的所有环境变量。<br>以下是可用对象和功能：</p><h2><span id="aliasfunction">alias（Function)</span></h2><p>创建一个命令别名。</p><p><code>alias(&quot;nukex&quot;, &quot;Nuke -x&quot;)</code></p><h2><span id="basestring">base（String）</span></h2><p><strong>this.base</strong>: 与this.root类似，但不包含变量的子路径（如果有的话）。</p><h2><span id="builddict-like-object">build（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> build<span class="token punctuation">.</span>install<span class="token punctuation">:</span>info<span class="token punctuation">(</span><span class="token string">"An installation is taking place"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个对象只能在”pre_build_commands”函数中使用。有以下字段：</p><ul><li><strong>build.build_type</strong>：参数可以是”local”或”central”，表示发布软件包在本地或是中央存储库。</li><li><strong>build.install</strong>： 如果安装在进行中返回True，否则返回False。</li><li><strong>build.build_path</strong>：构建目录的路径（不是安装路径）。通常位于要构建软件包的./build子目录中的某个位置。</li><li><strong>build.install_path</strong>：安装目录的路径。注意即使没有进行安装也会进行设置。（不要检查这个变量来检测是否正在安装）。</li></ul><h2><span id="buildingboolean">building（Boolean）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> building<span class="token punctuation">:</span>    env<span class="token punctuation">.</span>FOO_INCLUDE_PATH <span class="token operator">=</span> <span class="token string">"&#123;root&#125;/include"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果正在进行构建（通常用rez-build工具完成），则此布尔变量为True，否则为False。<br>常见的用法是，一个包会使用这个判断来设置环境变量，这些变量只在构建过程中生效。<br>比如上述的例子。</p><h2><span id="commandfunction">command（Function）</span></h2><p><code>command(&quot;rm -rf ~/.foo_plugin&quot;)</code></p><p>运行任意的shell命令。注意不能用这个函数来获取返回值，因为命令并没有运行。<br>只要在包被解释并转换为shell语言之后才会执行它们的命令。<br>如果有需要的话，尽可能在Python中执行简单的操作（例如文件操作等）。<br>它可以立即生效，且跨平台使用。如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> shutil    <span class="token keyword">import</span> os<span class="token punctuation">.</span>path    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">"~/.foo_plugin"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="commentfunction">comment（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">"nuke"</span> <span class="token keyword">in</span> resolve<span class="token punctuation">:</span>    comment<span class="token punctuation">(</span><span class="token string">"note: taking over 'nuke' binary!"</span><span class="token punctuation">)</span>    alias<span class="token punctuation">(</span><span class="token string">"nuke"</span><span class="token punctuation">,</span> <span class="token string">"foo_nuke_replacer"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在转换后的shell脚本代码中创建注释行。当用户使用命令<code>rez-context —interpret</code>或查看环境变量”REZ_CONTEXT_FILE”所引用的文件时，可以看到这个注释行。</p><h2><span id="definedfunction">defined（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> defined<span class="token punctuation">(</span><span class="token string">"REZ_MAYA_VERSION"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>FOO_MAYA <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个布尔函数将返回是否设置了这个环境变量。</p><h2><span id="envdict-like-object">env（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">env<span class="token punctuation">.</span>FOO_DEBUG <span class="token operator">=</span> <span class="token number">1</span>env<span class="token punctuation">[</span><span class="token string">"BAH_LICENSE"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/lic/bah.lic"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>env对象表示所配置的环境变量字典。需要注意的是，这和python的os.environ返回的字典不一样。<br>env只表示正在配置的环境，如果之前的程序通过env对象设置了变量，则只能在env中看到变量，<br>os.environ是看不到的，因为os.environ并不会随之更新。</p><p>env对象还提供以下功能：</p><ul><li><p>env.append（Function）<br><code>env.PATH.append(&quot;&#123;root&#125;/bin&quot;)</code><br>将值附加到环境变量中。默认它使用os.pathsep分隔符，<br>但是也可以配置”env_var_separators”覆盖它。</p></li><li><p>env.prepend（Function）<br><code>env.PYTHONPATH.prepend(&quot;&#123;root&#125;/python&quot;)</code><br>同上，只是将变量加到最前面。</p></li></ul><h2><span id="ephemeralsdict-like-object">ephemerals（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">"foo.cli"</span> <span class="token keyword">in</span> ephemerals<span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"Foo cli option is being specified!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代表已解析完成环境中的临时字典。字典里每一项都是一个字符串（例如fooc.li-1），使用get_range来测试intersects函数（一个布尔函数，如果给定对象的版本在给定版本范围内，则返回True），下面是一个用法示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> intersects<span class="token punctuation">(</span>ephemerals<span class="token punctuation">.</span>get_range<span class="token punctuation">(</span><span class="token string">"foo.cli"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"Enabling foo cli tools"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/bin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="errorfunction">error（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">"PyQt"</span> <span class="token keyword">in</span> resolve<span class="token punctuation">:</span>    error<span class="token punctuation">(</span><span class="token string">"The floob package has problems running in combo with PyQt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印一个标准错误，只有打印作用，不会阻止环境构建（要阻止使用stop命令）。</p><h2><span id="getenvfunction">getenv（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> getenv<span class="token punctuation">(</span><span class="token string">"REZ_MAYA_VERSION"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"2016.sp1"</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取环境变量的值，如果变量不存在，触发”RexUndefinedVariableError”。</p><h2><span id="implicitdict-like-object">implicit（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">"platform"</span> <span class="token keyword">in</span> implicits<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>类似于request对象（request表示程序包请求列表组成的字典），不同的是它仅包含由implicit_packages配置定义的包请求。</p><h2><span id="infofunction">info（Function）</span></h2><p><code>info(&quot;floob version is %s&quot; % resolve.floob.version)</code></p><p>打印一个标准输出。</p><h2><span id="intersectsfunction">intersects（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> intersects<span class="token punctuation">(</span>resolve<span class="token punctuation">.</span>maya<span class="token punctuation">,</span> <span class="token string">"2019+"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"Maya 2019 or greater is present"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个布尔函数，如果给定对象的版本在给定的版本范围内，则返回True。</p><p>可查询的有效对象包括：</p><ul><li>一个已解析的包，eg <code>resolve.maya</code></li><li>一个包请求，eg <code>request.foo</code></li><li>一个已解析包的版本，eg <code>resolve.maya.version</code></li><li>一个已解析的ephemeral，eg <code>ephemerals.foo</code></li><li>一个版本范围对象，eg <code>ephemerals.get_range(&#39;foo.cli&#39;, &#39;1&#39;)</code></li></ul><p>注意：不要这样做<code>if intersects(ephemerals.get(&quot;foo.cli&quot;, &quot;0&quot;), &quot;1&quot;): ...</code><br>如果不存在”foo.cli”，这将把返回的默认值0与范围1进行比较，它会返回True。</p><p>在测试临时对象的交集时，请使用get_range：<br><code>if intersects(ephemerals.get_range(&quot;foo.cli&quot;, &quot;0&quot;), &quot;1&quot;): ...</code></p><h2><span id="literalfunction">literal（Function）</span></h2><p>将特殊字符注释掉（使其失效）。<br><code>env.FOO = literal(&quot;this &#123;root&#125; will not expand&quot;)</code>  </p><p>也可以像这样将文字和可扩展字符链接起来：<br><code>env.FOO = literal(&quot;the value of &#123;root&#125; is&quot;).expandable(&quot;&#123;root&#125;&quot;)</code></p><h2><span id="requestdict-like-object">request（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">"maya"</span> <span class="token keyword">in</span> request<span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"maya was asked for!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表示包请求列表的字典，以包的名称为键，比如下面这条命令。</p><pre class="line-numbers language-none"><code class="language-none">]$ rez-env maya-2015 maya_utils-1.2+&lt;2 !corelib-1.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成如下的对象：</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;maya&quot;: &quot;maya-2015&quot;,    &quot;maya_utils&quot;: &quot;maya_utils-1.2+&lt;2&quot;,    &quot;corelib&quot;: &quot;!corelib-1.4.4&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用get_range函数来测试intersects函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> intersects<span class="token punctuation">(</span>request<span class="token punctuation">.</span>get_range<span class="token punctuation">(</span><span class="token string">"maya"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"2019"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"maya 2019.* was asked for!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="resolvedict-like-object">resolve（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">"maya"</span> <span class="token keyword">in</span> resolve<span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"Maya version is %s"</span><span class="token punctuation">,</span> resolve<span class="token punctuation">.</span>maya<span class="token punctuation">.</span>version<span class="token punctuation">)</span>    <span class="token comment"># ..or resolve["maya"].version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>表示已解析环境中的包列表字典。每个键为包的名称，值为包对象。</p><h2><span id="rootstring">root（String）</span></h2><p><code>this.root</code><br>包的安装目录，如果程序包包含变量，则此路径包含变量的子路径。</p><h2><span id="setenvfunction">setenv（Function）</span></h2><p><code>setenv(&quot;FOO_PLUGIN_PATH&quot;, &quot;&#123;root&#125;/plugins&quot;)</code><br>将环境变量设置为给定的值。相当于<code>env.FOO = &quot;BAH&quot;</code></p><h2><span id="sourcefunction">source（Function）</span></h2><p><code>source(&quot;&#123;root&#125;/scripts/init.sh&quot;)</code><br>执行一个shell脚本。类似于commands，此函数不会有返回值。</p><h2><span id="stopfunction">stop（Function）</span></h2><p><code>stop(&quot;The value should be %s&quot;, expected_value)</code><br>引发异常并阻止继续解析。当检测到无法配置有效环境的错误时，使用它。</p><h2><span id="systemsystem-object">system（System object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> system<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">"windows"</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该对象提供系统信息，比如当前平台，架构或操作系统。<br>查看这个文件可以获取更多信息：<a href="https://github.com/nerdvegas/rez/blob/master/src/rez/system.py">https://github.com/nerdvegas/rez/blob/master/src/rez/system.py</a></p><h2><span id="testdict-like-object">test（Dict-like object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> test<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"unit"</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"My unit test is about to run yay"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个对象仅在”pre_test_commands”函数中生效。具有以下的字段：</p><ul><li>test.name：将要运行的测试名称。</li></ul><h2><span id="thispackage-object">this（Package object）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>pathenv<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>this<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">"bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表示当前包，下面是一些常用的命令：</p><ul><li>this.base：类似this.root，返回包路径，不包含子路径。</li><li>this.name：包的名字，比如”houdini”。</li><li>this.root：包的安装路径，包含子路径。</li><li>this.version：返回版本对象，可以作为一个字符串使用，也可以访问版本中特定标识（如主要版本号等），演示代码：<code>env.FOO_MAJOR = this.version.major # or, this.version[0]</code></li></ul><h2><span id="undefinedfunction">undefined（Function）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> undefined<span class="token punctuation">(</span><span class="token string">"REZ_MAYA_VERSION"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">"maya is not present"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个布尔函数，环境变量如果没有被定义则返回True，与defined刚好相反。</p><h2><span id="unsetenvfunction">unsetenv（Function）</span></h2><p><code>unsetenv(&quot;FOO_LIC_SERVER&quot;)</code><br>删除指定的环境变量，如果没有这个环境变量，则该函数不执行任何操作。</p><h2><span id="versionversion-object">version（Version object）</span></h2><p>版本对象。可以见上述的this.version。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05 Configuring Rez</title>
      <link href="//05%20rez-configuring/"/>
      <url>//05%20rez-configuring/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>Rez具有大量可配置的设置。可以在<a href="https://github.com/nerdvegas/rez/blob/master/src/rez/rezconfig.py">这里</a>找到设置的默认值和每个设置的释义。<br>最终的设置通过以下方式确定：</p><ul><li><p>首先在Rez安装文件中的<code>rezconfig.py</code>读取设置</p></li><li><p>如果<code>REZ_CONFIG_FILE</code>环境变量指向另一个文件，则设置被覆盖（变量也可以是一个文件夹路径，从而读取多个配置文件）</p></li><li><p>如果<code>$HOME/.rezconfig</code>中存在该设置，则进一步覆盖前面的设置</p></li><li><p>如果存在环境变量<code>REZ_XXX</code>，则该设置再次被覆盖。这里的”XXX”是设置键的大写版本，<br>比如<code>image_viewer</code>将会被<code>REZ_IMAGE_VIEWER</code>覆盖。</p></li><li><p>一种特殊情况，仅在软件包生成或发布期间才生效。在这种情况下，<br>如果程序包定义文件包含<code>config</code>部分，则会覆盖之前所有设置。</p></li></ul><p>在一个文件中定义rez设置是常见的选择，然后为所有的用户更改环境变量<code>REZ_CONFIG_FILE</code>以指向这个文件。</p><p><strong>Notes</strong>：无需在文件中设定所有的设置，只用修改所需的即可，其它没有设置的值则会从默认设置中获取。</p><h1><span id="合并规则">合并规则</span></h1><p>当存在多个配置源时，这些设置会合并在一起。<br>（一个配置文件不会替代前一个配置文件，而是通过值覆盖的方式）</p><p>遵循下面的规则：</p><ul><li>字典会递归合并在一起</li><li>非字典会覆盖之前的值</li></ul><p>也可以添加基于列表的设置。<br>比如下面的命令，将会追加到先前配置定义的release_hooks设置值中：<br><code>release_hooks = ModifyList(append=[&quot;custom_release_notify&quot;])</code></p><h1><span id="程序包设置覆盖">程序包设置覆盖</span></h1><p>程序包本身可以覆盖配置设置，这里用下面示例说明：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in package.py</span><span class="token keyword">with</span> scope<span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>    c<span class="token punctuation">.</span>release_packages_path <span class="token operator">=</span> <span class="token string">"/svr/packages/internal"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的包设置将覆盖默认的发布路径，比如让内部开发的包和外部开发的包发布到不同的位置。</p><p>这些配置仅适用于构建和发布程序包的时候。包括：</p><ul><li>确定在何处找到软件包的设置，比如 packages_path，local_packages_path，release_packages_path</li><li>build_system，release_hook和release_vcs插件类型中的设置</li><li>package_definition_python_path</li><li>package_filter</li></ul><h1><span id="支持的字符引用">支持的字符引用</span></h1><p>在所有配置文件中，支持下面的字符：</p><ul><li>任何环境变量的引用，格式为${HOME}</li><li>系统对象的任何属性，例如{system.platform}</li></ul><p>系统对象具有以下属性：</p><ul><li>platform: 平台（eg “linux”）</li><li>arch: 架构（eg “x86_64”）</li><li>os: 操作系统（eg “Ubuntu-12.04”）</li><li>user: 当前用户的用户名</li><li>home: 当前用户的主目录</li><li>fqdn: 完整域名（eg “somescr.somestudio.com”）</li><li>hostname: 主机名（eg “somesvr”）</li><li>domain: 域名（eg “somestudio.com”）</li><li>rez_version: rez的版本（eg “2.0.1”）</li></ul><h1><span id="延迟加载">延迟加载</span></h1><p>可以将配置设置存储在单独的文件中，仅在引用该设置的时候才会加载该设置。</p><p>如果有个较大值的设置修改，不想影响污染到主配置文件，这个方法就比较适用。</p><p>支持YAML和JSON格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in rezconfig</span>default_relocatable_per_package <span class="token operator">=</span> DelayLoad<span class="token punctuation">(</span><span class="token string">'/svr/configs/rez_relocs.yaml'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="命令行工具">命令行工具</span></h1><p>你可以用<code>rez-config</code>命令行工具查看当前配置的设置。</p><p>如果不带参数将显示所有设置，带参数的话如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-config packages_path- /home/sclaus/packages- /home/sclaus/.rez/packages/int- /home/sclaus/.rez/packages/ext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面是如何使用自己的配置文件覆盖设置的一些示例</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'packages_path = ["~/packages", "/packages"]'</span> <span class="token operator">></span> myrezconfig.py<span class="token punctuation">]</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">REZ_CONFIG_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/myrezconfig.py<span class="token punctuation">]</span>$ rez-config packages_path- /home/sclaus/packages- /packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="配置设置">配置设置</span></h1><p><a href="https://github.com/nerdvegas/rez/wiki/Configuring-Rez">Rez配置参数列表</a><br>这里是一个按字母排序的设置列表，在页面的Configuration Settings部分，这里就不翻译了（太长了）。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01 Home</title>
      <link href="//01%20rez-home/"/>
      <url>//01%20rez-home/</url>
      
        <content type="html"><![CDATA[<h1><span id="什么是rez">什么是Rez</span></h1><p>Rez是一个跨平台程序包管理器，它可以给程序配置独立的环境。<br>与其它程序包环境管理不同的是，所有的程序包的安装都在一个中央统一的位置，<br>每个独立环境只是引用了这些包。所以它的环境配置是轻量级的，<br>尽管有几百个包，通常也只需要几秒就可以进行配置。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-home/p1.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-home/p2.png"></p><h1><span id="基本原理">基本原理</span></h1><p>Rez获取一个包的请求列表，然后构建目标环境，并解决所有包的依赖问题。<br>支持任何软件包。（包括Python）<br>每个软件包都有一个简洁的定义文件（package.py），<br>这个文件用于定义其依赖项，命令，以及其它meatadata信息。  </p><p>一个python的软件包定义文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"requests"</span>version <span class="token operator">=</span> <span class="token string">"2.8.1"</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Kenneth Reitz"</span><span class="token punctuation">]</span>requires <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"python-2.7+"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">.</span>PYTHONPATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述文件所表达的含义是，此软件包需要python2.7或更高版本。<br>使用的时候，python的子目录会添加到 PYTHONPATH 环境变量中。  </p><p>使用rez API或rez-env创建环境时，算法会解析并跟踪一个包所需依赖包的列表。<br>从而让Rez能够在几秒钟配置包含数百个软件包的环境。<br>这个依赖包的列表也可以保存在一个文件中，用于以后构建相同的环境。</p><h1><span id="例子">例子</span></h1><p>使用rez-env工具创建一个简单的环境（要求requests2.2+， python2.6，pymongo小于2.7）。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env requests-2.2+ python-2.6 <span class="token string">'pymongo-0+&lt;2.7'</span>You are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@nn188.somewhere.com, on Wed Feb <span class="token number">26</span> <span class="token number">15</span>:56:20 <span class="token number">2014</span>, using Rez v2.0.0requested packages:requests-2.2+python-2.6pymongo-0+<span class="token operator">&lt;</span><span class="token number">2.7</span>resolved packages:python-2.6.8    /software/ext/python/2.6.8platform-linux  /software/ext/platform/linuxrequests-2.2.1  /software/ext/requests/2.2.1/python-2.6pymongo-2.6.3   /software/ext/pymongo/2.6.3arch-x86_64     /software/ext/arch/x86_64<span class="token operator">></span> <span class="token punctuation">]</span>$ _<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个环境，要求houdini版本在12.5以上，并在这个环境中运行<code>hescape -h</code> 命令。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env houdini-12.5+ -- hescape -hUsage: hescape <span class="token punctuation">[</span>-foreground<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s editor<span class="token punctuation">]</span> <span class="token punctuation">[</span>filename <span class="token punctuation">..</span>.<span class="token punctuation">]</span>-h: output this usage message-s: specify starting desktop by name-foreground: starts process <span class="token keyword">in</span> foreground<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过API来进行创建：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocess<span class="token keyword">from</span> rez<span class="token punctuation">.</span>resolved_context <span class="token keyword">import</span> ResolvedContextr <span class="token operator">=</span> ResolvedContext<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"houdini-12.5+"</span><span class="token punctuation">,</span> <span class="token string">"houdini-0+&lt;13"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"!java-1.8+"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>execute_shell<span class="token punctuation">(</span>command<span class="token operator">=</span><span class="token string">'which hescape'</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>out<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> out<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'/software/ext/houdini/12.5.562/bin/hescape'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02 Installation</title>
      <link href="//02%20rez-install/"/>
      <url>//02%20rez-install/</url>
      
        <content type="html"><![CDATA[<p>下载Source code，然后打开终端进入rez-2.75.0目录中：<br><code>python ./install.py</code></p><p>默认会安装到 /opt/rez 中，如果需要安装到其它位置，<br>使用<code>install.py -h</code>查看如何安装。</p><p>安装成功提示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">SUCCESS<span class="token operator">!</span> To activate Rez, <span class="token function">add</span> the following path to <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span>/opt/rez/bin/rezYou may also want to <span class="token builtin class-name">source</span> the completion script <span class="token punctuation">(</span>for <span class="token function">bash</span><span class="token punctuation">)</span>:<span class="token builtin class-name">source</span> /opt/rez/completion/complete.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后添加环境变量，将<code>/opt/rez/bin/rez</code> 添加到$PATH。<br>对于linux系统，可以运行这个脚本使命令能自动补全：<br><code>source /opt/rez/completion/complete.sh</code></p><p>文档中也提到可以用pip进行安装：<br><code>pip install rez</code></p><p>不过这样的安装方式并不能很好的用在生产环境中，因为rez并不只是一个普通的python包。<br>使用install脚本安装是推荐的方法，它可以保证rez独立运行，<br>以保护它免受python行为的环境变量等影响。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04 Basic Concepts</title>
      <link href="//04%20rez-basic-concepts/"/>
      <url>//04%20rez-basic-concepts/</url>
      
        <content type="html"><![CDATA[<h1><span id="概述">概述</span></h1><p>Rez管理软件包的过程：<br>首先从rez请求一个软件包列表，rez会对包进行解析。<br>如果解析没有成功，则系统会给出相关信息提示。<br>当请求的软件包版本发生冲突的时候，Rez也会给出提示。  </p><ul><li>“…the latest version of houdini”</li><li>“…maya-2009.1”</li><li>“…the latest rv and the latest maya and houdini-11.something”</li><li>“…rv-3.something or greater”</li><li>“…the latest houdini which works with boost-1.37.0”</li><li>“…PyQt-2.2 or greater, but less than PyQt-4.5.3”</li></ul><p>在本文许多示例中，我们会使用<a href="https://github.com/nerdvegas/rez/wiki/Command-Line-Tools#rez-env">rez-env</a>命令行工具。<br>该工具获取软件包请求列表，并创建结果配置环境。<br><code>exit</code>命令即可退出环境。</p><h1><span id="版本">版本</span></h1><p>Rez对版本号格式的支持：<br>数字，字母，和下划线的任意组合，并用点或破折号分隔。</p><p>有效的格式：</p><ul><li>1</li><li>1.0.0</li><li>3.2.build_13</li><li>4.rc1</li><li>10a-5</li></ul><p>版本号遵循严格排序方式，区别大小写。<br>下划线为最小字符，后跟字母，再后跟数字。</p><ul><li>在所有字符之前添加下划线</li><li>字母需要在数字之前</li><li>大写字母在小写字母之前</li><li>当数字0在版本号前，比较时’01’是小于’1’的</li><li>如果版本号包含字母和数字组合，它会被切分成只包含数字和字包含字母的组，然后根据上述规则进行比较。</li></ul><p>下面展示了一些版本对比的例子：</p><table><thead><tr><th align="center">smaller token</th><th align="center">larger token</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">a</td><td align="center">b</td></tr><tr><td align="center">a</td><td align="center">A</td></tr><tr><td align="center">a</td><td align="center">3</td></tr><tr><td align="center">_5</td><td align="center">2</td></tr><tr><td align="center">ham</td><td align="center">hamster</td></tr><tr><td align="center">alpha</td><td align="center">beta</td></tr><tr><td align="center">alpha</td><td align="center">bob</td></tr><tr><td align="center">02</td><td align="center">2</td></tr><tr><td align="center">002</td><td align="center">02</td></tr><tr><td align="center">13</td><td align="center">043</td></tr><tr><td align="center">3</td><td align="center">3a</td></tr><tr><td align="center">beta3</td><td align="center">3beta</td></tr></tbody></table><p>在进行版本比较的时候，分隔符（通常是<code>.</code>或者<code>-</code>符号）都会被忽略。<br>因此版本”1.0.0”和”1-0.0”是等同的。<br>如果两个版本通过数字对比相同，比如”1.0.0”和”1.0”，<br>则字符长度更长的版本被判断为更高版本。</p><p><strong>注意</strong>：在进行版本对比中，rez版本号中字母并没有特殊意义，<br>比如”alpha”和”beta”。所以我们更多的鼓励使用数字来标记版本。</p><h1><span id="软件包">软件包</span></h1><p>定义软件包的文件为<code>package.py</code> ，它描述了软件包所有的信息。<br>rez可以通过它管理任何类型的包，无论是Python程序包，<br>已编译的程序包，还是仅构建代码或者配置数据。</p><p>下面一个package文件的范例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">name = <span class="token string">"foo"</span>version = <span class="token string">"1.0.0"</span>description = <span class="token string">"Something that does foo-like things."</span>requires = <span class="token punctuation">[</span>  <span class="token string">"python-2.6"</span><span class="token punctuation">,</span>  <span class="token string">"utils-1.1+&lt;2"</span><span class="token punctuation">]</span>tools = <span class="token punctuation">[</span>  <span class="token string">"fooify"</span><span class="token punctuation">]</span>def commands()<span class="token operator">:</span>  env.PYTHONPATH.append(<span class="token string">"&#123;root&#125;/python"</span>)  env.PATH.append(<span class="token string">"&#123;root&#125;/bin"</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>requires部分定义了软件包的要求。</li><li>command部分描述该程序包添加到环境中所执行的一些操作（如为环境添加变量）。</li></ul><h2><span id="软件包存储库">软件包存储库</span></h2><p>软件包存储在磁盘中，位置在$PATH/package。看起来像这样：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/packages/inhouse/foo/1.1                     /1.2                     /1.3/packages/inhouse/bah/2                     /3                     /4/packages/inhouse/eek/2.5                     /2.6                     /2.7<span class="token comment"># more detailed example of foo-1.1</span>/packages/inhouse/foo/1.1/package.py                         /python/<span class="token operator">&lt;</span>PYTHON FILES<span class="token operator">></span>                         /bin/<span class="token operator">&lt;</span>EXECUTABLES<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以从上述层级结构中看到，<code>package.py</code>文件始终在该程序包的版本目录下。</p><p>Rez仅要求<code>package.py</code> 文件位于软件包安装根目录下，包的其余部分取决与软件自己的构建。</p><h1><span id="软件包搜索路径">软件包搜索路径</span></h1><p>Rez搜索路径查找软件包的方式和python使用PYTHONPATH查找python模块的方式几乎一样。</p><p>可以使用rez-config命令来返回搜索路径的列表：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-config packages_path- /home/ajohns/packages- /packages/inhouse- /packages/vendor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果同一个软件包出现在搜索路径重复出现，会优先使用创建时间较早的那一个。  </p><p>上述的搜索路径配置是一个经典设计：顺序从本地路径到服务器中央存储路径。<br>将其放在搜索路径的开头，可以方便开发人员优先用本地路径进行软件包的测试。</p><p>一种常见的修改软件包路径的方法是设置<code>REZ_PACKAGES_PATH</code>环境变量。</p><h1><span id="软件包命令">软件包命令</span></h1><p>软件包定义的命令确定如何配置环境以使用它。</p><p>这是一个python函数，注意如果使用了任何导入操作，则必须在此函数的主体内。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  env<span class="token punctuation">.</span>PYTHONPATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/python"</span><span class="token punctuation">)</span>  env<span class="token punctuation">.</span>PATH<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"&#123;root&#125;/bin"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是一个常用的配置示例，将软件包的源路径添加到PYTHONPATH，将其工具添加到PATH中。</p><p>关于包命令更多信息见：<a href="https://github.com/nerdvegas/rez/wiki/Package-Commands">Package Commands</a></p><h1><span id="软件包请求">软件包请求</span></h1><p>软件包对版本的请求使用一个特殊的语法，可以在package文件的require部分去定义，<br>也可以如rez-env之类的工具，创建配置环境的时候直接定义软件包请求。</p><p>举个例子，创建一个环境，包含python2.6或更高版本，以及my_py_utils5.4或更高版本，且版本不能大于6。<br><code>rez-env &#39;python-2.6+&#39; &#39;my_py_utils-5.4+&lt;6&#39;</code></p><p>这里有一些使用的示例：</p><table><thead><tr><th>package request</th><th>description</th><th>example versions within request</th></tr></thead><tbody><tr><td>foo</td><td>Any version of foo.</td><td>foo-1, foo-0.4, foo-5.0, foo-2.0.alpha</td></tr><tr><td>foo-1</td><td>Any version of foo-1[.x.x…x].</td><td>foo-1, foo-1.0, foo-1.2.3</td></tr><tr><td>foo-1+</td><td>foo-1 or greater.</td><td>foo-1, foo-1.0, foo-1.2.3, foo-7.0.0</td></tr><tr><td>foo-1.2+&lt;2</td><td>foo-1.2 or greater, but less than 2</td><td>foo-1.2.0, foo-1.6.4, foo-1.99</td></tr><tr><td>foo&lt;2</td><td>Any version of foo less than 2</td><td>foo-1, foo-1.0.4</td></tr><tr><td>foo==2.0.0</td><td>Only version 2.0.0 exactly</td><td>foo-2.0.0</td></tr><tr><td>foo-1.3|5+</td><td>OR’d requests</td><td>foo-1.3.0, foo-6.0.0</td></tr></tbody></table><h2><span id="conflict运算符">Conflict运算符</span></h2><p><code>!</code>符号用于指定不希望出现的版本（用于定义软件包之间的不兼容性），命令：<br><code>rez-env maya_utils &#39;!maya-2015.6&#39;</code></p><p>这指定您需要任何版本的maya_utils，但不接受2015.6（包括2015.6.1等）之内的任何版本的maya。  </p><h2><span id="weak-reference运算符">Weak reference运算符</span></h2><p><code>～</code>符号，它将强制软件包在指定范围内，但实际上并不需要这个软件包。<br><code>rez-env foo &#39;~nuke-9.rc2&#39;</code></p><p>这个请求也许会或者不会拉入nuke软件包，但是如果存在nuke的话，它的版本必须是9.rc2内。</p><p>弱引用在某些情况下有用，比如nuke和maya之类的软件都自带自己的python版本。<br>它们的软件对python没有要求。但是经常在程序外部使用python库的话，</p><p>为了确保python版本是兼容的，应用程序会为其相关的python版本定义一个若引用，类似这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># in maya's package.py</span>requires <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"~python-2.7.3"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的示例表示，当环境中存在maya时，所有使用python的软件包都将使用与maya兼容的版本。</p><h1><span id="隐式软件包">隐式软件包</span></h1><p>这个翻译不知道对不对，原文为<code>Implicit package</code>。<br>它是一个包请求列表，列表里的每个包会自动添加到每一个Rez请求中。<br>（例如当使用rez-env时，类似一个默认值的设定）</p><p>它们由rez配置<code>implicit_packages</code>设置，下面是默认值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">implicit_packages <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"~platform==&#123;system.platform&#125;"</span><span class="token punctuation">,</span>    <span class="token string">"~arch==&#123;system.arch&#125;"</span><span class="token punctuation">,</span>    <span class="token string">"~os==&#123;system.os&#125;"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rez默认将当前系统的平台，架构，操作系统打包。<br>这确保了有任何对上述信息有依赖时，能够更好的进行匹配。<br>当进入一个环境时，可以看到输出信息会打印出这些implicit包。</p><h1><span id="解析依赖">解析依赖</span></h1><p>Rez包含一个求解算法，算法接受一个程序请求列表，然后解析成一个满足程序包请求的最终列表。<br>例子：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-basic-concepts/p1.png"></p><p>这里有三个软件包：foo，bah和eek，其中foo和bah都对eek有依赖性。<br>比如软件包bah-4有个定义文件如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">name <span class="token operator">=</span> <span class="token string">"bah"</span>version <span class="token operator">=</span> <span class="token string">"4"</span>requires <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"eek-2.6"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这个时候foo也会请求eek包，假设我们对foo包要求是“任何版本”，<br>这个时候解析返回的结果会是：（foo1.2，bah-4，eek2.6），<strong>Rez会提供不会导致冲突的最新版本</strong>。</p><p>有时候你的请求无法实现，大致是因为请求（foo1.3，bah-4）导致的。<br>在这样的情况下解析会失败，Rez会告诉你有关的冲突。</p><h1><span id="环境解析">环境解析</span></h1><p>用户使用命令行工具<code>rez-env</code>解析并创建环境。<br>（也可以通过API完成，实际上rez中所有功能都可以在python中完成）<br>当你执行命令后，shell中的环境就被改变了，下面是一个示例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env foo bahYou are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@14jun01.methodstudios.com, on Wed Oct <span class="token number">22</span> <span class="token number">12</span>:44:00 <span class="token number">2014</span>,using Rez v2.0.rc1.10requested packages:foobahresolved packages:eek-2.6   /packages/inhouse/eek/2.6foo-1.2   /packages/inhouse/foo/1.2bah-4     /packages/inhouse/bah/4<span class="token operator">></span> <span class="token punctuation">]</span>$ █<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的信息可以看到原始的请求和匹配的解析包。<br>注意<code>&gt;</code>字符是一个提示，告诉你已经在rez解析的环境中。</p><h1><span id="小结">小结</span></h1><p>这里给一个新的（更接近生产环境需求的）示例，假设我们需要：</p><ul><li>maya-2014.sp2</li><li>nuke-8.0v3</li><li>maya插件 mplugin 的三个版本</li><li>nuke插件 nplugin 的两个版本</li><li>基础库lib的三个版本</li></ul><p>下图显示了运行命令<code>rez-env mplugin-1.3.0</code>时，发生的情况。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/rez-basic-concepts/p2.png"></p><p>如上图所示，Rez接受用户的请求，并解析依赖。</p><p>Rez Dependency Solver从软件存储库中读取软件包，以完成解析。</p><p>这个时候返回了一个最终软件包列表。</p><p>每个软件包命令是串联在一起的，rez会将它“打包”成一个目标Shell语言（图片中为bash）。</p><p>然后rez会创建一个sub-shell，并在环境中获取翻译后的命令代码，从而创建最终配置的环境。</p><p>软件包命令的执行顺序取决于软件包的依赖性以及请求软件包的顺序。</p>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03 Getting Started</title>
      <link href="//03%20rez-getting-started/"/>
      <url>//03%20rez-getting-started/</url>
      
        <content type="html"><![CDATA[<h1><span id="基本软件包">基本软件包</span></h1><p>安装完成后，需要创建一些基本的Rez软件包。使用rez-bind工具进行创建，<br>这些软件包会引用系统上已经安装的软件。（—quickstart是以标准创建）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-bind --quickstartBinding platform into /home/ajohns/packages<span class="token punctuation">..</span>.Binding arch into /home/ajohns/packages<span class="token punctuation">..</span>.Binding os into /home/ajohns/packages<span class="token punctuation">..</span>.Binding python into /home/ajohns/packages<span class="token punctuation">..</span>.Binding rez into /home/ajohns/packages<span class="token punctuation">..</span>.Binding rezgui into /home/ajohns/packages<span class="token punctuation">..</span>.Binding setuptools into /home/ajohns/packages<span class="token punctuation">..</span>.Binding pip into /home/ajohns/packages<span class="token punctuation">..</span>.Successfully converted the following software found on the current system into Rez packages:PACKAGE     URI-------     ---arch        /home/ajohns/packages/arch/x86_64/package.pyos          /home/ajohns/packages/os/osx-10.11.5/package.pypip         /home/ajohns/packages/pip/8.0.2/package.pyplatform    /home/ajohns/packages/platform/osx/package.pypython      /home/ajohns/packages/python/2.7.11/package.pyrez         /home/ajohns/packages/rez/2.0.rc1.44/package.pyrezgui      /home/ajohns/packages/rezgui/2.0.rc1.44/package.pysetuptools  /home/ajohns/packages/setuptools/19.4/package.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你应该可以创建一个包含Python的环境：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env python -- <span class="token function">which</span> python/home/ajohns/packages/python-2.7.8/platform-linux/arch-x86_64/os-Ubuntu-12.04/bin/python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="尝试创建第一个包">尝试创建第一个包</span></h2><p>创建之前确保两件事</p><ul><li>%HOME/packages文件夹有可写权限（软件包都安装在这个路径）</li><li>cmake工具是可用的</li></ul><p><code>rez-build</code>工具用于构建软件包并安装到packages中。<br>完成构建后就可以通过<code>rez-env</code>使用它们：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> example_packages/hello_world<span class="token punctuation">]</span>$ rez-build --install--------------------------------------------------------------------------------Building hello_world-1.0.0<span class="token punctuation">..</span>.--------------------------------------------------------------------------------Resolving build environment: pythonresolved by ajohns@workstation.local, on Sun Jul <span class="token number">31</span> <span class="token number">14</span>:39:33 <span class="token number">2016</span>, using Rez v2.0.rc1.44requested packages:python~platform<span class="token operator">==</span>osx    <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64     <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>osx-10.11.5  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:arch-x86_64     /home/ajohns/packages/arch/x86_64                                            <span class="token punctuation">(</span>local<span class="token punctuation">)</span>os-osx-10.11.5  /home/ajohns/packages/os/osx-10.11.5                                         <span class="token punctuation">(</span>local<span class="token punctuation">)</span>platform-osx    /home/ajohns/packages/platform/osx                                           <span class="token punctuation">(</span>local<span class="token punctuation">)</span>python-2.7.11   /home/ajohns/packages/python/2.7.11/platform-osx/arch-x86_64/os-osx-10.11.5  <span class="token punctuation">(</span>local<span class="token punctuation">)</span>Invoking cmake build system<span class="token punctuation">..</span>.Executing: /usr/local/bin/cmake -d /home/ajohns/workspace/rez/example_packages/hello_world -Wno-dev -DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT<span class="token operator">=</span>TRUE -D_ECLIPSE_VERSION<span class="token operator">=</span><span class="token number">4.3</span> --no-warn-unused-cli -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span>/home/ajohns/packages/hello_world/1.0.0 -DCMAKE_MODULE_PATH<span class="token operator">=</span><span class="token variable">$&#123;CMAKE_MODULE_PATH&#125;</span> -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release -DREZ_BUILD_TYPE<span class="token operator">=</span>local -DREZ_BUILD_INSTALL<span class="token operator">=</span><span class="token number">1</span> -G Unix MakefilesNot searching <span class="token keyword">for</span> unused variables given on the <span class="token builtin class-name">command</span> line.-- Could NOT <span class="token function">find</span> PkgConfig <span class="token punctuation">(</span>missing:  PKG_CONFIG_EXECUTABLE<span class="token punctuation">)</span>-- Configuring <span class="token keyword">done</span>-- Generating <span class="token keyword">done</span>-- Build files have been written to: /home/ajohns/workspace/rez/example_packages/hello_world/buildExecuting: <span class="token function">make</span> -j4<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target pyExecuting: <span class="token function">make</span> -j4 <span class="token function">install</span><span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target pyInstall the project<span class="token punctuation">..</span>.-- Install configuration: <span class="token string">"Release"</span>-- Installing: /home/ajohns/packages/hello_world/1.0.0/./python/hello_world.py-- Installing: /home/ajohns/packages/hello_world/1.0.0/./python/hello_world.pyc-- Installing: /home/ajohns/packages/hello_world/1.0.0/./bin/helloAll <span class="token number">1</span> build<span class="token punctuation">(</span>s<span class="token punctuation">)</span> were successful.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="测试你的包">测试你的包</span></h1><p>你可以使用rez-env命令来请求一个（或多个）你已经安装的软件包环境。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env hello_worldYou are now <span class="token keyword">in</span> a rez-configured environment.resolved by ajohns@workstation.local, on Sun Jul <span class="token number">31</span> <span class="token number">14</span>:43:54 <span class="token number">2016</span>, using Rez v2.0.rc1.44requested packages:hello_world~platform<span class="token operator">==</span>osx    <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64     <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>osx-10.11.5  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:arch-x86_64        /home/ajohns/packages/arch/x86_64                                            <span class="token punctuation">(</span>local<span class="token punctuation">)</span>hello_world-1.0.0  /home/ajohns/packages/hello_world/1.0.0                                      <span class="token punctuation">(</span>local<span class="token punctuation">)</span>os-osx-10.11.5     /home/ajohns/packages/os/osx-10.11.5                                         <span class="token punctuation">(</span>local<span class="token punctuation">)</span>platform-osx       /home/ajohns/packages/platform/osx                                           <span class="token punctuation">(</span>local<span class="token punctuation">)</span>python-2.7.11      /home/ajohns/packages/python/2.7.11/platform-osx/arch-x86_64/os-osx-10.11.5  <span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">]</span>$ █<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在已经处于配置的环境中，可以尝试运行hello_world包中的hello工具：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">></span> <span class="token punctuation">]</span>$ helloHello world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你已经在rez shell的配置环境中，并且忘记了当前可用的软件包列表。<br>可以使用<code>rez-context</code>工具查看：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">></span> <span class="token punctuation">]</span>$ rez-contextresolved by ajohns@workstation.local, on Sun Jul <span class="token number">31</span> <span class="token number">14</span>:43:54 <span class="token number">2016</span>, using Rez v2.0.rc1.44requested packages:hello_world~platform<span class="token operator">==</span>osx    <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~arch<span class="token operator">==</span>x86_64     <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>~os<span class="token operator">==</span>osx-10.11.5  <span class="token punctuation">(</span>implicit<span class="token punctuation">)</span>resolved packages:arch-x86_64        /home/ajohns/packages/arch/x86_64                                            <span class="token punctuation">(</span>local<span class="token punctuation">)</span>hello_world-1.0.0  /home/ajohns/packages/hello_world/1.0.0                                      <span class="token punctuation">(</span>local<span class="token punctuation">)</span>os-osx-10.11.5     /home/ajohns/packages/os/osx-10.11.5                                         <span class="token punctuation">(</span>local<span class="token punctuation">)</span>platform-osx       /home/ajohns/packages/platform/osx                                           <span class="token punctuation">(</span>local<span class="token punctuation">)</span>python-2.7.11      /home/ajohns/packages/python/2.7.11/platform-osx/arch-x86_64/os-osx-10.11.5  <span class="token punctuation">(</span>local<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要退出这个环境，使用<code>exit</code>命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">></span> <span class="token punctuation">]</span>$ <span class="token builtin class-name">exit</span><span class="token punctuation">]</span>$ █<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你还可以快速的运行一个命令，当命令执行完成，则自动退出环境。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">]</span>$ rez-env hello_world -- helloHello world<span class="token operator">!</span><span class="token punctuation">]</span>$ █<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Rez </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maya疑难杂症备忘录 Vol.1</title>
      <link href="//maya-issue-vol1/"/>
      <url>//maya-issue-vol1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个系列主要是收集一些Maya中遇到的疑难杂症，<br>有自己工作中遇到的，有从网上或者博客中看到记录的。<br>总之当作一个备忘录。</p></blockquote><h2><span id="1打开软件崩溃">1.打开软件崩溃</span></h2><p>双击打开软件，出现一个下面这样的弹窗，Maya就崩溃退出了。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p1.jpeg"></p><p>出现这样的情况通常重置用户预设文件夹即可解决：<br><strong><code>...\Documents\maya\&lt;版本&gt;\prefs</code></strong></p><p>自己遇到几次这种情况，是因为在Plug-in Manager为某些插件勾选了Auto Load，<br>如果不勾选它，在打开Maya后再开启这个插件就没有问题，<br>没有细究过原因，暂时就让制作们手动加载。</p><p>还有种情况是因为OpenCL导致的Maya启动崩溃。<br>解决方法是在Maya.env文件中添加环境变量来禁用它：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">MAYA_DISABLE_OPENCL <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="2打开文件崩溃">2.打开文件崩溃</span></h2><p><strong>(1.)文件里包含了Maya没有加载的插件。</strong><br>比如一个场景文件中，人物的资产带有RenderMan的材质球。<br>这样的情况需先开启插件，再打开文件。</p><p><strong>(2.)文件里加载了多个且臃肿的引用。</strong><br>Maya一次性加载这些Reference文件，可能会导致进程卡死崩溃。<br>通常在打开文件的时候在右侧选项里选择Load no reference，<br>然后在Maya文件打开后，进入Reference管理器中一一勾选加载资产。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p2.png"></p><p>(3.)有些文件默认打开文件的时候，会开启了Hypershade窗口。<br>一些过多或未使用的材质球也会导致Maya打开文件时的拥挤。<br>解决方法是找到预设文件：<code>...\Documents\Maya\&lt;版本&gt;\prefs\userPrefs.mel</code>  </p><p>打开这个文件并通过搜索minorNodeTypesDisplay，修改为:  </p><pre class="line-numbers language-json" data-language="json"><code class="language-json">-iv <span class="token string">"minorNodeTypesDisplay"</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改后重启Maya。</p><p>除此之外，当对文件进行open操作会导致崩溃的话，可以尝试import这个文件试试。<br>导入文件在大多情况是可行的，然后在保存文件之前，最好对文件进行场景优化和清理。</p><p>也可以尝试使用最新版本的Maya2022打开文件。</p><h2><span id="3进行某项操作崩溃">3.进行某项操作崩溃</span></h2><p>对于这样的情况非常多，列举几个自己遇到的。</p><p>打开Plug-in Manager的时候崩溃，这可能是一些第三方插件导致，<br>在安装Arnold的时候配置mod文件的时候出现过类似问题，<br>这里有篇文章记录过：<a href="https://lingyunfx.com/mtoa-install-issue/">安装新版本Arnold for maya后环境变量被破坏</a>  </p><p>对一个绑定文件进行位移选择操作的时候崩溃：<br>打开预设设置，修改求值模式为DG（脏值运算）。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p3.jpeg"></p><p>在动画烘培的时候崩溃：<br>因为Maya在进行烘培的时候会跑一遍时间滑块，对于一些臃肿的文件（帧数长，文件大），<br>可能在跑到一半的时候Maya就闪退了。可以把主界面显示修改为其它窗口：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p4.png"></p><p>这样减少了Maya烘培时候，对图形多余的计算（因为在时间滑块一帧帧播放的时候，图形一直在刷新）。  </p><p>还有种方法则是使用脚本进行烘培，跳过跑时间滑块的步骤。<br>在这篇文章也讲过：<a href="https://lingyunfx.com/maya-tips-001/">Maya的效率使用和技巧（一）</a></p><h2><span id="4透视图相机属性值变为了无穷大">4.透视图相机属性值变为了无穷大</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p5.jpeg"></p><p>在按下f键，对模型在视图局中显示的时候，容易触发这个问题。<br>通常可能是因为模型过大，损坏的模型，或者打开一些有问题的Maya文件所导致。</p><p>暂时修复的话，选择透视图摄像机：<br>1.执行 <em>Modify - Reset Transformations</em> 操作<br>2.将下图的数值改为1<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p6.png"><br>这个时候就不要再按F了，不然视图又会变成NaN。</p><p>需要完全修复它的话，关闭maya，找到预设文件：<br><code>...\Documents\Maya\&lt;版本&gt;\prefs\userPrefs.mel</code><br>搜索并修改“FitFactor”的数值，为0.01-1.0之间。（一定要带小数点）<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p7.png"><br>重新打开Maya就好了。</p><h2><span id="5maya中看不到位移或选择轴向控制">5.Maya中看不到位移或选择轴向控制</span></h2><p>这里选择了Move Tool但是没有轴向控制显示。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p8.png"></p><p>双击Move Tool打开选项窗口，把Tweak Mode勾选去除即可<br>(或者直接Reset Tool将设置还原为默认值)<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p9.png"></p><p>可以看到轴向控制正常显示了。<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p10.png"></p><h2><span id="6文件无法保存">6.文件无法保存</span></h2><p>比如在保存文件（保存为ma文件的时候），遇到这样的提示。<br><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p11.png" width="80%" height="80%" alt align="center"></left>  </p><p>因为文件中存在了未知节点，清理后再进行Save即可：<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p12.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p13.png"></p><p>还有些未知情况，保存文件的时候出现一行报错（具体没有截图也没法还原场景）。<br>尝试在Script Editor输入这行Mel命令，改个名字就可以了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">file</span> -rename <span class="token string">"newName.ma"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="7在大纲视图选择一个对象后报错">7.在大纲视图选择一个对象后报错</span></h2><p><strong><code>Error: Cannot find procedure &quot;look&quot;</code></strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p14.jpg"></p><p>在透视图选择物体没有问题，只有当在Outline视图里选择物体的时候会出现报错。<br>虽然暂时看来说没什么影响，不过每次报错很烦。<br>解决它只需要在mel里执行一行命令即可：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">outlinerEditor -edit -selectCommand <span class="token string">""</span> <span class="token string">"outlinerPanel1"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="8cant-find-procedure-xxxx-报错">8.”Can’t find procedure xxxx” 报错</span></h2><p>诸如这样的报错：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">// Error: line <span class="token number">1</span>: Cannot <span class="token function">find</span> procedure <span class="token string">"onModelChange3dc"</span><span class="token builtin class-name">.</span> //// Error: line <span class="token number">1</span>: Cannot <span class="token function">find</span> procedure <span class="token string">"CgAbBlastPanelOptChangeCallback"</span><span class="token builtin class-name">.</span> //<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之前在智伤帝的博客看到类似的问题，今天自己也遇到了。<br>关于”CgAbBlastPanelOptChangeCallback”的错误可以参考他的博客：<br><a href="https://blog.l0v0.com/posts/a7c99667.html">Maya奇怪的callback报错</a></p><p>而”onModelChange3dc”我在google搜到一篇帖子，执行一个python脚本进行修复：  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">needs_fixing <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">try</span><span class="token punctuation">:</span>    expression_str <span class="token operator">=</span> cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span><span class="token string">'uiConfigurationScriptNode.before'</span><span class="token punctuation">)</span>    fixed_expression_lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> expression_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'-editorChanged "onModelChange3dc"'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>            needs_fixing <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">continue</span>        fixed_expression_lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    fixed_expression <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fixed_expression_lines<span class="token punctuation">)</span>    <span class="token keyword">if</span> needs_fixing<span class="token punctuation">:</span>        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token string">'uiConfigurationScriptNode.before'</span><span class="token punctuation">,</span> fixed_expression<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>帖子链接：<a href="https://forums.autodesk.com/t5/maya-animation-and-rigging/onmodelchange3dc-error/td-p/8124149">https://forums.autodesk.com/t5/maya-animation-and-rigging/onmodelchange3dc-error/td-p/8124149</a></p><p>这样的问题google搜索基本能找到解决方法。</p><h2><span id="9maya窗口丢失">9.Maya窗口丢失</span></h2><p>有些情况是因为改变了界面布局，这里重置布局即可：<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p15.png"></p><p>或者把一些UI元素给隐藏了起来，在这里进行还原：<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-issue-vol1/p16.png"></p><p>再者是因为从双屏切换到了单屏，导致一些窗口保留到了另一个屏幕。<br>我自己经常遇到这样的情况，后来在劲爆羊的博客里翻到了一个方法。<br>参考来自：<a href="http://blog.sina.com.cn/s/blog_4413e58d0102x5rp.html">http://blog.sina.com.cn/s/blog_4413e58d0102x5rp.html</a><br>大致意思是把所有窗口给移到指定的位置，用这个python脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymel<span class="token punctuation">.</span>core <span class="token keyword">as</span> pmc<span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">from</span> PySide<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QApplication<span class="token comment">#(2015-2016)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token comment">#(2017-2018)</span><span class="token keyword">for</span> one <span class="token keyword">in</span> QApplication<span class="token punctuation">.</span>topLevelWidgets<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        one<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">for</span> one <span class="token keyword">in</span> pmc<span class="token punctuation">.</span>lsUI<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'window'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        one<span class="token punctuation">.</span>setTopLeftCorner<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="10渲染层切换的时候报错">10.渲染层切换的时候报错</span></h2><p>来自Adu的博客：<a href="https://www.aducg.com/2015/03/23/maya-renderlayer-batch-rendering-errors/">https://www.aducg.com/2015/03/23/maya-renderlayer-batch-rendering-errors/</a></p><p><strong><code>Error: Cannot switch from &#39;bottle&#39; to &#39;defaultRenderLayer1&#39; because of an override to a missing node within a referenced scene</code></strong></p><p>之前遇到类似的报错，是因为在渲染层里把一些Reference资产给remove掉了，<br>导致渲染层丢失了这个节点，在切换到默认渲染层的时候出现报错，且无法切换回去。<br>博客里有一个解决方法，一行mel命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fixRenderLayerOutAdjustmentErrors<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有时候它可以解决问题，但有时候又没有效果。  </p><p>后来问了同事，打开Node Editor找到defaultRenderLayer的节点，<br>断开那条爆红（或者好像是有个警告的标志）的Input连接即可。<br>（这里没有图，也没法还原当时的场景，就是提供这个思路）</p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>将PyQt4代码转到PyQt5</title>
      <link href="//pyqt4to5/"/>
      <url>//pyqt4to5/</url>
      
        <content type="html"><![CDATA[<p>最近在读这本经典的GUI编程书《Python Qt GUI快速编程》。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt4to5/p1.png"></p><p>在这之前虽然已经写了很多的图形界面了，<br>但是一直没有系统的学过PyQt。<br>蹭着节假日期间，可以好好的咬咬这本书。  </p><p>书中的代码示例是用的PyQt4，和即将淘汰的Python2。<br>而在学习的时候需要一点前瞻性，<br>需要考虑到今后对知识的使用，和它的时效。  </p><p>SCP-079-TIP说：Python2已经停止维护了。<br>（而PyQt4也是会被淘汰的版本）<br><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt4to5/p2.png"></p><p>所以我们在看这本书的时候，就得把代码语法重写成Python3+PyQt5。  </p><p>根据经验，一些常用的方法，可以直接从PyQt4转换到PyQt5.<br>比如在连接信号的时候：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># PyQt4self.connect(self.lineedit,             SIGNAL(&quot;returnPressed()&quot;),             self.updateUi)# PyQt5self.lineedit.returnPressed.connect(self.updateUi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在发射信号的时候：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># PyQt4self.emit(SIGNAL(&quot;acceptedList(QStringList)&quot;), self.stringlist)# PyQt5self.acceptedList.emit(self.stringlist)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义信号的时候：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">self.zeros &#x3D; 0# PyQt4self.emit(SIGNAL(&quot;atzero&quot;), self.zeros)# PyQt5atzero &#x3D; pyqtSignal()self.atzero.emit(self.zeros)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是对于刚开始学习GUI编程的朋友，在进行重写转换的时候，<br>就会容易脑袋大，失去学习的动力。  </p><p>为了解决重复的重写和给刚入门的新手指路，<br>这里在网上找到了一个可以直接进行版本转换的py代码。<br><a href="http://www.vslcreations.com/2018/02/how-to-convert-pyqt4-code-to-pyqt5-code.html">http://www.vslcreations.com/2018/02/how-to-convert-pyqt4-code-to-pyqt5-code.html</a></p><p>下载后，可以输入下面的命令将PyQt4的代码转换为PyQt5：<br><code>python pyqt4topyqt5.py source.py -o output.py</code></p><p>这样就为我们省去了很多时间，在对照书里案例的时候，<br>可以不会为了这些琐事而消耗学习的专注度和兴趣。</p><center>(完)</center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>将Python程序打包成App过程和排错</title>
      <link href="//py2app-used/"/>
      <url>//py2app-used/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>最近写了一个Python工具，需求是要在Mac笔记本上使用。<br>（不依赖于DCC软件，独立运行）</p><p>因为工具依赖了一些第三方库，不可能在每台电脑上对这些库逐一进行安装。<br>想到最好的方法是将其打包成一个Mac App，并制作成一个dmg文件。</p><p>这样只需要分享这个映像文件，使用者只需双击安装使用即可。<br>在网上找到打包Mac App的库：<strong>py2app</strong>。</p><p>于是开始了踩坑和一步步排错的过程。</p><h1><span id="使用py2app打包程序">使用py2app打包程序</span></h1><h3><span id="1首先安装py2app">1.首先安装py2app</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> py2app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="2构建安装文件">2.构建安装文件</span></h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">py2applet --make-setup myApplication.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（这里的myApplication.py为自己工具的主程序接口。）</p><h3><span id="3配置setuppy文件">3.配置setup.py文件</span></h3><p><strong>DATA_FILES</strong> 放自己写的模块，和一些附件（比如UI里插入的图片）。<br><strong>OPTIONS</strong> 里配置App的图标（需要icns格式），和使用的第三方模块。</p><p>下面是一个参考：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""This is a setup.py script generated by py2appletUsage:    python setup.py py2app"""</span><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setupAPP <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'myApplication.py'</span><span class="token punctuation">]</span>DATA_FILES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ui_logo.png'</span><span class="token punctuation">]</span> <span class="token comment"># 附件</span>OPTIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'iconfile'</span><span class="token punctuation">:</span> <span class="token string">'AppIcon.ICNS'</span><span class="token punctuation">,</span> <span class="token comment"># 图标</span>           <span class="token string">'packages'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'PySide2'</span><span class="token punctuation">,</span> <span class="token string">'shotgun_api3'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token comment"># 第三方库</span>setup<span class="token punctuation">(</span>    app<span class="token operator">=</span>APP<span class="token punctuation">,</span>    data_files<span class="token operator">=</span>DATA_FILES<span class="token punctuation">,</span>    options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'py2app'</span><span class="token punctuation">:</span> OPTIONS<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    setup_requires<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'py2app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4打包app">4.打包App</span></h3><p><code>python setup.py py2app</code></p><p>这里直接跳过了测试阶段，一般会先添加 -A 参数进行测试打包。<br>添加-A参数打包速度快，但是不会将依赖打包进去，打包出来的程序会很小。<br>这里就直接进行整体打包。（因为之前已经测试过了）</p><h3><span id="5运行app并进行排错">5.运行App并进行排错</span></h3><p>打包完成可以看到当前目录多了dist和build两个文件夹。<br>进入dist文件夹可以看到打包好的app。<br>双击运行它：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p1.png"></p><p>程序报错崩溃了。<br>这个时候可以右键 - 显示包内容</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p2.png"></p><p>进入到这个层级  <code>myApplication.app/Contents/MacOS</code> ，双击直接运行主程序。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p3.png"></p><p>这里可以通过终端观察到报错信息。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p4.png"></p><p>从报错信息可以看到，像是缺少了什么东西。<br>于是google搜了下，在无数帖子中找到了原因。<br>这里放个帖子链接：<a href="http://nfail.com/q/f6QYYx">http://nfail.com/q/f6QYYx</a></p><p>是因为PySide2依赖<code>shiboken2</code>模块，而在打包后的这个模块中，<br>缺少<code>libshiboken2-python2.7v.5.15.dylib</code>文件。</p><p>解决方式就是直接从来源的shiboken2模块复制这个文件到App的包中。</p><p><code>cp ./venv/lib/python3.8/site-packages/shiboken2/libshiboken2.abi3.5.15.dylib ./dist/app.app/Contents/Resources/lib/python3.8/lib-dynload/shiboken2</code></p><p>这个时候双击再App图标，程序可以正确的运行了。<br>(至少在本机是正常运行了。)</p><h1><span id="将app封装成dmg映像文件">将App封装成dmg映像文件</span></h1><p>可以运行了，兴冲冲的就想把它封装成一个dmg文件并分享给同事。<br>这个过程网上很多讲解的，也比较简单。<br>这里参考的是知乎专栏的一篇帖子：<a href="https://zhuanlan.zhihu.com/p/56864296">https://zhuanlan.zhihu.com/p/56864296</a></p><h3><span id="1打开磁盘工具新建空白映像文件">1.打开磁盘工具，新建空白映像文件</span></h3><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p5.png"></p><p>填写必要参数：<br>文件名称自己定义，<br>大小则要根据自己App包的大小来定。<br>（不要和App包大小一样，要多预留一些）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p6.png"></p><h3><span id="2配置映像文件">2.配置映像文件</span></h3><p>首先是将App包拷贝到映像文件中，这里打开终端，创建一个link</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> /Volumes/myApplication<span class="token function">ln</span> -s /Applications Applications<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里可以看到应用程序的文件夹被link到了这里。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p7.png"></p><p>这样别人打开这个dmg文件后，直接拖动App包到Applications里，<br>程序就可以正常安装了。</p><h1><span id="在其他主机进行安装测试">在其他主机进行安装测试</span></h1><p>拷贝这个dmg文件，到同事电脑进行安装。<br>双击运行app，果不其然的又报错崩溃了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p8.png"></p><p>这里就出现了一个千古问题：<br>“在我电脑上可以用啊，为什么在你电脑上就不行？”<br>依旧按照惯例，右键进入包，直接运行主程序。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/py2app-used/p9.png"></p><p>看起来同样是缺少了什么文件，但是这次没有提示是哪一个模块，哪一个包。<br>不过有了刚刚的经验，至少知道要怎么去解决这样的问题。</p><p>使用搜索功能，输入缺失的文件名<code>libffi.7.dylib</code> 。（在自己的主机上搜索）<br>因为我用的miniconda搭建的环境，所以在miniconda的文件夹中搜索到了这个文件。</p><p>现在问题来了，这个文件要拷贝到App包的什么地方。<br>观察App包的层级结构可以看到，基本上所有的依赖项都被放在了<br><code>app.app/Contents/Resources/lib</code> 文件夹中。  </p><p>于是尝试将刚刚找到的文件拷贝到这里，运行app。<br>又报错了！<br>庆幸的是这次的报错和上次的不一样，说明刚刚的问题已经解决了。<br>不过报错依旧是说缺少某个文件，重复上述的解决方法即可。</p><p>到了这里这次打包过程遇到的问题都解决了，<br>将刚刚提示缺失的所有文件手动复制到指定位置。<br>重新存储成dmg文件，然后就可以交差了。</p><h1><span id="总结">总结</span></h1><p>这次使用py2app对python程序进行打包，<br>主要遇到的问题就是，打包后依赖不全。<br>需要根据报错提示，从一步一步的去从源文件找到文件，手动拷贝到过来。<br>不过后来想想也有可能是我操作不当，在写setup文件的时候没有配置好。</p><p>文章是一次排错经历分享，如果觉得文章还不错或者有所帮助可以关注下公众号。<br>也欢迎大佬们一起讨论。</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>可控制的Entity</title>
      <link href="//shotgun-entity/"/>
      <url>//shotgun-entity/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Entity Name</th><th>对应中文名</th></tr></thead><tbody><tr><td>ActionMenuItem</td><td>动作菜单</td></tr><tr><td>ApiUser</td><td>脚本</td></tr><tr><td>Asset</td><td>资产</td></tr><tr><td>Attachment</td><td>附件</td></tr><tr><td>Booking</td><td>人员规划</td></tr><tr><td>Camera</td><td>摄像机</td></tr><tr><td>ClientUser</td><td>客户</td></tr><tr><td>Composition</td><td>合成</td></tr><tr><td>Cut</td><td>剪辑镜头</td></tr><tr><td>CutItem</td><td>剪辑镜头项</td></tr><tr><td>Delivery</td><td>分发</td></tr><tr><td>Department</td><td>部门</td></tr><tr><td>Episode</td><td>季</td></tr><tr><td>EventLogEntry</td><td>事件日志</td></tr><tr><td>FilesystemLocation</td><td>文件系统位置</td></tr><tr><td>Group</td><td>组</td></tr><tr><td>HumanUser</td><td>人员</td></tr><tr><td>Icon</td><td>图标</td></tr><tr><td>Level</td><td>关卡</td></tr><tr><td>LocalStorage</td><td>本地存储</td></tr><tr><td>MocapPass</td><td>动作捕捉过程</td></tr><tr><td>MocapSetup</td><td>动作捕捉设置</td></tr><tr><td>MocapTake</td><td>动作捕捉条目</td></tr><tr><td>MocapTakeRange</td><td>动作捕捉条目范围</td></tr><tr><td>Note</td><td>反馈，记录</td></tr><tr><td>Page</td><td>页面</td></tr><tr><td>PageHit</td><td>页面点击</td></tr><tr><td>PageSetting</td><td>页面设置</td></tr><tr><td>Performer</td><td>演员</td></tr><tr><td>PermissionRuleSet</td><td>权限组设置</td></tr><tr><td>Phase</td><td>项目时间表</td></tr><tr><td>PhysicalAsset</td><td>实拍道具</td></tr><tr><td>PipelineConfiguration</td><td>工作流工序配置</td></tr><tr><td>Playlist</td><td>播放表单</td></tr><tr><td>PlaylistShare</td><td>共享的播放表单</td></tr><tr><td>Project</td><td>项目</td></tr><tr><td>PublishedFile</td><td>已发布文件</td></tr><tr><td>PublishedFileDependency</td><td>已发布文件依存关系</td></tr><tr><td>PublishedFileType</td><td>已发布文件类型</td></tr><tr><td>Release</td><td>软件发布版本</td></tr><tr><td>Reply</td><td>回复</td></tr><tr><td>Revision</td><td>修正版本</td></tr><tr><td>Routine</td><td>运动捕捉例程</td></tr><tr><td>RvLicense</td><td>RV许可证</td></tr><tr><td>Scene</td><td>场</td></tr><tr><td>Sequence</td><td>本</td></tr><tr><td>ShootDay</td><td>拍摄日期</td></tr><tr><td>Shot</td><td>镜头</td></tr><tr><td>Software</td><td>DCC软件</td></tr><tr><td>Status</td><td>状态</td></tr><tr><td>Step</td><td>工作流工序</td></tr><tr><td>Tag</td><td>标签</td></tr><tr><td>Task</td><td>任务</td></tr><tr><td>TaskDependency</td><td>任务依存关系</td></tr><tr><td>TaskTemplate</td><td>任务模版</td></tr><tr><td>Ticket</td><td>软件开发工单</td></tr><tr><td>TimeLog</td><td>工时记录</td></tr><tr><td>Version</td><td>版本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> Shotgun </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PyQt介绍及入门学习</title>
      <link href="//pyqt-basis/"/>
      <url>//pyqt-basis/</url>
      
        <content type="html"><![CDATA[<h3><span id="qt的历史"><strong>Qt的历史</strong></span></h3><p>Qt是一个1991年由Qt Company开发的<strong>跨平台C++图形用户界面应用程序开发框架</strong>。<br>也可以用与开发非GUI程序，比如控制台工具和服务器。<br>Qt是<strong>面向对象</strong>的框架，使用特殊的代码生成扩展以及一些宏，Qt很容易扩展，<br>并且允许真正地组件编程。</p><p>2008年6月17日被NOKIA公司收购。<br>2009年5月11日，诺基亚Qt Software宣布Qt源代码管理系统面向公众开放。<br>2012年8月9日，Digia宣布已完成对诺基亚Qt业务及软件技术的全面收购。</p><h3><span id="gui和api"><strong>GUI和API</strong></span></h3><p>最后的“ I ”都是指Interface (接口)</p><p>GUI: Graphical User Interface (图形用户接口)<br>API: application programming interface (应用程序接口)</p><h3><span id="pyqt和pyside"><strong>PyQt和PySide</strong></span></h3><p>它们都是Qt扩展出来，为了支持python编程。<br>PyQt是来自第三方开发，而PySide是一套官方出的Python绑定。</p><p>下面来自维基百科：</p><blockquote><p>PyQt的开发者是英国的“RiverbankComputing”公司。<br>它提供了<strong>GPL</strong>与<strong>商业协议</strong>两种授权方式，因此它可以免费地用于自由软件的开发。<br>不过当前尚不提供LGPL授权方式。PyQt可以运行于Microsoft Windows、Mac OS X、Linux以及Unix的多数变种上。<br>2009年8月，Qt的开发公司诺基亚发布PySide，提供与PyQt类似的功能，但提供了<strong>LGPL授权</strong>。</p></blockquote><h3><span id="授权模式"><strong>授权模式</strong></span></h3><p>GPL: GNU General Public License (GNU 通用公共许可协议)<br>LGPL：GNU Lesser General Public License (GNU 宽通用公共许可证)</p><blockquote><p>它们是<strong>自由软件</strong>(Free Software)的<strong>通用版权认证协议</strong>，由自由软件基金会(FSF)制定和发布。  </p></blockquote><blockquote><p><strong>基于 GPL 的软件允许商业化销售</strong>，但不允许封闭源代码。如果您对遵循GPL的软件进行任何改动和/或再次开发并予以发布，则您的产品必须继承 GPL 协议，不允许封闭源代码。</p></blockquote><blockquote><p><strong>基于 LGPL 的软件也允许商业化销售</strong>，但不允许封闭源代码。如果您对遵循 LGPL 的软件进行任何改动和/或再次开发并予以发布，则您的产品必须继承LGPL协议，不允许封闭源代码。但是如果您的程序对遵循 LGPL 的软件进行任何连接、调用而不是包含，则允许封闭源代码。</p></blockquote><h3><span id="安装pyqt和pyside"><strong>安装PyQt和PySide</strong></span></h3><p>一个可以下载很多开源项目软件的网站<br><a href="https://sourceforge.net/">https://sourceforge.net</a></p><p>我们可以在这里找到PyQt: <a href="https://sourceforge.net/projects/pyqt/files/PyQt5/">https://sourceforge.net/projects/pyqt/files/PyQt5/</a></p><p>不过因为PyQt是第三方开发的，最先放出来的是源码包，最新的暂时没有windows安装版本，需要自己去编译。</p><p>下面是业界一位大佬的github，他自己编译了py2的Qt5。<br>(现在能在网上下到的py2的Qt5暂时就这一个，其余应该都升为python3了。)<br><a href="https://github.com/pyqt/python-qt5">https://github.com/pyqt/python-qt5</a></p><p>关于PySide大多的CG软件都会自带。<br><a href="http://download.qt.io/snapshots/ci/pyside/5.6/1528217692/pyside2/">http://download.qt.io/snapshots/ci/pyside/5.6/1528217692/pyside2/</a><br>也可以去官方下载，这里面的whl格式是python第三方库安装格式。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-basis/p1.png"></p><p>这里可以直接复制链接，打开终端:<br><code>pip2 install &lt;粘贴的链接地址&gt;</code></p><p>而PyQt5也可以从官方库里安装:<br><code>pip2 install python-qt5</code></p><p>安装完成后，windows系统可以在下面的路径下找到<br>C:\Python27\Lib\site-packages\PySide2</p><h3><span id="pyqt5主要的模块"><strong>PyQt5主要的模块</strong></span></h3><ul><li><strong>QtCore</strong>: 核心算法库</li><li> <strong>QtGui</strong>: 界面图形的算法库</li><li> <strong>QtWidgets</strong>: 界面控件库(之前属于QtGui，到了PyQt5单独分割出来。)</li><li> <strong>uic</strong>: ui文件到py文件的桥梁</li><li> <strong>sip</strong>: C++对象到python转换库</li></ul><h3><span id="pyqt帮助文档"><strong>PyQt帮助文档</strong></span></h3><p>推荐参考PyQt4的文档<br><a href="http://pyqt.sourceforge.net/Docs/PyQt4/classes.html">http://pyqt.sourceforge.net/Docs/PyQt4/classes.html</a></p><h3><span id="使用ui文件创建一个窗口"><strong>使用ui文件创建一个窗口</strong></span></h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import pyside2uic# ui文件转换为py文件，语法 pyside2uic.compileUi(uifile, pyfile)with open(&#39;D:&#x2F;test&#x2F;ui_frame.py&#39;, &#39;w&#39;) as f:    pyside2uic.compileUi(&#39;D:&#x2F;test&#x2F;ui_frame.ui&#39;, f)# 主程序调用py文件import sysfrom PySide2 import QtCore, QtWidgets, QtGuiimport ui_framedef main():    app &#x3D; QtWidgets.QApplication(sys.argv)    window &#x3D; QtWidgets.QMainWindow()    ui &#x3D; ui_frame.Ui_MainWindow()    ui.setupUi(window)    window.show()    app.exec_()if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>(完)</center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python正则方法</title>
      <link href="//python-re-module-help/"/>
      <url>//python-re-module-help/</url>
      
        <content type="html"><![CDATA[<h2><span id="概览">概览</span></h2><ul><li><code>re.compile</code> 生成一个匹配器实例，用来匹配</li><li><code>re.match</code> 从字符最前端开始匹配</li><li><code>re.search</code> 从字符中搜索出第一个匹配结果</li><li><code>re.findall</code> 从字符中找出所有匹配结果</li><li><code>re.sub</code> 查询替换字符，返回替换结果</li><li><code>re.subn</code> 查询替换字符，返回替换结果和替换次数</li><li><code>re.split</code> 根据规则切分字符串</li></ul><h2><span id="rematch案例">re.match案例</span></h2><p>re.match返回的是一个<strong>实例对象</strong>，调用它的方法找到结果。</p><p>假设我们需要匹配开头为”Ch_”的字符</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import re# 匹配成功返回一个实例对象print re.match(&#39;Ch_&#39;, &#39;Ch_dog_v001&#39;)&gt;&gt;&gt; &lt;_sre.SRE_Match object at 0x0000000003ACA510&gt;# 如果匹配失败，是没有返回值的print re.match(&#39;Ch_&#39;, &#39;aCh_dog_v001&#39;)&gt;&gt;&gt; None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>group方法：用于获得一个或多个分组匹配的字符串</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">res &#x3D; re.match(&#39;Ch_&#39;, &#39;Ch_dog_v001&#39;)print res.group()&gt;&gt;&gt; Ch_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>pos方法：找到匹配字符的index位置（好像这个方法永远都是返回0吧？）</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">res &#x3D; re.match(&#39;Ch_&#39;, &#39;Ch_dog_v001&#39;)print res.pos&gt;&gt;&gt; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意re.match是<strong>从字符串前端开始匹配</strong>，如下情况需要<strong>匹配的字符在字符串中间</strong>，就会返回空值。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">res &#x3D; re.match(&#39;Ch_&#39;, &#39;HCH_Ch_dog_v001&#39;)print res&gt;&gt;&gt; None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="research案例">re.search案例</span></h2><p>search方法则是从字符串中搜索出第一个匹配的结果</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">res &#x3D; re.match(&#39;Ch_&#39;, &#39;HAH_Ch_dog_v001&#39;)# 这里返回了实例，说明匹配成功print res&gt;&gt;&gt; &lt;_sre.SRE_Match object at 0x00000000031AA510&gt;print res.group()&gt;&gt;&gt; Ch_# 匹配字符的起始index位置print res.start()&gt;&gt;&gt; 4# 匹配字符的结束index位置print res.end()&gt;&gt;&gt; 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2><span id="模糊匹配">模糊匹配</span></h2><p><strong>上面讲的是精确搜索，下面开始讲解模糊搜索。</strong></p><ul><li><p>使用<code>[]</code>找到中括号里的任意一个字母匹配。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">res &#x3D; re.search(&#39;d[aoes]g&#39;, &#39;dog dag deg dsg&#39;)print res&gt;&gt;&gt; &lt;_sre.SRE_Match object at 0x0000000002FDA510&gt;print res.group()&gt;&gt;&gt; dog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者<code>[a-zA-Z0-9]</code>这样匹配所有的小写和大写字母与数字。</p></li><li><p>使用转义字符模糊搜索<br><code>\d</code> 匹配数字(0-9)<br><code>\w</code> 匹配字母，数字和下划线 (a-z A-Z 0-9 _)<br><code>\s</code> 匹配空格<br><code>\n</code> 匹配换行的地方<br><code>.</code>  匹配任何一个字符</p></li></ul><p> 将<strong>转移字符大写</strong>，则是<strong>相反的效果</strong>，意思是匹配除去本义匹配的字符。<br> <code>\D</code> 匹配除数字外的字符<br> <code>\S</code> 匹配除空格外的字符<br> 以此类推…</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">res &#x3D; re.search(&#39;a\dt&#39;, &#39;a6t&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; a6t 0 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>匹配次数</li></ul><p><code>?</code> 表示匹配0-1次<br><code>+</code> 表示匹配1-无数次<br><code>*</code> 表示匹配0-无数次</p><p>课堂小案例：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 字符a和t之间有一个数字匹配成功res &#x3D; re.search(&#39;a\d?t&#39;, &#39;a6t&#39;)print res.group(), res.start(), res.end()# 字符a和t之间有多个数字匹配失败res &#x3D; re.search(&#39;a\d?t&#39;, &#39;a66666t&#39;)print res# 字符a和t之间没有数字匹配成功res &#x3D; re.search(&#39;a\d?t&#39;, &#39;at&#39;)print res.group(), res.start(), res.end()# 匹配条件：1开头，第二个数字是3，5，或者7，后面9位都是数字res &#x3D; re.search(&#39;1[357]\d&#123;9&#125;&#39;, &#39;13910733521-45648356489&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; 13910733521 0 11# 匹配3个以上的 ares &#x3D; re.search(&#39;a&#123;3,&#125;&#39;, &#39;abbaabbbaaabbbb&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; aaa 8 11# 贪婪模式，匹配大于等于3个到小于等于9个 a，默认是往最大数量的找&#39;&#39;&#39;这里因为用的search, 所以如果匹配对象为&#39;baaabaaaaaaaaab&#39;则会返回3个a，search是返回第一个符合匹配条件的对象。&#39;&#39;&#39;res &#x3D; re.search(&#39;a&#123;3,9&#125;&#39;, &#39;aabaaaaaaaaaaaaaaab&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; aaaaaaaaa 3 12# 非贪婪模式,加上?, 返回上面情况的最小数量res &#x3D; re.search(&#39;a&#123;3,9&#125;?&#39;, &#39;aabaaaaaaaaaaaaaaab&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; aaa 3 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>?</code>号通常用于大区间匹配限制。<br><code>+?</code>: 在匹配1到无数次时，取最小数量。<br><code>*?</code>: 在匹配0到无数次时，取最小数量。<br><code>&#123;m,n&#125;</code>: 在匹配m到n次时，取最小数量。</p><ul><li>特殊符号</li></ul><p><code>^</code>: 表示匹配字符串开头。<br><code>$</code>: 表示匹配字符串结尾。<br><code>|</code>: 表示或，把正则表达式分为两段判断匹配。<br><code>()</code>: 表示编组，括号里面的表达式作为一个整体逻辑。<br><code>[^ABC]</code>: 匹配除去括号内字符以外的字符。<br><code>\</code>: 转义符，给一些特殊符号去除符号作用。</p><p>课堂小案例：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 匹配开头，这和match方法一样了。res &#x3D; re.search(&#39;^zhangly&#39;, &#39;zhanglyoooohhhh&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; zhangly 0 7# 符号.表示匹配任何一个字符，这里用\去除它的作用res &#x3D; re.search(&#39;HS-\d&#123;3&#125;\.avi&#39;, &#39;this is lalala HS-009.avi lalala&#39;)print res.group(), res.start(), res.end()&gt;&gt;&gt; HS-009.avi 15 25# 如果需要匹配多个， 使用findall()， 返回一个列表res &#x3D; re.findall(&#39;HS-\d&#123;3&#125;\.avi&#39;, &#39;HS-988.avi lalala HS-009.avi lalala&#39;)print res&gt;&gt;&gt; [&#39;HS-988.avi&#39;, &#39;HS-009.avi&#39;]# 符号()编组返回结果res &#x3D; re.search(&#39;(?P&lt;zimu&gt;[a-zA-Z]+)(?P&lt;shuzi&gt;\d+)&#39;, &#39;sgasgasg55648&#39;)print res.groups()&gt;&gt;&gt; (&#39;sgasgasg&#39;, &#39;55648&#39;)print res.groupdict()&gt;&gt;&gt; &#123;&#39;zimu&#39;: &#39;sgasgasg&#39;, &#39;shuzi&#39;: &#39;55648&#39;&#125;# 使用符号 | 返回多个匹配条件res &#x3D; re.findall(&#39;((aaa|bbb)\.txt)&#39;, &#39;gasgaaa.txtgasgwghbbb.txt&#39;)print res&gt;&gt;&gt; [(&#39;aaa.txt&#39;, &#39;aaa&#39;), (&#39;bbb.txt&#39;, &#39;bbb&#39;)]&#39;&#39;&#39;列表中元组的第一个元素，是满足整个匹配条件的字符。第二个元素是里层括号&#39;(aaa|bbb)&#39;满足条件的字符。&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>逻辑判断<br><code>(?=abc)</code>: 判断字符后面包含abc<br><code>(?!abv)</code>: 判断字符后面不包含abc<br><code>(?&lt;abc)</code>: 判断字符前面包含abc<br><code>(?&lt;!abc)</code>: 判断字符前面不包含abc<br><code>(?#...)</code>: 注释</li></ul><p>课堂小案例：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># 比如只返回匹配.jpg前面的字符res &#x3D; re.search(&#39;\w+(?&#x3D;.jpg)&#39;, &#39;image001.jpg&#39;)print res.group()&gt;&gt;&gt; image001# 判断条件：字符是数字，并且字符后面不是.jpgres &#x3D; re.search(&#39;\d+(?!.jpg)&#39;, &#39;image001.jpg&#39;)print res.group()&gt;&gt;&gt; 00# 判断条件：字符是数字，并且字符前面是numres &#x3D; re.search(&#39;(?&lt;&#x3D;num)\d+&#39;, &#39;123456num7890&#39;)print res.group()&gt;&gt;&gt; 7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课程推荐的一个检查正则表达式网站：<br><a href="https://regex101.com/">https://regex101.com/</a></p><p>这里的博客介绍也很详细，可以当作参考：<br><a href="http://funhacks.net/2016/12/27/regular_expression/">http://funhacks.net/2016/12/27/regular_expression/</a></p><center>(完)</center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim快捷键查询</title>
      <link href="//vim-help/"/>
      <url>//vim-help/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了自己忘记的时候方便查询，整理了vim使用的快捷键。  </p></blockquote><p>vim分为三种模式：普通模式， 编辑模式， 命令模式。  </p><h3><span id="普通模式">普通模式</span></h3><table><thead><tr><th align="center">热键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">a</td><td align="center">光标后插入</td></tr><tr><td align="center">i</td><td align="center">光标线插入</td></tr><tr><td align="center">s</td><td align="center">替换光标所在位置字符</td></tr><tr><td align="center">o</td><td align="center">光标进入下一行插入</td></tr><tr><td align="center">A</td><td align="center">光标所在整句后插入</td></tr><tr><td align="center">O</td><td align="center">光标进入上一行插入</td></tr><tr><td align="center">G</td><td align="center">到最后一行</td></tr><tr><td align="center">gg</td><td align="center">到第一行</td></tr><tr><td align="center">ctrl+f</td><td align="center">到下一页</td></tr><tr><td align="center">ctrl+b</td><td align="center">到上一页</td></tr><tr><td align="center">数字+G</td><td align="center">跳到指定数字行</td></tr><tr><td align="center">数字+%</td><td align="center">跳到指定百分比位置</td></tr><tr><td align="center">／str</td><td align="center">搜索指定字符,n:继续查找下一个,N:查找上一个</td></tr><tr><td align="center">yy</td><td align="center">复制一行  （yy后加数字，复制指定数字行）</td></tr><tr><td align="center">p</td><td align="center">粘贴光标所在行 下一行</td></tr><tr><td align="center">shift+p</td><td align="center">粘贴光标所在行 上一行</td></tr><tr><td align="center">r</td><td align="center">替换光标下的字符</td></tr><tr><td align="center">x</td><td align="center">删除光标下字符</td></tr><tr><td align="center">d d</td><td align="center">删除一行</td></tr><tr><td align="center">D</td><td align="center">本行光标所在后面的部分删除</td></tr><tr><td align="center">d w</td><td align="center">删除一个单词</td></tr><tr><td align="center">U</td><td align="center">把选择的单词变为大写</td></tr><tr><td align="center">g Uw</td><td align="center">把光标下的单词变为大写</td></tr><tr><td align="center">g uw</td><td align="center">把光标下的单词变为小写</td></tr><tr><td align="center">shift+8</td><td align="center">查找光标下的单词  n下一个 N上一个</td></tr><tr><td align="center">／ str[ab]</td><td align="center">模式匹配 可匹配到 stra  strb</td></tr></tbody></table><h5><span id="比较特殊的v键">比较特殊的v键：</span></h5><p><strong>v</strong>：视觉范围选择<br><strong>ctrl+v</strong>： 矩形范围选择<br>配合<strong>d</strong>键删除区域<br>配合<strong>y</strong>键复制区域<br><strong>shift+i</strong>： 在视觉选择模式下，多行插入。  </p><h3><span id="命令模式">命令模式</span></h3><table><thead><tr><th align="center">热键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">set nu</td><td align="center">显示行号</td></tr><tr><td align="center">set nonu</td><td align="center">不显示行号</td></tr><tr><td align="center">w</td><td align="center">保存文件</td></tr><tr><td align="center">q</td><td align="center">退出文件</td></tr><tr><td align="center">wq</td><td align="center">保存并退出</td></tr></tbody></table><h3><span id="分屏和标签页">分屏和标签页</span></h3><table><thead><tr><th align="center">热键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">:split</td><td align="center">水平方向切割出一个窗口</td></tr><tr><td align="center">:vsplit</td><td align="center">垂直方向切割出一个窗口</td></tr><tr><td align="center">ctrl+w</td><td align="center">切换窗口，h到左边窗口，j到下方窗口，k到上方窗口，l到右边窗口</td></tr><tr><td align="center">:tabnew</td><td align="center">新建一个标签页</td></tr><tr><td align="center">:tabfirst</td><td align="center">跳到首个标签页</td></tr><tr><td align="center">:tablast</td><td align="center">跳到末尾标签页</td></tr><tr><td align="center">:e 文件名</td><td align="center">在新的标签页打开文件</td></tr><tr><td align="center">ctrl+&lt;PgUp/PgDn&gt;</td><td align="center">标签页的切换</td></tr></tbody></table><h3><span id="粘贴模式和代码缩进">粘贴模式和代码缩进</span></h3><table><thead><tr><th align="center">热键</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">:set paste</td><td align="center">进入粘贴模式</td></tr><tr><td align="center">:set nopaste</td><td align="center">退出粘贴模式</td></tr><tr><td align="center">&gt;</td><td align="center">增加缩进</td></tr><tr><td align="center">&lt;</td><td align="center">减少缩进</td></tr></tbody></table><h3><span id="寄存器">寄存器</span></h3><p>vim提供了26个剪切板，对应26个字母。<br>例:<code>ap</code>,<code>bp</code>,粘贴，<br><code>ay</code>,<code>by</code>复制。  </p><h3><span id="宏录制">宏录制</span></h3><p>vim提供了26个宏。<br>录制命令:<code>q</code>开始录制， <code>a</code>定义宏名， <code>q</code>结束录制。<br>执行宏<code>@a</code>, 多次执行(这里举例3次)<code>3@a</code>。  </p><h3><span id="标记">标记</span></h3><p>同样是26个标记点。<br><strong>m(mark)a</strong>： 创建标记a<br><strong>‘a</strong>: 定位到标记点a (前面是单引号)<br><strong>:delmarks a</strong>： 删除标记a</p>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用MeshLab为模型减面</title>
      <link href="//meshlab-remove-face/"/>
      <url>//meshlab-remove-face/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在项目制作中，我们时常会拿到模型面数非常大的<strong>扫描模型</strong>。<br>模型导入到软件里会<strong>非常的吃内存</strong>，有时候这种扫描模型只是用作<strong>位置参照</strong>。<br>使用<strong>MeshLab为模型减面</strong>，既不会改变太多模型，也不会让模型加大电脑的计算量。  </p></blockquote><p>在网上随便找了一个模型(手头没有扫描模型)。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p1.png"></p><p>导入到maya里，可以看到这里的面数为161652，<br>其实这个面数不算多，一般大场景的扫描模型会比这个多上十倍百倍。<br>这里就拿这个模型作为范例:  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p2.png"></p><p>打开MeshLab软件(如未安装，可从<a href="http://www.meshlab.net/">官网</a>下载)，导入模型。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p3.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p4.png"></p><p>可以从上图下方的信息栏看到模型的一些相关信息。<br>如模型的面数323304(可能是我从maya里导出obj的原因，与之前maya显示的面数不一样)。<br>然后执行命令：<br><strong><code>Filters - Remeshing, Simplification and Reconstruction - Simplification: Quadric Edge Collapse Decimation</code></strong></p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p5.png" width="80%" height="80%" alt align="center"></left>  </p><p>弹出的对话框中，修改Percentage reduction参数，想让模型的面数越少这个值就越小。<br>通常数值范围在 0.99 ~ 0.1， 减面后的面数会约等于当前模型面数乘以这个参数值。<br>这里以推荐参数0.1为例，点击Apply。   </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p6.png"></p><p>完成后，就得到了减面过后的模型了。<br>这里看它的面数为32.330刚好为之前的十分之一。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p7.png"></p><p>最后导出模型即可。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/meshlab-remove-face/p8.png"></p><center>(完)</center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UE4和Maya的数据通信</title>
      <link href="//maya-link-unreal/"/>
      <url>//maya-link-unreal/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>因为出色的实时渲染，快速的可见效果。<br>在如今的电影视效制作中，渐渐有了Unreal的身影。  </p><p>不过Unreal在动画部分，却不像它的渲染这么出彩。<br><strong>动画制作还是由我们的老牌软件Maya来负责</strong>，<br>然后再将动画通过abc,fbx等格式输出到Unreal进行预览。  </p><p>在这样“分离”的情况下，可能会遇到动画的反复修改，<br>重复的导出导入，没法很好的运用到Unreal的优势。<br>为了能够<strong>所见即所得</strong>，让Maya和Unreal之间的数据通信。<br>所以它们就诞生了: Live Link, Mirror, MUTools。</p><p>下面将为大家介绍这几款插件，以及它们的区别，和各自的优势。</p><h1><span id="live-link">Live Link</span></h1><p>Live Link是Unreal官方插件，内置在虚幻引擎中。<br>在Setting - Plugin中开启即可。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-link-unreal/p1.jpg"></p><p>它可以在两个软件里导入同一个文件(目前只支持fbx)，<br><strong>然后在Maya中制作动画，Unreal会实时更新制作的动画效果。</strong></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-link-unreal/p2.gif"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-link-unreal/p3.gif"></p><p>Live Link是Maya到Unreal的单向输出，<br>在Unreal里的操作不会对Maya里的动画和模型有任何影响。<br>如果想了解更多以及如何使用，可以查看官方文档：<br><a href="https://docs.unrealengine.com/zh-CN/Engine/Animation/LiveLinkPlugin/ConnectingUnrealEngine4toMayawithLiveLink/index.html">https://docs.unrealengine.com/zh-CN/Engine/Animation/LiveLinkPlugin/ConnectingUnrealEngine4toMayawithLiveLink/index.html</a></p><h1><span id="mirror">Mirror</span></h1><p>Mirror是由国内团队开发的插件，<br>它的作用是将Unreal场景渲染的效果实时传递到Maya里。</p><p>和它的名字一样，传入的效果只是一个镜像，<br>在Maya里是不会载入任何Unreal的模型物体。<br>和Live Link相比，它是由Unreal到Maya的单向输出，<br>当然这个输出只是一个镜像，软件本身互不影响。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-link-unreal/p4.gif"></p><p>我们可以直接在这样的“镜像”场景中，导入模型开始动画制作。<br>在Maya里就可以实时看到动画在场景中的表现。  </p><p>同时，它也可以在Maya进行拍屏预览，这对于制作previz是非常友好了。<br>等动画效果满意后，再导出到Unreal里进行渲染。</p><p>官方网站：<a href="http://mirror.virtueal.cn/">http://mirror.virtueal.cn/</a></p><h1><span id="mutools">MUTools</span></h1><p>MUTools是由<strong>达瓦科技</strong>的R&amp;D部门研发的插件，<br>它可以直接在Unreal里“打开”Maya的ma文件，无需导出fbx或者abc等中间文件，实现数据传递。</p><p>这个“打开”是通过插件里的一个蓝图实现，它可以和一个ma文件进行链接，<br>并列出ma文件中所有模型，然后将所需的物体加载到Unreal中。  </p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/maya-link-unreal/p5.jpg"></p><p>这省去了中间导入导出的过程，在Maya里修改动画后，保存文件。<br>返回到Unreal，再进行一次ma文件的load，即可在Unreal里完成动画的更新。<br>当然，它也可以支持Maya时间轴和Sequencer同步。  </p><p>更多的功能可以看这个介绍视频：<br><a href="https://www.bilibili.com/video/BV1ct4y1Y7qP">https://www.bilibili.com/video/BV1ct4y1Y7qP</a></p><h1><span id="总结">总结</span></h1><p><strong>Live Link</strong></p><ul><li>从Maya到Unreal单向输出</li><li>官方插件，比较好的兼容性</li><li>免费的</li><li>只支持fbx文件</li><li>较为繁琐的连接配置</li></ul><p><strong>Mirror</strong></p><ul><li>从Unreal到Maya的单向(镜像)输出</li><li>付费插件</li><li>配置简单，在Unreal里打开插件和场景即可</li><li>能专注在Maya里进行动画制作</li></ul><p><strong>MUTools</strong></p><ul><li>无需中间文件，直接在Unreal里读取ma文件</li><li>尚在开发测试阶段，插件暂时不对外</li></ul><hr><p>如果觉得文章还不错，可以关注下作者的公众号。</p><center><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/metahuman-intro/p31.JPG" width="30%" height="30%" alt align="center"></center>]]></content>
      
      
      <categories>
          
          <category> Article </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Vive Tracker控制UE4摄像机</title>
      <link href="//unreal-vive-tracker-camera/"/>
      <url>//unreal-vive-tracker-camera/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>Vive Tracker是HTC VR系列产品的配件，<br>它可以通过绑定现实世界中的物体(配合定位器)，来追踪物体的位置。</p><p>使用这个特性，我们可以通过将Vive Tracker绑定到摄像机上，<br>来控制UE4里的虚拟相机运动。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p1.jpg"></p><h1><span id="准备">准备</span></h1><p>首先需要下载SteamVR，进行与VR设备的连接配置。<br>下载安装完成后，将VR设备通过USB连接到电脑，<br>SteamVR会自动检测到设备，按照提示进行配置即可。<br>(这个步骤比较简单就跳过了。)</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p2.jpg"></p><h1><span id="进入ue4">进入UE4</span></h1><p>SteamVR和设备配置完成后，<br>下面开始在UE4里将摄像机和VIVE追踪器进行关联。</p><h2><span id="1禁用oculus-vr插件">1.禁用Oculus VR插件</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p3.png"></p><h2><span id="2更改play设置勾选viewport-get-hmdcontrol">2.更改Play设置，勾选Viewport Get HMDControl</span></h2><p>允许用户在视口中播放模式下使用头戴式显示器方向。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p4.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p5.png"></p><h2><span id="3新建一个actor蓝图类修改名称为trackercamera">3.新建一个Actor蓝图类，修改名称为TrackerCamera.</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p6.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p7.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p8.png"></p><h2><span id="4进入trackercamera蓝图进行修改">4.进入TrackerCamera蓝图进行修改</span></h2><p>(1.) 创建一个cube</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p9.png"></p><p>(2.)切换到Event Graph标签，创建以下两个节点，并按照图示连接</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p10.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p11.png"></p><p>（这里记得是Out Orientation连New Transform）</p><p>(3.) 这里输入正确的设备id号</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p12.png"></p><p>默认是从0开始计序号，如图所示，比如需要用tracker设备，这里id号就是5。</p><p>（但是实测不是这样的）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p13.png"></p><ul><li><p>获取id号的方法（点击展开）</p><p>  连接这样一套节点</p><p>  <img src="https://i.loli.net/2020/11/27/umdC1aGW7zFTJ6S.png" alt="Untitled 11.png"></p><p>  保存后去预览窗口播放，移动相应的设备，屏幕上即会print出对应的id号</p><p>  （测试了也没成功，最后是靠猜id）</p></li></ul><p>(4.) 创建一个摄像机放到Cube下</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p14.png"></p><h2><span id="5添加动作映射">5.添加动作映射</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p15.png"></p><h2><span id="6打开关卡蓝图进行修改如图所示">6.打开关卡蓝图，进行修改（如图所示）</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p16.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p17.png"></p><p>（这里画圈的节点是ChangeCamera，创建Set View Target with Blend节点的时候，取消勾选Context Sensitive）</p><p>到这一步，将视图最小化，在视图中选择cube，再返回到节点视图。</p><p>右键创建：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p18.png"></p><p>再进行连接</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-vive-tracker-camera/p19.png"></p><p>记得compile并save一下，关闭窗口。</p><h2><span id="7效果检查">7.效果检查</span></h2><p>点击播放键，按下键盘的1切换到摄像机视图。<br>这个时候移动你的VIVE追踪器，UE4中的摄像机也会实时跟随移动。</p><center>（完）</center>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Unreal </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PySide Event事件</title>
      <link href="//pyqt-learning-event/"/>
      <url>//pyqt-learning-event/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下面几个示例来说明事件的应用</p></blockquote><ul><li>一些基本的事件注释  </li></ul><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># coding&#x3D;utf-8from PySide2.QtWidgets import *from PySide2.QtGui import *from PySide2.QtCore import *import sysclass Window1(QWidget):    def __init__(self):        super(Window1, self).__init__()        # 追踪鼠标移动        # self.setMouseTracking(True)    # 鼠标点击事件    def mousePressEvent(self, event):        # 鼠标点击时，打印点击位置(相对于窗口)        print event.pos()        # 鼠标点击时，打印点击位置(整个屏幕)        print event.globalPos() # 可以在QMouseEvent里去寻找方法        self.currentPos &#x3D; self.pos()        self.mouseOriPos &#x3D; event.globalPos()    # 鼠标移动事件    def mouseMoveEvent(self, event):        # 实现点击按住移动窗口功能        self.mouseDesPos &#x3D; event.globalPos()        move &#x3D; self.mouseDesPos - self.mouseOriPos        self.move(self.currentPos + move)    # 鼠标释放事件    def mouseReleaseEvent(self, event):        print &#39;mouse release&#39;    # 鼠标双击事件    def mouseDoubleClickEvent(self, event):        # 双击放大或还原默认窗口        if self.isMaximized():            self.showNormal()        else:            self.showMaximized()    # 键盘按键事件    def keyPressEvent(self, event):        # 获取按下按键的值        print event.text()        # 设置按下ESC 关闭窗口        if event.key() &#x3D;&#x3D; Qt.Key_Escape:            self.close()        # 设置按下Ctrl + 回车键，发送消息        if event.modifiers() &#x3D;&#x3D; Qt.ControlModifier and event.key() &#x3D;&#x3D; Qt.Key_Return:            print &#39;send message.&#39;    # 释放键盘按键事件    def keyReleaseEvent(self, event):        print &#39;key release&#39;    # 鼠标进入窗口事件    def enterEvent(self, event):        print &#39;enter&#39;    # 鼠标离开窗口事件    def leaveEvent(self, event):        print &#39;leave&#39;    # 窗口关闭事件    def closeEvent(self, event):        print &#39;close&#39;app &#x3D; QApplication(sys.argv)widget &#x3D; Window1()widget.show()app.exec_()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>鼠标拖拽实例  </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window1<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setAcceptDrops<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dragEnterEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        mimeData <span class="token operator">=</span> event<span class="token punctuation">.</span>mimeData<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 获取拖拽的数据类型</span>        <span class="token keyword">print</span> mimeData<span class="token punctuation">.</span>formats<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 允许文件类型的拖拽</span>        <span class="token keyword">if</span> mimeData<span class="token punctuation">.</span>hasUrls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            event<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 拖拽事件</span>    <span class="token keyword">def</span> <span class="token function">dropEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> event<span class="token punctuation">.</span>mimeData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>urls<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 打印出所有拖拽进窗口的文件</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> event<span class="token punctuation">.</span>mimeData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>urls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> url<span class="token punctuation">.</span>toLocalFile<span class="token punctuation">(</span><span class="token punctuation">)</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>widget <span class="token operator">=</span> Window1<span class="token punctuation">(</span><span class="token punctuation">)</span>widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PyQt常用部件用法</title>
      <link href="//pyqt-learning-001/"/>
      <url>//pyqt-learning-001/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>本文非常臭长，并<strong>不适合整篇阅读</strong>。<br>此页面主要用于PyQt控件方法查询 (所以左侧的目录会很有用)</p><h1><span id="qlineedit">QLineEdit</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p1.png"></p><h2><span id="生成控件">生成控件</span></h2><p><code>widget = QLineEdit()</code></p><h2><span id="设置输入框文字">设置输入框文字</span></h2><p><code>widget.setText(&#39;some text&#39;)</code></p><h2><span id="设置提示文字">设置提示文字</span></h2><p><code>widget.setPlaceholderText(&#39;some text&#39;)</code></p><h2><span id="设置输入框为只读">设置输入框为只读</span></h2><p><code>widget.setReadOnly(True)</code></p><h2><span id="设置输入框内容长度限制">设置输入框内容长度限制</span></h2><p><code>widget.setMaxLength(10)</code></p><h2><span id="设置输入框为内容为非明文">设置输入框为内容为非明文</span></h2><p><code>widget.setEchoMode(QLineEdit.password)</code></p><h2><span id="设置输入框下拉提示选项列表">设置输入框下拉提示选项列表</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aa1'</span><span class="token punctuation">,</span> <span class="token string">'aa2'</span><span class="token punctuation">,</span> <span class="token string">'aa3'</span><span class="token punctuation">]</span>completer <span class="token operator">=</span> QCompleter<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>widget<span class="token punctuation">.</span>setCompleter<span class="token punctuation">(</span>completer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="qpushbutton">QPushButton</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p2.png"></p><h2><span id="生成控件">生成控件</span></h2><p><code>bt = QPushButton(&#39;push&#39;)</code></p><h2><span id="给按钮设置图标">给按钮设置图标</span></h2><p><code>bt.setIcon(QIcon(&#39;icon.png&#39;))</code></p><h2><span id="给按钮关联命令">给按钮关联命令</span></h2><p><code>bt.clicked.connect(func_name)</code></p><h1><span id="qcheckbox">QCheckBox</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p3.png"></p><h2><span id="生成控件">生成控件</span></h2><p><code>ck = QCheckBox(&#39;check&#39;)</code></p><h2><span id="设置默认为勾选状态">设置默认为勾选状态</span></h2><p><code>ck.setChecked(True)</code></p><h2><span id="返回是否勾选">返回是否勾选</span></h2><p><code>ck.isChecked()</code></p><h2><span id="返回勾选框文字">返回勾选框文字</span></h2><p><code>ck.text()</code></p><h1><span id="qlistwidget">QListWidget</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p4.png"></p><h2><span id="生成控件">生成控件</span></h2><p><code>listWidget = QListWidget()</code></p><h2><span id="添加一个元素">添加一个元素</span></h2><p><code>listWidget.addItem(&#39;abc&#39;)</code></p><h2><span id="添加一个一堆元素">添加一个一堆元素</span></h2><p><code>listWidget.addItems([&#39;a1&#39;, &#39;b2&#39;, &#39;c3&#39;, &#39;d4&#39;])</code></p><h2><span id="插入元素">插入元素</span></h2><p><code>listWidget.insertItem(1, &#39;b1&#39;)</code></p><h2><span id="给元素设置图标">给元素设置图标</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">item <span class="token operator">=</span> QListWidgetItem<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>item<span class="token punctuation">.</span>setIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">'icon.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>listWidget<span class="token punctuation">.</span>addItem<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="给元素进行排序">给元素进行排序</span></h2><p><code>listWidget.sortItems()</code></p><h2><span id="设置默认被选中的行">设置默认被选中的行</span></h2><p><code>listWidget.setCurrentRow(1)</code></p><h2><span id="设置间隔行颜色区分">设置间隔行颜色区分</span></h2><p><code>listWidget.setAlternatingRowColors(True)</code></p><h2><span id="设置行多选">设置行多选</span></h2><p><code>listWidget.setSelectionMode(QAbstractItemView.ExtendedSelection)</code></p><h2><span id="获取行总数">获取行总数</span></h2><p><code>listWidget.count()</code></p><h2><span id="获取指定行的文字">获取指定行的文字</span></h2><p><code>listWidget.item(1).text()</code></p><h2><span id="获取被选中的行返回列表">获取被选中的行，返回列表</span></h2><p><code>listWidget.selectedItems()</code></p><h1><span id="qtablewidget">QTableWidget</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p5.png"></p><h2><span id="生成控件">生成控件</span></h2><p><code>tableWidget = QTableWidget(5，7)</code></p><h2><span id="设置行数">设置行数</span></h2><p><code>tableWidget.setRowCount(5)</code></p><h2><span id="设置列数">设置列数</span></h2><p><code>tableWidget.setColumnCount(7)</code></p><h2><span id="设置表头名称">设置表头名称</span></h2><p><code>tableWidget.setHorizontalHeaderLabels([&#39;Project&#39;, &#39;Sequence&#39;, &#39;Shot&#39;, &#39;Task&#39;])</code></p><h2><span id="获取表格的总行数">获取表格的总行数</span></h2><p><code>tableWidget.rowCount()</code></p><h2><span id="给指定格添加数据">给指定格添加数据</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">item <span class="token operator">=</span> QTableWidget<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>row <span class="token operator">=</span> <span class="token number">5</span>column <span class="token operator">=</span> <span class="token number">2</span>tableWidget<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>row<span class="token punctuation">,</span> column<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="插入行插入列">插入行，插入列</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tableWidget<span class="token punctuation">.</span>insertRow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>tableWidget<span class="token punctuation">.</span>insertColumn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="删除行删除列">删除行，删除列</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">tableWidget<span class="token punctuation">.</span>removeRow<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>tableWidget<span class="token punctuation">.</span>removeColumn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="隐藏行">隐藏行</span></h2><p><code>tableWidget.hideRow(0)</code></p><h2><span id="清除表格内容只清除数据不包括表头">清除表格内容(只清除数据,不包括表头)</span></h2><p><code>tableWidget.clearContents()</code></p><h2><span id="清除所有表格内容">清除所有表格内容</span></h2><p><code>tableWidget.clear()</code></p><h2><span id="更改指定列表头的内容">更改指定列表头的内容</span></h2><p><code>tableWidget.setHorizontalHeaderItem(4, QTableWidgetItem(&#39;Step&#39;))</code></p><h2><span id="设置表格的内容为勾选框">设置表格的内容为勾选框</span></h2><p><code>tableWidget.setCellWidget(1, 2, QCheckBox())</code></p><h2><span id="设置表格为单选模式">设置表格为单选模式</span></h2><p><code>tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)</code></p><h2><span id="设置选择单元格模式为选取一行">设置选择单元格模式，为选取一行</span></h2><p><code>tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)</code></p><h2><span id="设置表格不可编辑">设置表格不可编辑</span></h2><p><code>tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</code></p><h2><span id="设置指定单元格不可编辑">设置指定单元格不可编辑</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">item <span class="token operator">=</span> tableWidget<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>item<span class="token punctuation">.</span>setFlags<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>ItemIsSelectable <span class="token operator">|</span> QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>ItemIsEnabled<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="为指定行设置行高">为指定行设置行高</span></h2><p><code>tableWidget.setRowHeight(0, 20)</code></p><h2><span id="给表格排序以第二列倒序排序">给表格排序(以第二列倒序排序)</span></h2><p><code>tableWidget.sortByColumn(1, Qt.DescedingOrder)</code></p><h2><span id="隐藏表格网格">隐藏表格网格</span></h2><p><code>tableWidget.setShowGrid(False)</code></p><h2><span id="隐藏表格行数序号">隐藏表格行数序号</span></h2><p><code>tableWidget.verticalHeader().setVisible(False)</code></p><h2><span id="获取指定单元格内容">获取指定单元格内容</span></h2><p><code>tableWidget.item(2, 3).text()</code></p><h1><span id="qtreewidget">QTreeWidget</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p6.png"></p><h2><span id="生成控件">生成控件</span></h2><p><code>treeWidget = QTreeWidget()</code></p><h2><span id="设置列数">设置列数</span></h2><p><code>treeWidget.setColumnCount(2)</code></p><h2><span id="设置表头">设置表头</span></h2><p><code>treeWidget.setHeaderLabels([&#39;Shots&#39;, &#39;describe&#39;])</code></p><h2><span id="添加一个root目录">添加一个root目录</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">root <span class="token operator">=</span> QTreeWidgetItem<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'shot_0100'</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'full cg shot'</span><span class="token punctuation">)</span>treeWidget<span class="token punctuation">.</span>addTopLevelItem<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="为root添加子目录">为root添加子目录</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">item1 <span class="token operator">=</span> QTreeWidgetItem<span class="token punctuation">(</span><span class="token punctuation">)</span>item1<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Layout'</span><span class="token punctuation">)</span>item1<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Done'</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>addChild<span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="设置自动展开">设置自动展开</span></h2><p><code>treeWidget.expandAll()</code></p><h2><span id="设置展开开启动画效果">设置展开开启动画效果</span></h2><p><code>treeWidget.setAnimated()</code></p><h2><span id="设置root目录扩展整行">设置root目录扩展整行</span></h2><p><code>treeWidget.setFirstItemColumnSpanned(root, True)</code></p><h2><span id="设置行高及颜色">设置行高，及颜色</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">root<span class="token punctuation">.</span>setSizeHint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> QSize<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>setBackgroumd<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> QColor<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="qgroupbox">QGroupBox</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p7.png"></p><h2><span id="示例">示例</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sysapp <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>widget <span class="token operator">=</span> QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>main_layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>layout1 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    layout1<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QCheckBox<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>group1 <span class="token operator">=</span> QGroupBox<span class="token punctuation">(</span><span class="token string">'my check box'</span><span class="token punctuation">)</span>group1<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>layout1<span class="token punctuation">)</span>layout2 <span class="token operator">=</span> QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    layout2<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QPushButton<span class="token punctuation">(</span><span class="token string">'push me'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>group2 <span class="token operator">=</span> QGroupBox<span class="token punctuation">(</span><span class="token string">'button group'</span><span class="token punctuation">)</span>group2<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>layout2<span class="token punctuation">)</span>main_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>group1<span class="token punctuation">)</span>main_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>group2<span class="token punctuation">)</span>widget<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>main_layout<span class="token punctuation">)</span>widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="qtabwidget">QTabWidget</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p8.png"></p><h2><span id="生成控件">生成控件</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>tabWidget <span class="token operator">=</span> QTabWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>widget1 <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span>widget2 <span class="token operator">=</span> QCheckBox<span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>widget3 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">'push'</span><span class="token punctuation">)</span>tabWidget<span class="token punctuation">.</span>addTab<span class="token punctuation">(</span>widget1<span class="token punctuation">,</span> <span class="token string">'my line edit'</span><span class="token punctuation">)</span>tabWidget<span class="token punctuation">.</span>addTab<span class="token punctuation">(</span>widget2<span class="token punctuation">,</span> <span class="token string">'my check box'</span><span class="token punctuation">)</span>tabWidget<span class="token punctuation">.</span>addTab<span class="token punctuation">(</span>widget3<span class="token punctuation">,</span> <span class="token string">'my button'</span><span class="token punctuation">)</span>tabWidget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="设置标签可移动">设置标签可移动</span></h2><p><code>tabWidget.setMoveble(True)</code></p><h2><span id="设置标签关闭按钮">设置标签关闭按钮</span></h2><p><code>tabWidget.setTabsClosable(True)</code></p><h2><span id="设置指定标签图标">设置指定标签图标</span></h2><p><code>tabWidget.setTabIcon(0, &#39;icon.png&#39;)</code></p><h1><span id="qmenu">QMenu</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p9.png"></p><h2><span id="简单示例">简单示例</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sysapp <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>menuBar <span class="token operator">=</span> window<span class="token punctuation">.</span>menuBar<span class="token punctuation">(</span><span class="token punctuation">)</span>fileMenu <span class="token operator">=</span> QMenu<span class="token punctuation">(</span><span class="token string">'File'</span><span class="token punctuation">)</span>newAction <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'New'</span><span class="token punctuation">)</span>openAction <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'Open'</span><span class="token punctuation">)</span>saveAction <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'Save'</span><span class="token punctuation">)</span>fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>newAction<span class="token punctuation">)</span>fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>openAction<span class="token punctuation">)</span>fileMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>saveAction<span class="token punctuation">)</span>menuBar<span class="token punctuation">.</span>addMenu<span class="token punctuation">(</span>fileMenu<span class="token punctuation">)</span>window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="action关联命令">Action关联命令</span></h2><p><code>saveAction.triggered.connect(my_command)</code></p><h2><span id="action设置快捷键">Action设置快捷键</span></h2><p><code>saveAction.setShortcut(&#39;Ctrl+S&#39;)</code></p><h2><span id="action设置图标">Action设置图标</span></h2><p><code>saveAction = QAction(QIcon(&#39;icon.png&#39;), &#39;new&#39;)</code></p><h2><span id="为menu一次添加多个action">为Menu一次添加多个Action</span></h2><p><code>fileMenu.addActions([newAction, openAction, saveAction])</code></p><h2><span id="添加子菜单">添加子菜单</span></h2><p><code>fileMenu.addMenu(SecondMenu)</code></p><h2><span id="添加分割线">添加分割线</span></h2><p><code>fileMenu.addSeparator()</code></p><h2><span id="右键菜单示例">右键菜单示例</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p10.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Window1<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>contextMenu <span class="token operator">=</span> QMenu<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        newAction <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'New'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        openAction <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'Open'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        saveAction <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">'Save'</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>newAction<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>openAction<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>saveAction<span class="token punctuation">)</span>        <span class="token comment"># 设置右键点击菜单为自定义菜单</span>        self<span class="token punctuation">.</span>setContextMenuPolicy<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>CustomContextMenu<span class="token punctuation">)</span>        <span class="token comment"># 关联右键自定义显示菜单函数</span>        self<span class="token punctuation">.</span>customContextMenuRequested<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>showContextMenu<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">showContextMenu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># QCursor.pos() 返回鼠标的位置</span>        self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>move<span class="token punctuation">(</span>QCursor<span class="token punctuation">.</span>pos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>contextMenu<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>widget <span class="token operator">=</span> Window1<span class="token punctuation">(</span><span class="token punctuation">)</span>widget<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="qfiledialog">QFileDialog</span></h1><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p11.jpg"></p><h2><span id="选择文件对话框">选择文件对话框</span></h2><p><code>QFileDialog.getOpenFileName()</code></p><h2><span id="选择多个文件对话框">选择多个文件对话框</span></h2><p><code>QFileDialog.getOpenFileNames()</code></p><h2><span id="选择目录对话框">选择目录对话框</span></h2><p><code>QFileDialog.getExistingDirectory()</code></p><h2><span id="获取保存文件的对话框">获取保存文件的对话框</span></h2><p><code>QFileDialog.getSaveFileName()</code></p><h1><span id="qcolordialog">QColorDialog</span></h1><h2><span id="获取颜色选择对话框">获取颜色选择对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p12.png"></p><p><code>QColorDialog.getColor()</code></p><h1><span id="qfontdialog">QFontDialog</span></h1><h2><span id="获取字体选择对话框">获取字体选择对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p13.png"></p><p><code>QFontDialog.getFont()</code></p><h1><span id="qinputdialog">QInputDialog</span></h1><h2><span id="文字输入框">文字输入框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p14.png"></p><p><code>QInputDialog.getText(self, &#39;title&#39;, &#39;my text&#39;)</code></p><h2><span id="整数输入框">整数输入框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p15.png"></p><p><code>QInputDialog.getInt()</code></p><h2><span id="小数输入框">小数输入框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p16.png"></p><p><code>QInputDialog.getDouble()</code></p><h2><span id="列表选择对话框">列表选择对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p17.png"></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">items &#x3D; [&#39;square&#39;, &#39;triangle&#39;, &#39;circle&#39;]#参数： 1 为默认选择第一个值， False为禁止编辑QInputDialog.getItem(&#39;get&#39;, &#39;item:&#39;, items, 1, False)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1><span id="qmessagebox">QMessageBox</span></h1><h2><span id="询问对话框">询问对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p18.png"></p><p><code>QMessageBox.question(&#39;question&#39;, &#39;Are u sure?&#39;, QMessageBox.Yes|QMessageBox.No)</code></p><h2><span id="提示对话框">提示对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p19.png"></p><p><code>QMessageBox.information(&#39;information&#39;, &#39;niubi!&#39;)</code></p><h2><span id="警告对话框">警告对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p20.png"></p><p><code>QMessageBox.warning(&#39;warning&#39;, &#39;its wrong!&#39;)</code></p><h2><span id="错误对话框">错误对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p21.png"></p><p><code>QMessageBox.critical(&#39;critical&#39;, &#39;dont do this!&#39;)</code></p><h2><span id="关于对话框">关于对话框</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pyqt-learning-001/p22.png"></p><p><code>QMessageBox.about(&#39;about&#39;, &#39;About lingyunfx&#39;)</code></p><h2><span id="消息对话框示例">消息对话框示例</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">message <span class="token operator">=</span> QMessageBox<span class="token punctuation">(</span>self<span class="token punctuation">)</span>message<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>message<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'my name is hanmm'</span><span class="token punctuation">)</span>message<span class="token punctuation">.</span>setIcon<span class="token punctuation">(</span>QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">)</span>message<span class="token punctuation">.</span>setStandardButtons<span class="token punctuation">(</span>QMessageBox<span class="token punctuation">.</span>Ok<span class="token operator">|</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span>message<span class="token punctuation">.</span>setDefaultButton<span class="token punctuation">(</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span>message<span class="token punctuation">.</span>setDetailedText<span class="token punctuation">(</span><span class="token string">'this is detail'</span><span class="token punctuation">)</span> <span class="token comment"># 显示详述</span>message<span class="token punctuation">.</span>addButton<span class="token punctuation">(</span><span class="token string">'custom'</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>YesRole<span class="token punctuation">)</span> <span class="token comment"># 添加自定义按钮</span><span class="token comment"># 返回点击button的文字</span>result <span class="token operator">=</span> message<span class="token punctuation">.</span>clickedButton<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> button<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 查询 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm中无法使用QApplication类</title>
      <link href="//pycharm-pyside-issue1/"/>
      <url>//pycharm-pyside-issue1/</url>
      
        <content type="html"><![CDATA[<p>前段时间想把PyQt系统的重新学学习一下，兴致勃勃的打开Pycharm，<br>运行起了下列这一串代码：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from PySide2 import QtWidgetsimport sysapp &#x3D; QtWidgets.QApplication(sys.argv)widget &#x3D; QtWidgets.QWidget()widget.show()app.exec_()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很基础的一个生成UI窗口的代码，报错了…<br>下面是报错信息：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;bin&#x2F;python2.7 &#x2F;Users&#x2F;mine&#x2F;PycharmProjects&#x2F;pyqt_learning&#x2F;test01.pyTraceback (most recent call last):  File &quot;&#x2F;Users&#x2F;mine&#x2F;PycharmProjects&#x2F;pyqt_learning&#x2F;test01.py&quot;, line 6, in &lt;module&gt;    app &#x3D; QtWidgets.QApplication(sys.argv)TypeError: &#39;NoneType&#39; object is not callable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>百思不得其解，后来网上搜了半天，找到了答案。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pycharm-pyside-issue1/p1.jpg"></p><p>因为我之前在Pycharm里写Maya工具的时候，<br><strong>为了能让代码自动补全，加入了MayaDevKit环境</strong>。<br>而Maya的DevKit这个包里的模块会覆盖了QApplication这个类的返回值。<br><strong>解决方法</strong>就是把那条<strong>环境配置删掉</strong>就好了，见下图：</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/pycharm-pyside-issue1/p2.jpg" width="80%" height="80%" alt align="center"></left></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 疑难问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Python为UE4添加自定义菜单</title>
      <link href="//unreal-add-custom-menus/"/>
      <url>//unreal-add-custom-menus/</url>
      
        <content type="html"><![CDATA[<h2><span id="在程序主菜单下添加自定义菜单">在程序主菜单下添加自定义菜单</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unreal<span class="token comment"># Get the main menu class</span>menus <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenus<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>menu_name <span class="token operator">=</span> <span class="token string">'LevelEditor.MainMenu'</span>menu <span class="token operator">=</span> menus<span class="token punctuation">.</span>find_menu<span class="token punctuation">(</span>menu_name<span class="token punctuation">)</span><span class="token comment"># Custom menu parameters</span>owner <span class="token operator">=</span> menu<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>section_name <span class="token operator">=</span> <span class="token string">'PythonTools'</span>name <span class="token operator">=</span> <span class="token string">'lingyunFX'</span>label <span class="token operator">=</span> <span class="token string">'lingyunFX'</span>tool_tip <span class="token operator">=</span> <span class="token string">'This is some python toolset.'</span><span class="token comment"># Add and refresh</span>menu<span class="token punctuation">.</span>add_sub_menu<span class="token punctuation">(</span>owner<span class="token punctuation">,</span> section_name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> label<span class="token punctuation">,</span> tool_tip<span class="token punctuation">)</span>menus<span class="token punctuation">.</span>refresh_all_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="为菜单添加按钮">为菜单添加按钮</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p2.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unreal<span class="token comment"># Get the menu class</span>menus <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenus<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>menu_name <span class="token operator">=</span> <span class="token string">"LevelEditor.MainMenu.lingyunFX"</span>menu <span class="token operator">=</span> menus<span class="token punctuation">.</span>find_menu<span class="token punctuation">(</span>menu_name<span class="token punctuation">)</span><span class="token comment"># Set the button type and label</span>entry <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenuEntry<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span>unreal<span class="token punctuation">.</span>MultiBlockType<span class="token punctuation">.</span>MENU_ENTRY<span class="token punctuation">)</span>entry<span class="token punctuation">.</span>set_label<span class="token punctuation">(</span><span class="token string">'TEST BUTTON 01'</span><span class="token punctuation">)</span><span class="token comment"># Set button command</span>typ <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenuStringCommandType<span class="token punctuation">.</span>PYTHONentry<span class="token punctuation">.</span>set_string_command<span class="token punctuation">(</span>typ<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">'print "this is test button"'</span><span class="token punctuation">)</span><span class="token comment"># Add and refresh</span>section_name <span class="token operator">=</span> <span class="token string">''</span>menu<span class="token punctuation">.</span>add_menu_entry<span class="token punctuation">(</span>section_name<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>menus<span class="token punctuation">.</span>refresh_all_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>section_name</strong> 这个参数后面会说到它，其实是一个定位的作用。</p><p>关于add_sub_menu和add_menu_entry的参数，可以查看官方文档：</p><p><a href="https://docs.unrealengine.com/en-US/PythonAPI/class/ToolMenu.html">https://docs.unrealengine.com/en-US/PythonAPI/class/ToolMenu.html</a></p><p>（吐槽一下简陋的官方文档，就给了个参数名）</p><h2><span id="添加工具架按钮">添加工具架按钮</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unreal<span class="token comment"># Get the menu class</span>menus <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenus<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>menu_name <span class="token operator">=</span> <span class="token string">"LevelEditor.LevelEditorToolBar"</span>menu <span class="token operator">=</span> menus<span class="token punctuation">.</span>find_menu<span class="token punctuation">(</span>menu_name<span class="token punctuation">)</span><span class="token comment"># Set the button type and label</span>entry <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenuEntry<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span>unreal<span class="token punctuation">.</span>MultiBlockType<span class="token punctuation">.</span>TOOL_BAR_BUTTON<span class="token punctuation">)</span>entry<span class="token punctuation">.</span>set_label<span class="token punctuation">(</span><span class="token string">"Test Button"</span><span class="token punctuation">)</span><span class="token comment"># Set button command</span>typ <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenuStringCommandType<span class="token punctuation">.</span>PYTHONentry<span class="token punctuation">.</span>set_string_command<span class="token punctuation">(</span>typ<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">'print "Hello World!"'</span><span class="token punctuation">)</span><span class="token comment"># Add and refresh</span>section_name <span class="token operator">=</span> <span class="token string">'Settings'</span>menu<span class="token punctuation">.</span>add_menu_entry<span class="token punctuation">(</span>section_name<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>menus<span class="token punctuation">.</span>refresh_all_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p3.png"></p><p>这里就可以看到<strong>section_name</strong>参数的意义，它会将按钮放置在Settings集的最后。</p><p>如果想把按钮放在其它地方，就得先知道控件的名称。</p><p>如何知道这些控件的名字，在这里开启：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p4.png"></p><p>开启后重启Unreal就可以看到，如下图所示：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p5.png"></p><h2><span id="右键菜单扩展">右键菜单扩展</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p6.png"></p><p>这里想把按钮放到Source Control类别下，所以需要去查看控件名。</p><p>通过上面的方法可以看到，名称为：PathContextSourceControl</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/unreal-add-custom-menus/p7.png"></p><p>找到控件名，则可以用代码实现效果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unreal<span class="token comment"># Get the menu class</span>menus <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenus<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>menu_name <span class="token operator">=</span> <span class="token string">"ContentBrowser.FolderContextMenu"</span>menu <span class="token operator">=</span> menus<span class="token punctuation">.</span>find_menu<span class="token punctuation">(</span>menu_name<span class="token punctuation">)</span><span class="token comment"># Set the button type and label</span>entry <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenuEntry<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span>unreal<span class="token punctuation">.</span>MultiBlockType<span class="token punctuation">.</span>MENU_ENTRY<span class="token punctuation">)</span>entry<span class="token punctuation">.</span>set_label<span class="token punctuation">(</span><span class="token string">"Right Click Test"</span><span class="token punctuation">)</span><span class="token comment"># Set button command, add button</span>typ <span class="token operator">=</span> unreal<span class="token punctuation">.</span>ToolMenuStringCommandType<span class="token punctuation">.</span>PYTHONentry<span class="token punctuation">.</span>set_string_command<span class="token punctuation">(</span>typ<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">'print "entry test"'</span><span class="token punctuation">)</span>menu<span class="token punctuation">.</span>add_menu_entry<span class="token punctuation">(</span><span class="token string">'PathContextSourceControl'</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右键菜单是点击的时候实时刷新的，所以这里不需要再调用refresh_all_widgets()</p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Unreal </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deadline 使用技巧</title>
      <link href="//deadline-use-techniques/"/>
      <url>//deadline-use-techniques/</url>
      
        <content type="html"><![CDATA[<h2><span id="如何重置面板">如何重置面板</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p1.png"></p><h2><span id="如何重新提交任务">如何重新提交任务</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p2.png"></p><p>比如一些帧数是黑帧，可以在面板里输入指定的帧数进行渲染</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p3.png"></p><h2><span id="暂时禁用自己的主机到渲染台">暂时禁用自己的主机到渲染台</span></h2><p>首先需要切换到super mode</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p4.png"></p><h2><span id="如何加入黑名单和白名单">如何加入黑名单和白名单</span></h2><p>比如一台机子渲染一直在报错，可以将这台机子（暂时）加入黑名单</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p5.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p6.png"></p><h2><span id="如何限制cpu-gpu核心数">如何限制cpu gpu核心数</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p7.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p8.png"></p><h2><span id="任务权限优先级设置">任务权限优先级设置</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p9.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p10.png"></p><h2><span id="设置管理员密码">设置管理员密码</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p11.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p12.png"></p><p>配置用户组，可以让指定的用户不用每次都输入密码进入super mode（管理员适用）</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p13.png"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/deadline-use-techniques/p14.png"></p><h2><span id="添加子任务任务依赖">添加子任务（任务依赖）</span></h2><p>比如一个是缓存任务，一个是渲染任务。</p><p>渲染任务在缓存任务完成之后。</p><p>鼠标中间拖动任务到父级任务下。</p><h2><span id="配置新版本软件">配置新版本软件</span></h2><p>C:\DeadlineRepository10\scripts\Submission</p><p>C:\DeadlineRepository10\plugins\Houdini\Houdini.param</p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Deadline </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署JIRA和PostgreSQL</title>
      <link href="//docker-make-jira/"/>
      <url>//docker-make-jira/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下述的部署方式只供用于学习用途，如需商业使用，请购买正版：<a href="https://www.atlassian.com/zh/software/jira">https://www.atlassian.com/zh/software/jira</a></p></blockquote><h1><span id="部署postgresql">部署PostgreSQL</span></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取postgres包。(这里对应的PostgreSQL版本是9.6)</span>docker pull postgreSQL:9.6<span class="token comment"># 运行镜像</span>docker run -d --name postgresdb -p <span class="token number">5432</span>:5432 -e <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span><span class="token operator">&lt;</span>password<span class="token operator">></span> postgres:9.6<span class="token comment"># 进入容器</span>docker <span class="token builtin class-name">exec</span> -it postgresdb <span class="token function">bash</span><span class="token comment"># 操作数据库</span>psql -U postgresCREATE DATABASE jira WITH OWNER postgres<span class="token punctuation">;</span> <span class="token comment"># 创建一个jira的账户</span><span class="token punctuation">\</span>l <span class="token comment"># 列出所有账户和表</span><span class="token punctuation">\</span>q <span class="token comment"># 退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="部署jira">部署JIRA</span></h1><h2><span id="1创建一个目录写入一个dockerfile文件文件内容如下">1.创建一个目录，写入一个Dockerfile文件（文件内容如下）</span></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">FROM cptactionhank<span class="token operator">/</span>atlassian<span class="token operator">-</span>jira<span class="token operator">-</span>software<span class="token punctuation">:</span><span class="token number">7.12</span><span class="token number">.0</span>USER root<span class="token comment"># 将代理破解包加入容器</span>COPY <span class="token string">"atlassian-agent.jar"</span> <span class="token operator">/</span>opt<span class="token operator">/</span>atlassian<span class="token operator">/</span>jira<span class="token operator">/</span><span class="token comment"># 设置启动加载代理包</span>RUN echo <span class="token string">'export CATALINA_OPTS="-javaagent:/opt/atlassian/jira/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;"'</span> <span class="token operator">>></span> <span class="token operator">/</span>opt<span class="token operator">/</span>atlassian<span class="token operator">/</span>jira<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>setenv<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="2将atlassian-agentjar文件放到dockerfile同目录下">2.将atlassian-agent.jar文件，放到Dockerfile同目录下</span></h2><p>atlassian-agent.jar 这个文件自行在网上搜索下载</p><p>类似下面的层级：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- JIRA  --Dockerfile  --atlassian-agent.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="3构建镜像执行命令">3.构建镜像，执行命令</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最后的 . 代表当前目录 这个命令会搜索当前目录的 Dockerfile</span>docker build -t jira/jira:v7.12.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到提示 Successfully 就说明构建镜像成功了。</p><h2><span id="4启动容器执行命令">4.启动容器，执行命令</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --detach --name jira --publish <span class="token number">80</span>:8080 --link postgresdb:db --user root:root jira/jira:v7.12.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="5访问">5.访问</span></h2><p>选择自己进行设置</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/docker-make-jira/p1.jpg" width="70%" height="70%" alt align="center"></left>  </p><p>选择其他数据库</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/docker-make-jira/p2.jpg" width="70%" height="70%" alt align="center"></left>  </p><p>这里的主机可以进入jira的容器使用 ping db 来查看。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里记录下个人配置</span>PostgresSQL<span class="token number">172.17</span>.0.2<span class="token number">5432</span>postgrespostgrespassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="6生成密钥">6.生成密钥</span></h2><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/docker-make-jira/p3.png"></p><p>在存放atlassian-agent.jar的目录下执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 需替换邮箱（test@test.com）、名称（BAT）、</span><span class="token comment"># 访问地址（http://192.168.0.89）、服务器ID（BY9B-GWD1-1C78-K2DE）</span><span class="token comment"># 为你的信息</span>java -jar atlassian-agent.jar -d -m test@test.com -n BAT -p jira -o http://192.168.0.89 -s BY9B-GWD1-1C78-K2DE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将生成的许可证关键字复制到页面，完成。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/docker-make-jira/p4.png"></p><h1><span id="参考">参考</span></h1><p><a href="https://confluence.atlassian.com/adminjiraserver0712/supported-platforms-959313198.html">https://confluence.atlassian.com/adminjiraserver0712/supported-platforms-959313198.html</a></p><p><a href="https://www.jianshu.com/p/b95ceabd3e9d">https://www.jianshu.com/p/b95ceabd3e9d</a></p><p><a href="https://www.jianshu.com/p/1813bf05f71e">https://www.jianshu.com/p/1813bf05f71e</a></p>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="//docker-common-command/"/>
      <url>//docker-common-command/</url>
      
        <content type="html"><![CDATA[<h2><span id="下载指定镜像">下载指定镜像</span></h2><p>这里以nginx来举例</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 不指定版本</span>docker pull nginx<span class="token comment"># 指定版本</span>docker pull nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="查看本地有哪些镜像">查看本地有哪些镜像</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行镜像 -d为后台运行 -p指定内外端口映射(外面机器端口：里面机器端口)<br>这里的image_name包含了TAG，比如 jira/jira:v7.12.0</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p <span class="token number">80</span>:80 <span class="token operator">&lt;</span>image_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>–name</strong> 指定显示的容器名称<br><strong>-v</strong> 映射内外文件</p><h2><span id="查看正在运行的镜像-a为列出所有容器">查看正在运行的镜像 -a为列出所有容器</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="使用bash进入容器">使用bash进入容器</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token builtin class-name">exec</span> -it <span class="token operator">&lt;</span>id or name<span class="token operator">></span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="退出容器">退出容器</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="强制删除镜像">强制删除镜像</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker <span class="token function">rm</span> -f <span class="token operator">&lt;</span>id or name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="提交镜像">提交镜像</span></h2><p>将容器作了修改后，保存在一个镜像中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit <span class="token operator">&lt;</span>id<span class="token operator">></span> <span class="token operator">&lt;</span>image_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="使用docker-file来创建容器">使用docker file来创建容器</span></h2><p>-t指定镜像名 .为当前目录下的dockerFile文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t m2 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="将镜像保存到文件中">将镜像保存到文件中</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker save <span class="token punctuation">[</span>image-name<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span>.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="读取镜像文件到docker">读取镜像文件到docker</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker load <span class="token operator">&lt;</span> <span class="token number">1</span>.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="启动-停止-杀死-重启一个容器">启动 停止 杀死 重启一个容器</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker start name/iddocker stop name/iddocker <span class="token function">kill</span> name/iddocker restart name/id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="查看容器日志-f参数为持续输出">查看容器日志, -f参数为持续输出</span></h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker logs name/id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Arnold后环境变量被破坏</title>
      <link href="//mtoa-install-issue/"/>
      <url>//mtoa-install-issue/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>今天在安装新版本Arnold 4.1.0 for maya后，<br>打开maya发现一堆报错，其中还有不少乱码字符。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mtoa-install-issue/p1.png"></p><p>一看就知道是Arnold配置失败了，果不其然打开Plug-in Manager，<br>Maya直接就崩掉了。  </p><p>好奇这一堆乱码是怎么来的，安装的路径也没有中文字符啊。<br>接下来就开始一步步排查。<br>(节省时间的话可以直接看最后总结)</p><h1><span id="尝试解决">尝试解决</span></h1><p>遇到奇怪的问题，第一个就想到的是重新安装。(把官方的安装文档又仔细看了一遍)<br>官方安装文档：<br><a href="https://docs.arnoldrenderer.com/display/A5AFMUG/Installing+Arnold+for+Maya+on+Windows">https://docs.arnoldrenderer.com/display/A5AFMUG/Installing+Arnold+for+Maya+on+Windows</a></p><p>因为我需要将插件安装到网络路径上，所以是用的手动安装。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mtoa-install-issue/p2.png"></p><p>安装的步骤很简单，在点击安装程序后，取消勾选Configure MatoA for Maya。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mtoa-install-issue/p3.png"></p><p>安装的路径输入的是网络路径，比如 \server\arnold\mtoa\2017</p><p>然后在安装后去修改\server\arnold\mtoa\2017路径下的 mtoa.mod 文件。<br>修改为如下所示 (其实安装后，这里它会自动修改为安装时候输入的路径)</p><pre class="line-numbers language-none"><code class="language-none">+ mtoa any \\server\arnold\mtoa\2017PATH +:&#x3D; bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后将这个路径<code>\\server\arnold\mtoa\2017</code>加入到<br><strong>MAYA_MODULE_PATH</strong>和<strong>MAYA_RENDER_DESC_PATH</strong>环境变量中。</p><p><strong>MAYA_MODULE_PATH</strong>是为了让maya能找到该插件的mod文件的位置。<br><strong>MAYA_RENDER_DESC_PATH</strong>是为了maya在使用arnold批量渲染的时候，<br>能找到arnoldRenderer.xml 这个文件。</p><p>安装完成后打开maya，发现问题依然存在。<br>报错的信息里出现了一些奇怪的乱码。<br>于是我查看了下maya里的PYTHONPATH。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'PYTHONPATH'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果发现环境路径全被奇怪的乱码破坏了。<br>怪不得一打开Plug-in Manager软件就直接崩掉。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mtoa-install-issue/p4.png"></p><p>最早怀疑配置文件里路径反斜杆的原因，导致出现乱码，<br>于是把<code>\</code>替换成<code>/</code>，结果依旧。</p><p><strong>后来尝试不使用网络直接在本地安装，结果是正常可以使用的。</strong><br>本地安装不用手动去设置上述的两个环境变量，<br>所以<strong>问题应该是出在环境变量的设置中</strong>。</p><p>在排查的过程中Google翻到一篇帖子，帖子的提问者也遇到了同样的问题。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mtoa-install-issue/p5.png"></p><p>回答里说<strong>MAYA_MODULE_PATH</strong>里的路径中，不能存在exe等二进制的文件。<br>所以问题现在就比较清晰了，可以看到Arnold的插件目录下，<br>有两个exe文件和mod文件在同一个路径。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/mtoa-install-issue/p6.jpg"></p><p>于是我在这个目录中新建了一个文件夹，名为<code>mod</code>,<br>并将mtoa.mod文件拷贝到<code>mod</code>文件夹中，将其单独隔离起来。<br>然后设置<strong>MAYA_MODULE_PATH</strong>环境变量为这个<code>mod</code>文件夹。<br>果然到这里问题就迎刃而解了。</p><h1><span id="总结">总结</span></h1><p>在设置环境变量的时候，变量<strong>MAYA_MODULE_PATH</strong>目录下不能存在二进制文件。<br>maya奇怪的机制会去搜索给予路径下所有文件，并进行读取。<br>(按理说应该只过滤 *.mod格式的文件)<br>最好的解决方法是把所有的mod文件放在统一位置进行隔离配置。</p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Maya </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用LensDistortion节点输出STMap</title>
      <link href="//nuke-trn-lens-distort/"/>
      <url>//nuke-trn-lens-distort/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>通常在电影的前期拍摄中，Onset人员会拍摄摄像机不同焦段的畸变网格，<br>因为在后期制作中，没有Distortion map会让摄像机反求变得困难得多。</p><p>最左为枕形畸变，最右为桶形畸变。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p1.jpg"></p><p>通常我们会对一个棋盘格板进行拍摄，类似下图这样的。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p2.jpg"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p3.jpg"></p><p>拍摄完会得到一张畸变网格，下面我们使用nuke对其进行矫正畸变，并输出stmap。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p4.jpg"></p><h1><span id="矫正畸变">矫正畸变</span></h1><p>1.导入畸变网格图，添加LensDistortion节点。<br>这里使用的nuke版本为11.1v3。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p5.jpg"></p><p>2.点击Detect按钮，自动采集棋盘格信息。<br>可以看到黄线覆盖黑白格交界处。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p6.jpg"></p><p>3.手动调整没有识别准确的点，位置错误的点也可以delete删掉。如图所示：</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p7.gif"></p><p>4.调整完成后，点击Solve进行解算。<br>可以看到所有黄线变成了绿色，这个时候畸变就矫正完成了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p8.jpg"></p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p9.jpg"></p><p>5.这里将通道改为forward，就可以看到图片变成了一张stmap。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p10.jpg"></p><p>6.添加stmap节点，将stamp的input连向LensDistortion，<br>src的input连向原始素材。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p11.jpg"></p><p>7.修改Stmap的节点，UV channels为forward。<br>最后就可以输出矫正完畸变的素材到跟踪软件里开始制作了。</p><p><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/nuke-trn-lens-distort/p12.jpg"></p><p>参考来源：<br><a href="https://youtu.be/LsoaGOd-NB4">https://youtu.be/LsoaGOd-NB4</a></p><p>如果想了解一些关于Onset的知识：<a href="https://www.bilibili.com/read/cv2328144">纯干货！跟组需要做哪些工作</a></p>]]></content>
      
      
      <categories>
          
          <category> DCC </category>
          
          <category> Nuke </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建CGWire</title>
      <link href="//cgwire-install/"/>
      <url>//cgwire-install/</url>
      
        <content type="html"><![CDATA[<h1><span id="前言">前言</span></h1><p>国庆在家容易想些有的没的，<br>想着万一以后自己开了一个小型视效工作室，<br>该用什么来进行跟踪管理项目进度。</p><p>首先是想到的当然是诸如Shotgun, FTrack, CGTeamWork等这些项目管理平台。<br>但是价格上则让人却步，比如Shotgun收费标准是每人每月30刀。</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/install-cgwire/p1.jpg" width="70%" height="70%" alt align="center"></left>  </p><p>这对于小型低成本工作室，也算是一笔不小的开销。<br>抱着能省则省的态度，在网上找到了<strong>开源免费</strong>的项目管理平台CGWire</p><p><left><img src="https://gitlab.lingyunfx.com/zhangly/image/-/raw/main/install-cgwire/p2.jpg" width="80%" height="80%" alt align="center"></left>  </p><h1><span id="cgwire介绍">CGWire介绍</span></h1><p>文字不如视频直观，下面是官方的视频介绍，<br>可以说是麻雀虽小，该有的功能都有。</p><p><a href="https://youtu.be/EH3RbmHykrE">https://youtu.be/EH3RbmHykrE</a></p><h1><span id="cgwire搭建">CGWire搭建</span></h1><p>接下来就是无趣的代码部分了。<br>我这里使用的是Ubuntu 16.04版本进行的测试。</p><h2><span id="安装软件依赖">安装软件依赖</span></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> postgresql postgresql-client postgresql-server-dev-all<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> redis-server<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3 python3-pip<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="获取资源">获取资源</span></h2><p>创建一个zou用户</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo useradd --home &#x2F;opt&#x2F;zou zoumkdir &#x2F;opt&#x2F;zouchown zou: &#x2F;opt&#x2F;zou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装zou和其依赖</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo pip3 install virtualenvcd &#x2F;opt&#x2F;zousudo virtualenv zouenv. zouenv&#x2F;bin&#x2F;activatesudo zouenv&#x2F;bin&#x2F;pip3 install zousudo chown -R zou:www-data .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建存储预览的文件夹</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo mkdir &#x2F;opt&#x2F;zou&#x2F;previewssudo chown -R zou:www-data &#x2F;opt&#x2F;zou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="安装postgres数据库">安装Postgres数据库</span></h2><p>在postgres中创建Zou数据库</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo su -l postgrespsql -c &#39;create database zoudb;&#39; -U postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为postgres用户设置密码</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 输入命令psql# 这里会进入postgres的交互模式&gt;&gt;&gt; psql (9.4.12)&gt;&gt;&gt; Type &quot;help&quot; for help.# 输入下面命令进行密码创建postgres&#x3D;# \password postgresEnter new password:Enter it again:# 设置完成密码，退出交互模式\q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想使用交互式创建密码，可以用下面的方式。<br>如果已经创建了密码，跳过此步骤。</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">psql -U postgres -d postgres -c &quot;alter user postgres with password &#39;mysecretpassword&#39;;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，创建数据库表。<br>这里需注意已经退出了psql交互模式，并在zou虚拟环境下。</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># Run it in your bash console.DB_PASSWORD&#x3D;yourdbpassword zou init_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="准备键值存储">准备键值存储</span></h2><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">vim &#x2F;etc&#x2F;sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个文件末尾添加一行：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">vm.overcommit_memory = <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="配置gunicorn">配置Gunicorn</span></h2><p>需要通过Gunicorn运行该应用程序，<br>Gunicorn是将zou作为守护程序运行的WSGI服务器。</p><p>创建配置文件夹</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo mkdir &#x2F;etc&#x2F;zou<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建Gunicorn配置文件<br>路径： /etc/zou/gunicorn.conf</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">accesslog = <span class="token string">"/opt/zou/logs/gunicorn_access.log"</span>errorlog = <span class="token string">"/opt/zou/logs/gunicorn_error.log"</span>workers = <span class="token number">3</span>worker_class = <span class="token string">"gevent"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建日志文件夹</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo mkdir &#x2F;opt&#x2F;zou&#x2F;logssudo chown zou: &#x2F;opt&#x2F;zou&#x2F;logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建进程守护的配置文件<br>路径: /etc/systemd/system/zou.service</p><p>这里需要修改DB_PASSWORD和SECRET_KEY。<br>数据库的密码是之前设置的，而SECRET_KEY可以用pwgen来随机生成。</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">apt-get install pwgenpwgen 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成后可以复制其中一个给到SECRET_KEY</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=Gunicorn instance to serve the Zou APIAfter=network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>User=zouGroup=www-dataWorkingDirectory=/opt/zou# Append DB_USERNAME=username DB_HOST=server when default values aren't used# ffmpeg must be in PATHEnvironment=<span class="token string">"DB_PASSWORD=yourdbpassword"</span>Environment=<span class="token string">"SECRET_KEY=yourrandomsecretkey"</span>Environment=<span class="token string">"PATH=/opt/zou/zouenv/bin:/usr/bin"</span>Environment=<span class="token string">"PREVIEW_FOLDER=/opt/zou/previews"</span>ExecStart=/opt/zou/zouenv/bin/gunicorn  -c /etc/zou/gunicorn.conf -b <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">5000</span> zou.app<span class="token operator">:</span>app<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建事件流API服务器配置<br>路径: /etc/zou/gunicorn-events.conf</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">accesslog = <span class="token string">"/opt/zou/logs/gunicorn_events_access.log"</span>errorlog = <span class="token string">"/opt/zou/logs/gunicorn_events_error.log"</span>workers = <span class="token number">1</span>worker_class = <span class="token string">"geventwebsocket.gunicorn.workers.GeventWebSocketWorker"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过Systemd来守护事件流API服务进程<br>路径: /etc/systemd/system/zou-events.service</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=Gunicorn instance to serve the Zou Events APIAfter=network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>User=zouGroup=www-dataWorkingDirectory=/opt/zou# Append DB_USERNAME=username DB_HOST=server when default values aren't usedEnvironment=<span class="token string">"PATH=/opt/zou/zouenv/bin"</span>ExecStart=/opt/zou/zouenv/bin/gunicorn -c /etc/zou/gunicorn-events.conf -b <span class="token number">127.0</span>.<span class="token number">0.1</span><span class="token operator">:</span><span class="token number">5001</span> zou.event_stream<span class="token operator">:</span>app<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="配置nginx">配置Nginx</span></h2><p>配置文件路径: /etc/nginx/sites-available/zou</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">server &#123;    listen 80;    server_name server_domain_or_IP;    location &#x2F;api &#123;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_pass http:&#x2F;&#x2F;localhost:5000&#x2F;;        client_max_body_size 500M;    proxy_connect_timeout 600s;        proxy_send_timeout 600s;        proxy_read_timeout 600s;        send_timeout 600s;    &#125;    location &#x2F;socket.io &#123;    proxy_http_version 1.1;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &quot;Upgrade&quot;;        proxy_pass http:&#x2F;&#x2F;localhost:5001;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用nginx</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 删除默认配置sudo rm &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default# 创建文件链接sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;zou &#x2F;etc&#x2F;nginx&#x2F;sites-enabled# 重启nginxsudo service zou startsudo service zou-events startsudo service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="更新所有包">更新所有包</span></h2><p>更新zou软件包</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">cd &#x2F;opt&#x2F;zou. zouenv&#x2F;bin&#x2F;activatesudo zouenv&#x2F;bin&#x2F;pip3 install --upgrade zou<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新数据路架构</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 这里输入数据库的密码DB_PASSWORD&#x3D;yourdbpassword zou upgrade_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启zou服务</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo chown -R zou:www-data .sudo service zou restartsudo service zou-events restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="部署kitsu">部署Kitsu</span></h2><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">cd &#x2F;opt&#x2F;sudo git clone -b build https:&#x2F;&#x2F;github.com&#x2F;cgwire&#x2F;kitsucd kitsusudo git checkout buildsudo chown -R zou:www-data &#x2F;opt&#x2F;kitsu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署完成后需要更新nginx的配置</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">server &#123;    listen 80;    server_name server_domain_or_IP;    location &#x2F;api &#123;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header Host $host;        proxy_pass http:&#x2F;&#x2F;localhost:5000&#x2F;;    &#125;    location &#x2F;socket.io &#123;        proxy_http_version 1.1;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;Upgrade&quot;;        proxy_pass http:&#x2F;&#x2F;localhost:5001;    &#125;    location &#x2F; &#123;        autoindex on;        root  &#x2F;opt&#x2F;kitsu&#x2F;dist;        try_files $uri $uri&#x2F; &#x2F;index.html;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启nginx服务</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">sudo service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这一步就可以访问自己的ip或者域名来使用cgwire了。<br>当然，在此之前需要一个管理员账户来登陆cgwire。</p><h2><span id="创建cgwire管理员账户">创建cgwire管理员账户</span></h2><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 首先进入zou环境cd &#x2F;opt&#x2F;zou. zouenv&#x2F;bin&#x2F;activate# 创建管理员账户 create_admin后的参数 为自己的登陆邮箱DB_PASSWORD&#x3D;yourdbpassword zou create_admin adminemail@yourstudio.com# 初始化数据DB_PASSWORD&#x3D;yourdbpassword zou init_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>账户创建完成后，默认密码为default，第一次登陆后会强制让你修改密码。<br>最后请尽情的enjoy it。</p><center>（完）</center>]]></content>
      
      
      <categories>
          
          <category> TD Pipeline </category>
          
          <category> CGWire </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
